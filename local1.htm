<!DOCTYPE html>
<html lang='en'>
	<head>
		<title>Events</title>

		<link href='https://fonts.googleapis.com/css?family=Homenaje' rel='stylesheet'>
        <style>
            :root {
                --page-bottom: calc(100vh - 150px);
            }

            *{
                padding: 0;
                margin: 0;
                font-family: 'Homenaje';
            }

            header {
                display: flex;
                flex-direction: row;
                justify-content: space-evenly;
                align-items: center;
                position: fixed;
                top: 0;
                left: 0;
                height: 50px;
                width: 100%;
                background-color: #9f9;
                color: #040;
                z-index: 100;
            }

            nav {
                position: fixed;
                top: 50px;
                left: 0;
                width: 100%;
                background-color: #333;
                color: #fff;
                z-index: 100;
            }

            a {
                display: block;
                text-decoration: none;
                color: white;
                padding: 10px;
            }

            a:hover {
                color: #050;
                background: silver;
            }

            a:active {
                color: black;
                background-color: white;
            }

            nav ul {
                display: flex;
                list-style-type: none;
                margin: 0;
                padding: 0;
            }

            nav ul li {
                cursor: pointer;
                flex: auto;
                text-align: center;
            }

            body {
                background: #232;
                border: white;
                font-family: 'Homenaje';
            }

            #main {
                position: fixed;
                top: 90px;
                left: 0;
                width: 100%;
                color: #fff;
                height: calc(100vh - 100px);
                overflow: auto;
            }

            button {
                font-family: 'Homenaje';
                background-color: #030;
                color: #9f9;
                font-size: 18px;
                width: 110px;
                height: 90px;
                font-weight: bold;
                float: center;
                border-radius: 6px;
                padding: 2px;
            }

            select {
                font-size: 20px;
                color: #ccc;
                background-color: black;
            }

            input {
                font-size: 20px;
                height: 55px;
                float: center;
            }

            h1 {
                font-size: 40px;
            }

            h2 {
                font-size: 25px;
            }

            th {
                font-size:20px;
            }

            td {
                font-size: 20px;
                vertical-align: center;
            }

            textarea {
                font-size: 20px;
            }

            table {
                border-spacing: 5px;
            }

            .slnk{

                font-size: 16px;
                width: 25px;
                background-color: greenyellow;
                color: darkslategrey;
                font-weight: bold;
                float: center;
                border-radius: 8px;
            }

            .link {
                width: 75px;
                height: 50px;
                background-color: lightgreen;
                color: black;
                font-size: 14px;
                font-weight: bold;
                border-radius: 10px;
            }

            .ebtn:active {
                background-color: orange;
                color: blue;
            }

            .dateinput {
                background-color: black;
            }

            .sectExpand {

                background-color: black;
                color: white;

            }

            table {

                width: 100%;

            }

            svg { 
                width: 100%;
            }

            .controlGrid {
                display: grid;
                grid-template-columns: repeat(7, 1fr);
                grid-template-rows: repeat(6, fr);
                justify-items: stretch;
                align-items: center;
                position: fixed;
                top: 50px;
                left: 0;
                width: 100%;
                background-color: #333;
                color: #fff;
                z-index: 100;
                list-style-type: none;
            }

            .controlGrid a, .controlGrid p, .controlGrid select {
                display: flex;
                padding: 0;
                height: 25px;
                justify-content: center;
                align-items: center;
            }

            .controlGrid select {
                width: 100%;
                text-align: center;
            }


            #lblEventTime {
                grid-column-start: 2;
                grid-column-end: 4;
            }

            #mainSection {
                top: 150px;
                bottom: var(--page-bottom);
                position: absolute;
                left: 0;
                width: 100%;
                color: #fff;
                height: calc(100vh - 300px);
                overflow: auto;
                margin-bottom: 150px;
            }

            #footer {
                top: var(--page-bottom);
                position: absolute;
                width: 100%;
                background-color: #333;
                overflow: scroll;
                color: lime;
            }

            #timeZoneLabel, #timeZoneSelectContainer {
                grid-column-start: 1;
                grid-column-end: 3;
            }

            #detailStartLabel, #detailStartSelectContainer {
                grid-column-start: 4;
                grid-column-end: 6;
            }

            #detailEndLabel, #detailEndSelectContainer {
                grid-column-start: 6;
                grid-column-end: 8;
            }

            .eventList {
                font-size: 16px;
            }

            .pageSettings {
                display: none;
            }

            .groupHeading {
                font-size: 30px;
                font-weight: bold;
                color: #aaa;
            }

            .btnGroup {
                display: flex;
                flex-wrap: wrap;
                list-style-type: none;
                gap: 5px;
            }

            .hidden {
                display: none;	
            }

            #moodIndicator {
                display: flex;
                padding: 0;
                height: 25px;
                justify-content: center;
                align-items: center;
                font-size: 20px;
            }

            .warn {
                background-color: red;
            }

            iframe {

                /*height: 25px;
                width: 100px; */
                
                height: 300px;
                width: 300px;

                /*overflow: hidden;*/
                border: none;

            }

            #actForm {
                display: flex;	
                flex-wrap: wrap;
                justify-content: space-between;
            }


            fieldset {

                display: flex;
                width: 100%;
                align-items: center;
                flex-wrap: wrap;
                margin: 0;
                padding: 5px;
                gap: 5px;

            }

            label {

                display: flex;
                width: 100px;
                align-items: center;

            }

            input[type="checkbox"] {

                height: 25px;
                margin: 5px;

            }

            #ActID {

                width: 10%;
                text-align: center;

            }

            #ActDesc {

                width: 50%;
                text-align: center;

            }

            form h2 {
                width: 100%;
            }

            .modmenu * {
                background-color: #aaa;
                color: #333;
                list-style-type: none;
                width: 100%;
                text-align: center;
                font-weight: bold;
            }

            .modmenu {
                display: flex;
                flex-direction: row;
            }

            .modmenu a {
                padding-top: 5px;
                padding-bottom: 5px;
                padding-right: 0;
                padding-left: 0;
            }


            #updateForm #ActID, #UCode {
                width: 40%;
            }

            .modform p {
                display: flex;
            }

            .clrBox {
                width: 25px;
            }

            @media screen and (max-width: 500px) 
                {
                    .groupHeading {
                    
                        font-size: 16px;
                    }
                    
                    button {
                        width: 75px;
                        height: 75px;
                        font-size: 12px;
                    }
                    
                    .eventList td, .eventList th {
                        font-size: 10px;
                    }
                    
                    .slnk {
                        font-size: 8px;
                        width: 15px;
                        height: 15px;
                    }
            }
        </style>
		<script src="https://code.jquery.com/jquery-3.6.3.min.js" integrity="sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=" crossorigin="anonymous"></script>

        <script>
            //Manual Event Scripts

            const manualEventForm = {
  
            selectedPCode: '',
            selectedSubProj: '',
            clearDiv: function () {

      const listDiv = document.getElementById("eventBtnListContainer")

      while(listDiv.firstChild){

          listDiv.removeChild(listDiv.firstChild)

      }

  },
  btnLPU: function() {

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLPU){

          if(objLPU[i].PUCodeDesc!="Admin" && objLPU[i].PUCodeDesc!="Meeting") {
              
              let eventBtnContainer = document.createElement("li")
              
              let eventBtnText = objLPU[i].PUCodeDesc

              let linkTarget = i

              eventBtnText = document.createTextNode(eventBtnText)
              
              let eventLink = document.createElement("a")
              
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.btnProj(linkTarget)
                  this.selectedPCode = linkTarget
                  
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
          }
  
      }

  },
  btnProj: function(selectedPCode) {

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLProj) {

          if(objLProj[i].ProfileCode==selectedPCode && objLProj[i].ProjStatus!="Closed"){

              let eventBtnContainer = document.createElement("li");

              let eventBtnText = objLProj[i].ProjDesc;

              let linkTarget = i
              
              eventBtnText = document.createTextNode(eventBtnText)
          
              let eventLink = document.createElement("a")
          
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.btnSubProj(linkTarget)
                  
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
  

          }

      }

  },
  btnSubProj: function(selectedProj){

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLCont) {

          if(objLCont[i].ProjID==selectedProj && objLCont[i].Active!="N"){

              let eventBtnContainer = document.createElement("li");

              let eventBtnText = objLCont[i].ProjID + ": " + objLCont[i].ContDesc;

              let linkTarget = i
              
              eventBtnText = document.createTextNode(eventBtnText)
          
              let eventLink = document.createElement("a")
          
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.btnAct(this.selectedPCode)
                  this.selectedSubProj = linkTarget;
                  
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
  

          }

      }

  },
  btnAct: function(selectedPCode){

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLAct) {

          if(objLAct[i].PCode.includes(selectedPCode) && objLAct[i].Status!="Inactive"){

              let eventBtnContainer = document.createElement("li");

              let eventBtnText = objLAct[i].ActDesc

              let linkTarget = i
              
              eventBtnText = document.createTextNode(eventBtnText)
          
              let eventLink = document.createElement("a")
          
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.addEvent(linkTarget, this.selectedSubProj)
                                      
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
  

          }

      }

  },
  addEvent: function(act, subproj) {

      this.clearDiv()

      const updateIndicator = document.getElementById("pu").value

      const postsIndicator = document.getElementById("selPost").value 

      //sets the time of the event being entered (determines if event occurs in the past )
      setETime();
          

      if(updateIndicator!="U"){

          const startTime = sqTime(datetimeValue)

          objLEvents[startTime] = {
              "startTime": millisecTime, 
              "act": act, 
              "subProj": subproj
          }
      
          LEvents.push([sqTime(datetimeValue), act, subproj, objLAct[act].ActDesc]);

          if(postsIndicator==="Y"){
              
              //JQPost(act, subproj, sqTime(datetimeValue));

          }
              
          resetAll();

      } else {

          //important to remember that ANY event being updated HAS to be a "Past Event"
   
          LEvents[eid]=([sqTime(datetimeValue), act, subproj, objLAct[act].ActDesc]);

          objLEvents[LEvents[eid][0]] = {"startTime": millisecTime, "act": act, "subProj": subproj}

          if(postsIndicator==="Y"){

              //jqUpdateEvent(origTime, sqTime(datetimeValue), act, subproj);

          }
          
          resetAll();

      }

      $("#pmEvent").empty();

      $("#pu").text("");

      $("#pu").val("");

      resetAll();

      this.clearDiv()

  }
          
}
        </script>

        <script>
                //Time Scripts

                function TimeArr(){
	
	var MTime = new Date();
	
	MTime = MTime.getTime();
	
	var vTZ = $( "#selTZ" ).val();
	
	var AM = parseInt(vTZ)*60*60*1000;
	
	MTime = MTime+AM;
	
	var m =  new Date(MTime);
	
	var millisecs = m.getTime();
	
	var Y = m.getFullYear();
	
	var M = m.getMonth()+1;
	
	var D = m.getDate();
	
	var H = m.getHours();
	
	var Mn = m.getMinutes();
	
	var Sec = m.getSeconds();
	
	M = zerofix(M);
	
	Mn = zerofix(Mn);

	if(H<0){
	
		H=24+H;
	
		D=(D-1);
	
	}
	
	H = zerofix(H);
	
	if(H>=24){
	
		H=(H-24);

		D=(D+1);
		
	}
	
	if(H<12){
	
		var AP = "AM";
		
	}else{
	
		AP = "PM";
		
	}
	
	if(H==0){
	
		var hr = 12;
		
	}else if(H<13){
	
		hr = H;
		
	}else{
	
		hr = H-12;
		
	}
	
	D = zerofix(D);
	
	Sec = zerofix(Sec);
	
	let timeValue= Y+'-'+M +'-'+ D +'T'+ H +':'+ Mn + ':' + Sec;
	
	let visibleTime = M +'-'+ D +' '+ hr +':'+ Mn + ':' + Sec + ' ' + AP;
	
	let arrTime = [timeValue, millisecs, visibleTime];

	return arrTime;
}

function resetTime(){

	//selP shows if the event occurs in the past or not

	const P = $("#selP").val();
				
	if(P!="Y"){
		
		//if the event does not occur in the past, then setTime is called, which sets everything back to default values as shown below.

		setTime();
				
	}
}

function setTime(){
	
	var T = TimeArr();
	
	$( "#selP" ) . val("N");
	
	$( "#DateTime" ) . val(T[0]);
	
	$( "#DateTime" ) . text(T[2]);
	
	$("body").css("background-color", defaultBGColor);
}



function FixTime(CTime){

	var Y = CTime.substring(0,4);
	var M = CTime.substring(5,7);
	var D = CTime.substring(8,10);
	var H = CTime.substring(11,13);
	var Mn = CTime.substring(14,16);
	let S = CTime.substring(17);
	
	var m = new Date(Y,M-1,D,H,Mn,S);
	
	//M = zerofix(M);
	
	var D = m.getDate();
	
	D = zerofix(D);
	
	var H = m.getHours();

	H = zerofix(H);
	
	var Mn = m.getMinutes();
	
	Mn = zerofix(Mn);

	if(H<12){
	
		var AP = "AM";
		
	}else{
	
		AP = "PM";
		
	}
	
	if(H===0){
	
		var hr = 12;
		
	}else if(H<13){
	
		hr = H;
		
	}else{
	
		hr = H-12;
		
	}
	
	var millisecs = m.getTime();

	var timeValue = Y+'-'+M +'-'+ D +'T'+ H +':'+ Mn + ':' + S;
	
	var visibleTime = M +'-'+ D +' '+ hr +':'+ Mn + ':' + S + ' ' + AP;
	
	var SvrTime = Y+'-'+M +'-'+ D +' '+ H +':'+ Mn + ':' + S;
	
	let dispDate = M+'-'+D;
	
	let dispTime = hr +':'+ Mn + ':' + S + ' ' + AP;

	var arrTime = [timeValue, millisecs, visibleTime, SvrTime, dispDate, dispTime];

	return arrTime;

}



function AddTime(min){
	$( "#selP" ) . val("Y");
	
	$("body").css("background-color", "DarkRed");

	var CTime = $( "#DateTime" ) . val();
	
	var Y = CTime.substring(0,4);
	var M = CTime.substring(5,7);
	var D = CTime.substring(8,10);
	var H = CTime.substring(11,13);
	var Mn = CTime.substring(14,16);
	var S = CTime.substring(17,19)
	
	var m = new Date(Y,M-1,D,H,Mn,S);
	
	var OM = m.getMinutes();
	
	var NM = OM + min;
	
	m.setMinutes(NM);
	
	var Y = m.getFullYear();
	var M = m.getMonth();
	
	M++;
	
	if(M===0){
		
		M=12;
		Y=(Y-1);
		
	}
	
	M = zerofix(M);
	
	var D = m.getDate();
	
	D = zerofix(D);
	
	var H = m.getHours();

	H = zerofix(H);
	
	var Mn = m.getMinutes();
	
	Mn = zerofix(Mn);

	if(H<12){
	
		var AP = "AM";
		
	}else{
	
		AP = "PM";
		
	}
	
	if(H===0){
	
		var hr = 12;
		
	}else if(H<13){
	
		hr = H;
		
	}else{
	
		hr = H-12;
		
	}
	
	var millisecs = m.getTime();

	var timeValue = Y+'-'+M +'-'+ D +'T'+ H +':'+ Mn + ':' + S;
	
	var visibleTime = M +'-'+ D +' '+ hr +':'+ Mn + ':' + S + ' ' + AP;
	
	$( "#selFT" ) . val(millisecs);
	$( "#DateTime" ) . val(timeValue);
	$( "#DateTime" ) . text(visibleTime);	
}

//etmv is a time value formatted as YYYY-MM-DDTHH:MM:SS.  This functions removes the T and makes it SQL readable.
function sqTime(etmv){

	var p1 = etmv.substr(0,10);
			
	var p2 = etmv.substr(11);
			
	var etmv1 = (p1 + " " + p2);

	return etmv1;
}

//adds a zero to the beginning of a number. needed for seconds and mins in all time functions
function zerofix(timeval){

	if(timeval<10){

		ntimeval = "0"+timeval;
	
	}else{
	
	ntimeval = timeval;
	
	}
	
	return ntimeval;
}

function setETime(){

	var T = TimeArr();
	
	var PE = $( "#selP" ) . val();
	
	if(PE=="Y"){
	
		datetimeValue = $( "#DateTime" ) . val();
		datetimeText = $( "#DateTime" ) . text();
		millisecTime = $( "#selFT" ) . val();
		
	}else{
	
		datetimeValue = T[0];
		millisecTime = T[1];
		datetimeText = T[2];
	}
}

function formatEventDuration(eventLength){
					
	eventLengthHours = eventLength/(1000*60*60);
	
	eventLengthHoursRounded = Math.floor(eventLengthHours);
	
	eventLengthMins = (eventLengthHours-eventLengthHoursRounded)*60;
	
	eventLengthMinsRounded = Math.floor(eventLengthMins);
	
	eventLengthMinsRounded = zerofix(eventLengthMinsRounded);
	
	eventLengthSecsRounded = Math.floor((eventLengthMins-eventLengthMinsRounded)*60);
	
	eventLengthSecsRounded = zerofix(eventLengthSecsRounded);
	
	eventDuration = eventLengthHoursRounded + ":" + eventLengthMinsRounded + ":" + eventLengthSecsRounded;

	return eventDuration;
	
}

        </script>
		<script>
            //Modify Forms
            const modifyForms = {

cancelBtn: function(){
    const cancelBtn = document.createElement("input");
    cancelBtn.type = "button";
    cancelBtn.value = "Exit";
    cancelBtn.onclick = () => {
        modifyForms.clearDiv()
        document.getElementById("modifyFormResult").classList.add('hidden');
    };

    return cancelBtn
},
clearDiv: function () {

    const listDiv = document.getElementById("modifyFormContainer")

    while(listDiv.firstChild){

        listDiv.removeChild(listDiv.firstChild)

    }

},
createCell: function(cellText){
    td = document.createElement("td")
    td. appendChild(document. createTextNode(cellText))
    
    return td
},
addUpdateButtons: function(tbl, modForm){
    
    let rows = tbl.rows

    for (let i = 0; i < rows.length; i++) {
        let row = rows[i]
        let curr = rows[i].cells[0].innerHTML
        let cell = row.insertCell(-1)
        
        a = document.createElement("a")
        a.href="#"
        a.addEventListener('click', () => { 
            switch(modForm) {

                case "act":
                    modifyForms.displayModifyActForm(curr)
                    break
                case "proj":
                    modifyForms.displayModifyProjForm(curr)
                    break
                case "sub-proj":
                    modifyForms.displayModifySubProjForm(curr)
                    break
                case "pu":
                    modifyForms.displayModifyPUForm(curr)	
                    break
            }
        });
        a.appendChild(document.createTextNode("U"))
        cell.appendChild(a)
    }
},
addColorBox: function(tbl){
    
    let rows = tbl.rows

    for (let i = 0; i < rows.length; i++) {
        let row = rows[i]
        let clr = rows[i].cells[3].innerHTML
        let cell = row.insertCell(-1)
        cell.style.backgroundColor = clr
        cell.classList.add("clrBox")
    }
},
displayList: function(obj){

    const tbl = document.createElement("table")
    tbl.id = "tblModForm"
    const thead = document.createElement("thead")
    
    const heads = Object.keys((obj[Object.keys(obj)[1]]))

    heads.forEach(element => {
        let th = document.createElement("th")

        th.appendChild(document.createTextNode(element))
        thead.appendChild(th)
    });

    tbl.appendChild(thead)
    
    const tbody = document.createElement("tbody")

    for (i in obj){

        let tr = document.createElement("tr")

        heads.forEach(h => {

            let inp = obj[i][h]

            let td = modifyForms.createCell(inp)	

            tr.appendChild(td)

        })
                    
        tbody.appendChild(tr)
    
    }

    tbl.appendChild(tbody)

    return tbl

},
displayActForm: function(){

    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLAct)

    modifyForms.addUpdateButtons(tbl, "act")

    sd = document.createElement("div")
    
    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newActBtn = document.createElement("input");
        newActBtn.id = "add";
        newActBtn.type = "button";
        newActBtn.value = "Add New";
        newActBtn.onclick = () => {
            
            modifyForms.displayNewActForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newActBtn)
        
    d.appendChild(tbl)

},
displayProjForm: function(){

    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLProj)

    modifyForms.addUpdateButtons(tbl, "proj")

    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newProjBtn = document.createElement("input");
        newProjBtn.id = "add";
        newProjBtn.type = "button";
        newProjBtn.value = "Add New";
        newProjBtn.onclick = () => {
            
            modifyForms.displayNewProjForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newProjBtn)
        
    d.appendChild(tbl)

},
displaySubActForm: function(){
    
    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLCont)

    modifyForms.addUpdateButtons(tbl, "sub-proj")

    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newSPBtn = document.createElement("input");
        newSPBtn.id = "add";
        newSPBtn.type = "button";
        newSPBtn.value = "Add New";
        newSPBtn.onclick = () => {
            modifyForms.displayNewSubProjForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newSPBtn)
        
    d.appendChild(tbl)

},
displayPUForm: function(){

    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLPU)

    modifyForms.addColorBox(tbl)

    modifyForms.addUpdateButtons(tbl, "pu")

    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newPUBtn = document.createElement("input");
        newPUBtn.id = "add";
        newPUBtn.type = "button";
        newPUBtn.value = "Add New";
        newPUBtn.onclick = () => {
            d.remove()
            modifyForms.displayNewPUForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newPUBtn)
        
    d.appendChild(tbl)
},
displayModifyActForm: function(act) {

    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");

    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){
        
    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./update/updateAct.php";
            formElement.target = "modifyFormResult";
            formElement.id = "updateForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("Update Activity"));
            formElement.appendChild(formTitle);
            
        const inputElementActId = document.createElement("input");
            inputElementActId.name = "ActID"
            inputElementActId.id = "ActID"
            inputElementActId.classList.add("modform")
            inputElementActId.value = act
            inputElementActId.readOnly = true
                        
            formElement.appendChild(inputElementActId);
                
        const inputElementActivityName = document.createElement("input")
            inputElementActivityName.type = "text"
            inputElementActivityName.name = "ActDesc"
            inputElementActivityName.value = objLAct[act].ActDesc
            inputElementActivityName.id = "ActDesc"
            formElement.appendChild (inputElementActivityName)
                
        const inputElementUseCode = document.createElement("select");
            inputElementUseCode.name = "UCode";
            inputElementUseCode.id = "UCode";
            inputElementUseCode.options[0] = new Option("Select a Use Code", "");
                
            for(i in objLPU){
                inputElementUseCode . options [inputElementUseCode.options.length] = new Option (objLPU[i].PUCodeDesc, i);
            }
            
            inputElementUseCode.value = objLAct[act].UCode
            
            formElement.appendChild (inputElementUseCode);
        
        const inputElementProfileCode = document.createElement("input");
            inputElementProfileCode.type = "text"
            inputElementProfileCode.name = "PCode"
            inputElementProfileCode.value = objLAct[act].PCode
            inputElementProfileCode.id = "PCode"
            formElement.appendChild (inputElementProfileCode)
        
        const inputElementActivityStatus = document.createElement("input");
            inputElementActivityStatus.type = "text";
            inputElementActivityStatus.name = "Status";
            inputElementActivityStatus.value = objLAct[act].Status
            inputElementActivityStatus.id = "Status";
            formElement.appendChild ( inputElementActivityStatus );
            
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            objLAct[document.getElementById("ActID").value] = {ActID: document.getElementById("ActID").value, ActDesc: document.getElementById("ActDesc").value, PCode: document.getElementById("PCode").value, Status: document.getElementById("Status").value, UCode: document.getElementById("UCode").value }
            
        })
    

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	
},
displayNewActForm: function(){
    
    modifyForms.clearDiv()

    const actIds ={};
    
    for (a in objLAct) {
        actIds[a.substring(0, 1)] = Number(a.substring(1));
    
    }
    
    const modifyFormContainer = document.getElementById("modifyFormContainer");
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./add/addAct.php";
            formElement.target = "modifyFormResult";
            formElement.id = "actForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New Activity"));
            formElement.appendChild(formTitle);
            
        const inputElementUseCode = document.createElement("select");
            inputElementUseCode.name = "UCode";
            inputElementUseCode.placeholder = "Use Code";
            inputElementUseCode.id = "UCode";
            inputElementUseCode.options[0] = new Option("Select a Use Code", "");
                
        for(i in objLPU){
            inputElementUseCode.options[inputElementUseCode.options.length] = new Option(objLPU[i].PUCodeDesc, i);
        }

        inputElementUseCode.addEventListener('change', () => { 
            
            let lastNum;
            
            const pcode = inputElementUseCode.value;
            
            if(actIds[inputElementUseCode.value]){
            
                lastNum = (actIds[inputElementUseCode.value]);
            
            } else { 
            
                lastNum = 0;
            
            }
            
            let nextNum = lastNum+1;
            
            if( nextNum < 10  ) {
            
                nextNum = "0"+nextNum;
            
            } else {
            
                nextNum = String(nextNum);
            
            }
            
            nextNum = pcode+nextNum;
            
            const actIdInput  = document.getElementById("ActID");
            
            actIdInput.value=nextNum;
            
        });
        
        formElement. appendChild(inputElementUseCode);
                
        const inputElementActId = document.createElement("input");
            inputElementActId.type = "text";
            inputElementActId.name = "ActID";
            inputElementActId.id = "ActID";
            inputElementActId.placeholder = "ActID";
            formElement.appendChild(inputElementActId);
        
        const inputElementActivityName = document.createElement("input");
        
            inputElementActivityName.type = "text";
            inputElementActivityName.name = "ActDesc";
            inputElementActivityName.placeholder = "Activity Name";
            inputElementActivityName.id = "ActDesc";
            formElement.appendChild(inputElementActivityName);
        
        const fieldsetElement = document.createElement("fieldset");
        
        const legendElement = document.createElement("legend");
            legendElement.appendChild(document.createTextNode("Profile Codes"));
            fieldsetElement.appendChild(legendElement);

        for(i in objLPU){
            let checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.id = "PCode-"+i;
                checkbox.name = "PCode[]";
                checkbox.value = i;
            let label = document.createElement("label");
                label.htmlFor = i;
                label.appendChild(document.createTextNode(objLPU[i].PUCodeDesc));
            
            label.appendChild(checkbox);
            fieldsetElement.appendChild(label);
        }
        
        formElement.appendChild(fieldsetElement);
                    
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
            formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            let cntCheckedBoxes = document.querySelectorAll('input[name="PCode[]"]:checked').length

            let varCode = "";

            for (i=0; i<cntCheckedBoxes; i++) {

                varCode += document.querySelectorAll('input[name="PCode[]"]:checked')[i].value;

            }

            objLAct[document.getElementById("ActID").value] = {ActID: document.getElementById("ActID").value, ActDesc: document.getElementById("ActDesc").value, PCode: varCode, Status: "Active", UCode: document.getElementById("UCode").value }
            //formElement.reset()

        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	
},
displayModifyProjForm: function(proj){
    
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./update/updateProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "projForm";
            
        const formTitle = document.createElement("h2")
            formTitle.appendChild(document.createTextNode("Update Project"))
            formElement.appendChild(formTitle)

        const inputElementProjId = document.createElement("input")
            inputElementProjId.type = "text"	
            inputElementProjId.name = "ProjID"
            inputElementProjId.id = "ProjID"
            inputElementProjId.value = objLProj[proj].ProjID
            inputElementProjId.readOnly = true
            
        formElement.appendChild(inputElementProjId);
        
        const inputElementProjName = document.createElement("input");
            inputElementProjName.type = "text";
            inputElementProjName.name = "ProjDesc";
            inputElementProjName.value = objLProj[proj].ProjDesc
            inputElementProjName.id = "ProjDesc";
            formElement.appendChild(inputElementProjName);


        const inputElementProjStatus = document.createElement("input");
            inputElementProjStatus.type = "text";
            inputElementProjStatus.name = "ProjStatus";
            inputElementProjStatus.value = objLProj[proj].ProjStatus
            inputElementProjStatus.id = "ProjStatus";
            formElement.appendChild(inputElementProjStatus);
            
        const inputElementProfileCode = document.createElement("select");
            inputElementProfileCode.name = "PCode";
            inputElementProfileCode.placeholder = "Profile Code";
            inputElementProfileCode.id = "PCode";
            inputElementProfileCode.options[0] = new Option("Select a Profile Code", "");
                
            for(i in objLPU){
                inputElementProfileCode.options[inputElementProfileCode.options.length] = new Option(objLPU[i].PUCodeDesc, i);
            }

            inputElementProfileCode.value = objLProj[proj].ProfileCode

            formElement.appendChild(inputElementProfileCode);
        
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);
            
        submitBtn.addEventListener("click", () => {

            objLProj[document.getElementById("ProjID").value] = {ProjID: document.getElementById("ProjID").value, ProjDesc: document.getElementById("ProjDesc").value, ProfileCode: document.getElementById("PCode").value, ProjStatus: document.getElementById("ProjStatus").value }

        })
    
        const cancelBtn = modifyForms.cancelBtn()
        
        formElement.appendChild(cancelBtn);
        
        modifyFormContainer.appendChild(formElement);
    }
    
},
displayNewProjForm: function(){

    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");

    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./add/addProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "projForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New Project"));
            formElement.appendChild(formTitle);

        const inputElementProjId = document.createElement("input");
            inputElementProjId.type = "text";
            inputElementProjId.name = "ProjID";
            inputElementProjId.id = "ProjID";
            inputElementProjId.placeholder = "ProjID";
        formElement.appendChild(inputElementProjId);
        
        const inputElementProjName = document.createElement("input");
            inputElementProjName.type = "text";
            inputElementProjName.name = "ProjDesc";
            inputElementProjName.placeholder = "Project Name";
            inputElementProjName.id = "ProjDesc";
        formElement.appendChild(inputElementProjName);
            
        const inputElementProfileCode = document.createElement("select");
            inputElementProfileCode.name = "PCode";
            inputElementProfileCode.placeholder = "Profile Code";
            inputElementProfileCode.id = "PCode";
            inputElementProfileCode.options[0] = new Option("Select a Profile Code", "");
                
            for(i in objLPU){
                
                inputElementProfileCode.options[inputElementProfileCode.options.length] = new Option(objLPU[i].PUCodeDesc, i);
            }
            
        formElement.appendChild(inputElementProfileCode);
        
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);
        
        submitBtn.addEventListener("click", () => {

            objLProj[document.getElementById("ProjID").value] = {ProjID: document.getElementById("ProjID").value, ProjDesc: document.getElementById("ProjDesc").value, ProfileCode: document.getElementById("PCode").value, ProjStatus: "Active" }
            
            formElement.reset()
        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }
    
},
displayModifySubProjForm: function(sp){

    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./update/updateSubProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "newSubProjForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("Update Sub Project"));
            formElement.appendChild(formTitle);

        const inputElementSubProjId = document.createElement("input")
            inputElementSubProjId.type = "text"
            inputElementSubProjId.name = "ContID"
            inputElementSubProjId.id = "ContID"
            inputElementSubProjId.value = objLCont[sp].ContID
            inputElementSubProjId.readOnly = true
        
        formElement.appendChild(inputElementSubProjId)
        
            const inputElementProjId = document.createElement("input")
            inputElementProjId.type = "text"
            inputElementProjId.name = "ProjID"
            inputElementProjId.id = "ProjID"
            inputElementProjId.value = objLCont[sp].ProjID
            inputElementProjId.readOnly = true
        
        formElement.appendChild(inputElementProjId)

        const inputElementSubProjName = document.createElement("input");
            inputElementSubProjName.type = "text";
            inputElementSubProjName.name = "ContDesc";
            inputElementSubProjName.value = objLCont[sp].ContDesc
            inputElementSubProjName.id = "ContDesc";
        formElement.appendChild(inputElementSubProjName);
            
        const inputElementActive = document.createElement("input");
            inputElementActive.type = "text";
            inputElementActive.name = "Active";
            inputElementActive.value = objLCont[sp].Active
            inputElementActive.id = "Active";
        formElement.appendChild(inputElementActive);

        const submitBtn = document.createElement("input");
            submitBtn.id = "btnSubmit";
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            objLCont[document.getElementById("ContID").value] = {ContID: document.getElementById("ContID"), ContDesc: document.getElementById("ContDesc").value, ProjID: document.getElementById("ProjID").value, Active: "Active" }

        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	
    
},
displayNewSubProjForm: function(){
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./add/addSubProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "newSubProjForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New Sub Project"));
            formElement.appendChild(formTitle);

        const inputElementProjId = document.createElement("select");
            inputElementProjId.name = "ProjID";
            inputElementProjId.id = "ProjID";
            inputElementProjId.options[0] = new Option("Select a Project", "");
                
            for(i in objLProj){
                if(objLProj[i].ProjStatus!="Closed"){
                    inputElementProjId.options[inputElementProjId.options.length] = new Option(objLProj[i].ProjDesc, i);
                }
            }
            
            formElement.appendChild(inputElementProjId);

        const inputElementSubProjId = document.createElement("input");
            inputElementSubProjId.type = "text";
            inputElementSubProjId.name = "ContID";
            inputElementSubProjId.id = "ContID";
            inputElementSubProjId.placeholder = "Sub-Proj ID";
            formElement.appendChild(inputElementSubProjId);
        
        const inputElementSubProjName = document.createElement("input");
            inputElementSubProjName.type = "text";
            inputElementSubProjName.name = "ContDesc";
            inputElementSubProjName.placeholder = "Sub Project Name";
            inputElementSubProjName.id = "ContDesc";
            formElement.appendChild(inputElementSubProjName);
                    
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
            formElement.appendChild(submitBtn);

        
        submitBtn.addEventListener("click", () => {

            objLCont[document.getElementById("ContID").value] = {ContID: document.getElementById("ContID"), ContDesc: document.getElementById("ContDesc").value, ProjID: document.getElementById("ProjID").value, Active: "Active" }

            formElement.reset()

        })
    
        

        const cancelBtn = modifyForms.cancelBtn()
        
        formElement.appendChild(cancelBtn);
                
        modifyFormContainer.appendChild(formElement);
    }	

},
displayModifyPUForm: function(pu){
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./update/updatePU.php";
            formElement.target = "modifyFormResult";
            formElement.id = "modifyPUForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("Update PU Code"));
            formElement.appendChild(formTitle);

        const inputElementPUCode = document.createElement("input");
            inputElementPUCode.type = "text"
            inputElementPUCode.name = "PUCode";
            inputElementPUCode.id = "PUCode";
            inputElementPUCode.classList.add("modform")
            inputElementPUCode.value = objLPU[pu].PUCode
            inputElementPUCode.readOnly = true


        formElement.appendChild(inputElementPUCode);
        
        const inputElementPUCodeDesc = document.createElement("input");
            inputElementPUCodeDesc.type = "text";
            inputElementPUCodeDesc.name = "PUCodeDesc";
            inputElementPUCodeDesc.id = "PUCodeDesc";
            inputElementPUCodeDesc.value = objLPU[pu].PUCodeDesc
        
        formElement.appendChild(inputElementPUCodeDesc);

        const inputElementColor = document.createElement("input");
            inputElementColor.type = "color";
            inputElementColor.name = "Color";
            inputElementColor.value = objLPU[pu].Color
            inputElementColor.id = "Color";
        formElement.appendChild(inputElementColor);

        const inputElementActive = document.createElement("select");
            inputElementActive.name = "Active";
            inputElementActive.value = objLPU[pu].Active
            inputElementActive.id = "Active";
            inputElementActive.options[0] = new Option("Y");
            inputElementActive.options[1] = new Option("N");

        formElement.appendChild(inputElementActive);
            
        const submitBtn = document.createElement("input");
            submitBtn.id = "btnSubmit";
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            objLCont[document.getElementById("PUCode").value] = {PUCode: document.getElementById("PUCode"), PUCodeDesc: document.getElementById("PUCodeDesc").value, Color: document.getElementById("Color").value }

            formElement.reset()

        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	

},
displayNewPUForm: function(){
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            //formElement.action = "./add/addPU.php";
            formElement.target = "modifyFormResult";
            formElement.id = "addPUForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New PU Code"));
            formElement.appendChild(formTitle);

        const inputElementPUCode = document.createElement("input");
            inputElementPUCode.type = "text";
            inputElementPUCode.name = "PUCode";
            inputElementPUCode.id = "PUCode";
            inputElementPUCode.placeholder = "PU Code";
        formElement.appendChild(inputElementPUCode);
        
        const inputElementPUCodeDesc = document.createElement("input");
            inputElementPUCodeDesc.type = "text";
            inputElementPUCodeDesc.name = "PUCodeDesc";
            inputElementPUCodeDesc.placeholder = "PU Code Description";
            inputElementPUCodeDesc.id = "PUCodeDesc";
        formElement.appendChild(inputElementPUCodeDesc);
            
        const inputElementColor = document.createElement("input");
            inputElementColor.type = "text";
            inputElementColor.name = "Color";
            inputElementColor.placeholder = "Color";
            inputElementColor.id = "Color";
            formElement.appendChild(inputElementColor);
        
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
            formElement.appendChild(submitBtn);

            const cancelBtn = modifyForms.cancelBtn()

            formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }
}
}
        </script>
		<script>
            //modifyMenu

            const addMenuItem = (menu, menuItem, clickHandler = () =>void(0)) => {

const linkMenuContainer = document.createElement("li");

const linkMenu = document.createElement("a");
linkMenu.href = "#";
linkMenu.addEventListener('click', () => { 

    menu.remove();
    clickHandler();
    
});

linkMenu.appendChild(document.createTextNode(menuItem));
            
linkMenuContainer.appendChild(linkMenu);

menu.appendChild(linkMenuContainer);

}

const displayModifyMenu = () => {

const modifyFormContainer = document.getElementById("modifyFormContainer");
    
if(document.getElementById("modifyFormContainer").innerHTML!=""){

} else {

    const menuContainer = document.createElement("ul");

    menuContainer.classList.add("modmenu");
    
    //Activities
    
    addMenuItem(menuContainer, "Activities", modifyForms.displayActForm);
    
    //Projects

    addMenuItem(menuContainer, "Projects", modifyForms.displayProjForm);
    
    //Sub-Projects(Cont IDs)

    addMenuItem(menuContainer, "Sub-Projects", modifyForms.displaySubActForm);
    
    addMenuItem(menuContainer, "PU Codes", modifyForms.displayPUForm);

    //exit menu

    addMenuItem(menuContainer, "Exit");
    
    modifyFormContainer.appendChild(menuContainer);
}
}
        </script>
		<script>
            //Display Events
            function displayLEvents(){

resetSVG('svgEventChart')

LEvents.sort();

LEvents.reverse();

ELen = LEvents.length;

let selMinDate = $("#selMinDate").val();

var minDate = Date.now()-(selMinDate*24*60*60*1000);

let selMaxDate = $("#selMaxDate").val();

let maxDate = Date.now()-(selMaxDate*24*60*60*1000);

text = "<table class='eventList' width=100%>"

text += "<thead>";

text += "<th colspan=3></th><th>Date</th><th>Time</th><th>Act</th><th>Cont</th><th>Dur</th>";

text += "</thead><tbody>";

for (i = 0; i < ELen; i++) {

    if(i==0){
        
        var eventLength = Date.now()-Date.parse(LEvents[i][0]);
        
    }else{
    
        eventLength = Date.parse(LEvents[i-1][0])-Date.parse(LEvents[i][0]);

    }
    
    formatEventDuration(eventLength);
    
    if(i>0){
    
        var boxStart = svgboxstartxcoord(Date.parse(LEvents[i-1][0]));
        
        
    }else{
    
        var boxStart = svgboxstartxcoord(Date.parse(LEvents[i][0]));

    }
    
    var boxId = "svgEventChart";
    var boxStartX = svgboxstartxcoord(Date.parse(LEvents[i][0]));
    var boxWidth = (eventLength / (24*60*60*1000))*svgWidthNum;
    var boxFill = findActivityColor(LEvents[i][1]);

    if(boxStartX<0){
    
        if(boxStartX>0){
        
            drawbox(boxId, 0, boxStart, boxFill);
        
        }
    
    }
    
    if(boxWidth>0){
    
        drawbox(boxId, boxStartX, boxWidth, boxFill);

    }

    //end eventDuration calc
    
    let arr_disp_time = FixTime(LEvents[i][0]);
    
    if(Date.parse(LEvents[i][0]) > minDate && Date.parse(LEvents[i][0]) <= maxDate){
    
    text += "<tr><td>" +
    
    "<input type=button  value=+ class=slnk onclick='JQPost(`"+ LEvents[i][1] + "`,`" + LEvents[i][2] + "`,`" + LEvents[i][0] + "`,`" + i+"`)'/>" + 
    
    "</td><td>" 
    
    + 
    
    "<input type=button value=- class=slnk onclick='delEvent("+ i +")' />" 
    
    + 
    
    "</td><td>" 
    
    + 
    
    "<input type=button class=slnk value=U onclick='UpdateEvent(`"+ i + "`)' />"
    
    +
    
    "</td><td>" 
    
    + 
    
        arr_disp_time[4] + 
    "</td><td>" + 
        arr_disp_time[5] + 
    "</td><td>" + 
        LEvents[i][3] +
    "</td><td>" + 
        LEvents[i][2] + 
    "</td><td>" + 
        eventDuration + 
    "</td></tr>";

    }

}
text += "</tbody>";
text += "</table>";

document.getElementById("eventListContainer").innerHTML = text;

svgtext('svgEventChart');
displayActDurs();

}
        </script>
		<script>
            //local event buttons
            function localEventButton(act, cont, btnName, list, warn){
				
                //let arrElapsedTime = findLast(act, cont);
                
                //let elapsedTime = arrElapsedTime[0];
            
                //let warnTime = arrElapsedTime[1];
                
                var bc = $( "button" ).length;
                
                var btnid = "btn"+bc;
                
                let btn = document.createElement("button");
            
                btn.id = btnid;
            
                btn.setAttribute('data-act', act);
                
                btn.setAttribute('data-cont', cont);
                
                //btn.setAttribute('data-warn', warn);
            
                btn.classList.add("ebtn");
                
                let buttonNameTextNode = document.createTextNode(btnName);
                
                //let elapsedTimeTextNode = document.createTextNode(elapsedTime);
                
                btn.appendChild(buttonNameTextNode);
            
                //btn.appendChild(document.createElement("br"));
                
                //btn.appendChild(elapsedTimeTextNode);
                
                let li = document.createElement("li");
            
                li.appendChild(btn);
                
                let selectedList = document.getElementById(list);
            
                selectedList.appendChild(li);
               
                /*
                if (warn!="n"){
            
                    if(warn < warnTime){
            
                        $("#"+btnid).addClass('warn');
                    
                    }
                }
                */

                document.getElementById(btnid). addEventListener("click", function(){
                
                    btnJQL(act, cont, btnName);
            
                    resetbtn();
            
                });
            }
            
            
            function resetbtn(){
                        
                let buttons = document.getElementsByTagName('button');
            
                if(buttons){
            
                    for (i = 0; i < buttons.length; i++) {
            
                        let bact = buttons[i].getAttribute('data-act');
                    
                        let bcont = buttons[i].getAttribute('data-cont');
            
                        //let bwarn = buttons[i].getAttribute('data-warn');
            
                        //let arrelpTime = findLast(bact, bcont);
            
                        //let elpTime = arrelpTime[0];
                        
                        //let wTime = arrelpTime[1];
                        
                        //let newnode = document.createTextNode(elpTime);
                        
                        //buttons[i].replaceChild(newnode, buttons[i].childNodes[2]);
                        
                        /*  
                        if (bwarn!="n"){
            
                            if(bwarn < wTime){
                                
                                $("#"+buttons[i].id).addClass('warn');
                    
                            } else {
            
                                $("#"+buttons[i].id).removeClass('warn');
                            
                            }
                        
                        }
                        */
            
                    }
            
                }
            }
            
            function btnJQL(act, cont){
                                
                var U = $("#pu").val();
                
                var selPost = $("#selPost").val();
                
                setETime();
                
                if(U!="U"){
                    
                    const startTime = sqTime(datetimeValue)
            
                    objLEvents[startTime] = {
                        "startTime": millisecTime, 
                        "act": act, 
                        "subProj": cont
                    }
                
                    LEvents.push([sqTime(datetimeValue), act, cont, objLAct[act].ActDesc]);
            
                    if(selPost==="Y"){
                    
                        //JQPost(act, cont, sqTime(datetimeValue));
                        
                    }
                    
                }else{
                
                    LEvents[eid]=([sqTime(datetimeValue), act, cont, objLAct[act].ActDesc]);
            
                objLEvents[LEvents[eid][0]] = { "startTime": millisecTime, "act": act, "subProj": cont }
                    
                    if(selPost==="Y"){
                    
                        //jqUpdateEvent(origTime, sqTime(datetimeValue), act, cont);
                        
                    }
                    
                    $("#pmEvent").empty();
                    
                    $("#pu").text("");
                    
                    $("#pu").val("");
                
                }
                
                resetAll();
                
            }
            
            /*
            function JQPost(act, cont, dtime){
            
                $.post("./add/AddJQ.php",
                {
                    v1: act,
                    v2: cont,
                    v3: dtime,
                    SD: 'L',
                    selTbl: 'tblEvents'
                });
                
                resetAll();
            }
            */
        </script>
		<script>
            //svg charts
            const objSVGEventChart = {

chartDiv: 0,
svgHeight: 50,
textColor: "white",
fontWeight: "bold",
displayTimes: [12, 3, 6, 9, 12, 3, 6, 9],
drawBox: function(id, x, w, f){

    var element = document.getElementById(id);

    var svg = document.createElementNS("http://www.w3.org/2000/svg", "rect");

    svg.setAttribute('x', x);
    svg.setAttribute('y', 0);
    svg.setAttribute('width', w);
    svg.setAttribute('height', this.svgHeight);
    svg.setAttribute('fill', f);
        
    svg.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
        
    element.appendChild(svg);


},
addText: function(id){

    const element = document.getElementById(id);

    const svgTextElement = document.createElementNS("http://www.w3.org/2000/svg", "text");

    svgTextElement.setAttribute('x', 0);
    svgTextElement.setAttribute('y', 27.5);
    svgTextElement.setAttribute('fill', 'white');
    svgTextElement.setAttribute('font-weight', 'bold');
    svgTextElement.setAttribute('font-size', 10);

    let textNode = document.createTextNode("12A");

    svgTextElement.appendChild(textNode);

    this.displayTimes.forEach(t => {

        let xCoord = t*120;

        const tspanElement = document.createElementNS("http://www.w3.org/2000/svg", "tspan");

        tspanElement.setAttribute('x', xCoord);
        tspanElement.setAttribute('y', 27.5);

        textNode = document.createTextNode(t);
        tspanElement.appendChild(textNode);
        svgTextElement.appendChild(ts);


    });
    
    svgTextElement.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");

    element.appendChild(svgTextElement);


},
getStartXCoord: function(startTime){

    let minTime = new Date();
    minTime.setHours(0, 0, 0, 0);
    
    var svgboxstartxcoord = ((startTime-minTime)/(24*60*60*1000))*svgWidthNum;
    
    return svgboxstartxcoord;
},
showChart: function(){

    if(i>0){
            
        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i-1][0]));
    
    }else{

        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i][0]));
    
    }

    //var boxId = "svgMoodChart";
    var boxStartX = svgboxstartxcoord(Date.parse(LMoods[i][0]));
    var boxWidth = (eventLength / (24*60*60*1000))*svgWidthNum;
    var boxFill = moodColor(LMoods[i][1]);
    
    if(boxStartX<0){
    
        if(boxStart>0){
        
            drawbox(boxId, 0, boxStart, boxFill);
        
        }
    
    }

    if(boxWidth>0){
    
        drawbox(Chartid, boxStartX, boxWidth, boxFill);

    }
}

}

//determines the color of each box on the event chart
//**CAN BE REPLACED BY objLPU[objAct[ActID].UCode].Color**
function findActivityColor(ActID){

var arrAct = LActsAll[0];

var ans = $.inArray(ActID, arrAct);

var PU = LActsAll[3][ans];

var arrLPU = LPU[0];

var an2 = $.inArray(PU, arrLPU);

var clr = LPU[2][an2];

return clr;
}

//sets the colors for the boxes in the mood chart

function moodColor(mood){

switch(Number(mood)){

    case -1:
        clr = "red";
        break;
    case -0.5:
        clr = "yellow";
        break;
    case 0:
        clr = "gray";
        break;
    case 0.5:
        clr = "yellowgreen";
        break;
    case 1:
        clr = "green";
        break;
}

return clr;
}

//determines the starting x coord of each colored box in the svg charts

function svgboxstartxcoord(time){

let minTime = new Date();
minTime.setHours(0, 0, 0, 0);

var svgboxstartxcoord = ((time-minTime)/(24*60*60*1000))*svgWidthNum;

return svgboxstartxcoord;
}

//Draws colored boxes in svg charts

function drawbox(id, x, w, f){

var element = document.getElementById(id);

var svg = document.createElementNS("http://www.w3.org/2000/svg", "rect");

svg.setAttribute('x', x);
svg.setAttribute('y', 0);
svg.setAttribute('width', w);
svg.setAttribute('height', 50);
svg.setAttribute('fill', f);
    
svg.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
    
element.appendChild(svg);
}

//Adds times to foreground of svg charts

function svgtext(id){

var element = document.getElementById(id);

var svg = document.createElementNS("http://www.w3.org/2000/svg", "text");

svg.setAttribute('x', 0);
svg.setAttribute('y', 20);
svg.setAttribute('fill', 'white');
svg.setAttribute('font-weight', 'bold');
svg.setAttribute('font-size', 10);

let spacing = svgWidthNum / 24

arrTimes = [12, "|", "|", 3, "|", "|", 6, "|", "|", 9, "|", "|", 12, "|", "|", 3, "|", "|", 6, "|", "|", 9, "|", "|", 12]



for (c = 0; c < arrTimes.length; c++){

    var xv = c*spacing;

    var ts = document.createElementNS("http://www.w3.org/2000/svg", "tspan");

    ts.setAttribute('x', xv);
    ts.setAttribute('y', 20);

    var txt = document.createTextNode(arrTimes[c]);
    ts.appendChild(txt);
    svg.appendChild(ts);

}

svg.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");

element.appendChild(svg);
}

function resetSVG(id){

id = "#"+id;

$(id).empty();
}



function displaySVGChart(){

if(i>0){
    
    var at = svgboxstartxcoord(Date.parse(LEvents[i-1][0]));
    
    
}else{

    var at = svgboxstartxcoord(Date.parse(LEvents[i][0]));

}

var ac0 = "svgEventChart";
var ac1 = svgboxstartxcoord(Date.parse(LEvents[i][0]));
var ac2 = (eventLength / (24*60*60*1000))*svgWidthNum;

var ac3 = findActivityColor(LEvents[i][1]);

if(ac1<0){

    if(at>0){
    
        drawbox(ac0, 0, at, ac3);
    
    }

}

if(ac1>0){

    drawbox(ac0, ac1, ac2, ac3);

}

}
        </script>
		<script>
            //mood
            function displayLMoods(){

resetSVG("svgMoodChart");

LMoods.sort();

LMoods.reverse();

MoodsLen = LMoods.length;

const minDate = Date.now()-86400000;

text = "<table class='eventList'>";

text += "<thead>";

    text += "<th colspan=2></th>";
    text += "<th>Date</th>";
    text += "<th>Time</th>";
    text += "<th>Mood</th>";
    text += "<th>Dur</th>";
    
text += "</thead>";

text += "</tbody>";
    
//start eventDuration calc (should be function)

for (i = 0; i < MoodsLen; i++) {

    if(i==0){
        
        var eventLength = Date.now()-Date.parse(LMoods[i][0]);
        
    }else{


        eventLength = Date.parse(LMoods[i-1][0])-Date.parse(LMoods[i][0]);
    
    }
    
    formatEventDuration(eventLength);
    
    if(i>0){
    
        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i-1][0]));
        
    }else{
    
        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i][0]));
        
    }
    
    var boxId = "svgMoodChart";
    var boxStartX = svgboxstartxcoord(Date.parse(LMoods[i][0]));
    var boxWidth = (eventLength / (24*60*60*1000))*svgWidthNum;
    var boxFill = moodColor(LMoods[i][1]);
    
    if(boxStartX<0){
    
        if(boxStart>0){
        
            drawbox(boxId, 0, boxStart, boxFill);
        
        }
    
    }

    if(boxWidth>0){
    
        drawbox(boxId, boxStartX, boxWidth, boxFill);

    }
    
    //end eventDuration calc
    
    let arr_disp_time = FixTime(LMoods[i][0]);
    
    if(Date.parse(LMoods[i][0]) > minDate){
    
        text += 
            "<tr>" +
                "<td>" +
                    "<input type=button value=+ class=slnk onclick=MPost('"+ LMoods[i][1] + "','" + LMoods[i][0] + "','" + i+"') + />" +
                "</td><td>" +
                    "<input type=button  value=- class=slnk onclick=delMood("+i+") + />" +
                "</td><td>" +
                    arr_disp_time[4] +
                "</td><td>" +
                    arr_disp_time[5] +
                "</td><td>" +
                    LMoods[i][1] +
                "</td><td>" +
                    eventDuration +
                "</td>" +
            "</tr>";
            
    }
    
}

text += "</table>";

svgtext('svgMoodChart');

document.getElementById("moodListContainer").innerHTML = text;

const a = LMoods[0][1];

$( "#moodIndicator" ).css("color", moodColor(a));

}


function btnLMood(a){

var selPost = $("#selPost").val();

setETime();

LMoods.push([sqTime(datetimeValue), String(a)]);

$( "#moodIndicator" ).css("color", moodColor(a));

if(selPost==="Y"){

    MPost(a, datetimeValue);

}

resetAll();
}


/*
function MPost(mood, dtime, i){

$.post("./add/AddJQ.php",
{
    v1: dtime,
    v2: mood,
    selTbl: 'tblMood'
});

resetAll();

}
*/

function delMood(i){
            
var q = "Delete "+LMoods[i]+"?";

var c = confirm(q);

if (c == true){

    var etime = sqTime(LMoods[i][0]); 

    var a = LMoods.splice(i, 1);
    
    //JQDel(etime, 'tblMood', 'MoodDT');

    resetAll();

}
}

function resetLMoods(){

if(LMoods === undefined || LMoods.length == 0) {

    //do nothing

}else{

    localStorage.setItem("LSMoods", JSON.stringify(LMoods));

    displayLMoods();

}
}
        </script>
		<script src="https://cdn.jsdelivr.net/npm/luxon@3.3.0/build/global/luxon.min.js" integrity="sha256-Nn+JGDrq3PuTxcDfJmmI0Srj5LpfOFlKqEiPwQK7y40=" crossorigin="anonymous"></script>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1" />
	</head>
	<body>
		<div id="pageWrapper">
		<header>
			<h1>Events</h1>
			<sub>v_2023-02-27</sub>
		</header>
		<div id="topbar">
			<ul class="controlGrid" id="formControls">
				<li>
					<a href="#" onclick="clearForm()">Reset</a>
				</li>	
				<li id="lblEventTime">
					<p id="DateTime"></p>
				</li>
				<li>
					<a href="#" onclick="manualEventForm.btnLPU()">Manual</a>
				</li>
				<li>
					<a href="#" onclick="PriorEvent()">Prior</a>
				</li>
				<li>
					<a href="#" onclick="postAll()">Sync</a>
				</li>
				<li>
					<a href="#" onclick="displayModifyMenu()">Modify</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-1)">-1m</a> 
				</li>
				<li>
					<a href="#" onclick="AddTime(-5)">-5m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-15)">-15m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-60)">-1h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-180)">-3h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-360)">-6h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-1440)">-1d</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(1)">+1m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(5)">+5m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(15)">+15m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(60)">+1h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(180)">+3h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(360)">+6h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(1440)">+1d</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(-1)">-1</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(-0.5)">-0.5</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(0)">0</a>
				</li> 
				<li>
					<a href="#"onclick="btnLMood(0.5)">0.5</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(1)">1</a>
				</li> 
				<li><p id="moodIndicator">&#10033;</p></li>
				<li>	
					<a href="#"  onclick="$('.pageSettings').toggle()">Settings</a> </li>
				<li id="timeZoneLabel" class="pageSettings">
					<p>Time Zone</p>
				</li>
				<li  class="pageSettings">
					<p>Post?</p>
				</li>
				<li id="detailStartLabel"  class="pageSettings">
					<p>Detail Start (Days Ago)</p>
				</li>
				<li id="detailEndLabel"  class="pageSettings">
					<p>Detail End (Days Ago)</p>
				</li><li id="timeZoneSelectContainer"  class="pageSettings">
					<select id="selTZ" class="ssmselect">
						<option value=0>Eastern</option>
						<option value=1>Central</option>
						<option value=2>Mountain</option>
						<option value=3>Pacific</option>
						<option value=6>Hawaii</option>
					</select>
				</li>
				<li  class="pageSettings">
					<select id="selPost">
						<option>Y</option>
						<option>N</option>
					</select>
				</li>
				<li id="detailStartSelectContainer"  class="pageSettings">
					<select id="selMinDate" class="sTime">
						<option>2</option>
						<option>1</option>
						<option>2</option>
						<option>7</option>
						<option>14</option>
						<option>30</option>
					</select>
				</li>
				<li id="detailEndSelectContainer"  class="pageSettings">
					<select id="selMaxDate" class="sTime">
						<option>0</option>
						<option>1</option>
						<option>2</option>
						<option>7</option>
						<option>14</option>
						<option>30</option>
					</select>
				</li>
			</ul>
		</div>
		<div id="mainSection">
			<!-- displays U when an event is being updated -->
			<b><p id="pu"></p></b>
			
			<!-- shows if events are being posted to the db or not -->
			<p id="selP"></p>
			<p id="selFT"></p>
			<h2 id="pmEvent"></h2>
			
			<ul id="eventBtnListContainer" class="btnGroup"></ul>
			
			<div id="modifyFormWrapper">
				<div id="modifyFormContainer"></div>
				<iframe id="modifyFormResult" name="modifyFormResult" class="hidden" scrolling="no"></iframe>
			</div>

			<a href="#" class="groupHeading" onclick="$('#tblRoutine').toggleClass('hidden')">Routine</a>

			<ul class="btnGroup hidden" id="tblRoutine"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblccare').toggleClass('hidden')">Childcare</a>

			<ul class="btnGroup hidden" id="tblccare"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblchores').toggleClass('hidden')">Chores</a>

			<ul id="tblchores" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblfam').toggleClass('hidden')">Family</a>

			<ul id="tblfam" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblhealth').toggleClass('hidden')">Health</a>

			<ul id="tblhealth" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblfood').toggleClass('hidden')">Food & Drink</a>

			<ul id="tblfood" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblsocial').toggleClass('hidden')">Social</a>

			<ul id="tblsocial" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblwork').toggleClass('hidden')">Work</a>

			<ul id="tblwork" class="btnGroup hidden"></ul>
				
			<a href="#" class="groupHeading" onclick="$('#tbltrans').toggleClass('hidden')">Transport</a>

			<ul id="tbltrans" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblpersonal').toggleClass('hidden')">Personal</a>

			<ul id="tblpersonal" class="btnGroup hidden"></ul>

		</div>
		<div id="footer">
			<svg id="svgEventChart" height="30"></svg>

			<svg id="svgMoodChart" height="30"></svg>

			<div id="eventListContainer"></div>

			<div id="moodListContainer"></div>

			<div id="listContainer"></div>

			<p id="csel"></p>

			<p id="psel"></p>

			<p id="spsel"></p>

			<p id="asel"></p>

		</div>
		<script>
			//get background color from css
			const defaultBGColor = $( "body" ).css( "background-color" );
			const defaultBtnColor = $( "button" ).css( "color" );
			const defaultBtnBGColor = $( "button" ).css( "background-color" );
	
			const svgWidthNum = screen.width;

			const btnWidthNum = 110;

			let text, ELen, MoodsLen, i, datetimeValue, datetimeText, millisecTime, origTime, etmt, eft, eid;
			
			//set local storage variables **need to add a way to skip this if offline**
			//let lastuse = <?php echo json_encode( $arr_lastuse ) ?>;

			//Events

			//let data_events = <?php echo json_encode( $arr_events ) ?>;

			//localStorage.setItem("LSEvents", JSON.stringify(data_events));
			
			let LEvents = JSON.parse(localStorage.getItem("LSEvents"));

            if(LEvents){}else{
                let LEvents=[]
            }

			const objLEvents = {}
			
            if (LEvents){

                for(i=0; i<LEvents.length; i++) {
                    
                    objLEvents[LEvents[i][0]] = {"startTime": Date.parse(LEvents[i][0]), "act": LEvents[i][1], "subProj": LEvents[i][2]}
                
                }
            }
			
			//Moods
			
			//let data_moods = <?php echo json_encode( $arr_moods ) ?>;
			
			//localStorage.setItem("LSMoods", JSON.stringify(data_moods));

			let LMoods = JSON.parse(localStorage.getItem("LSMoods"));

            if(LMoods){}else{
                let LMoods=[]
            }

            
			
			//Activities

			//let data_acts = <?php echo json_encode( $arr_act ) ?>;
			
			//localStorage.setItem("LSActs", JSON.stringify(data_acts));
			
			let LActs = JSON.parse(localStorage.getItem("LSActs"));
			
			//let data_acts_all = <?php echo json_encode( $arr_act_all ) ?>;
			
			//localStorage.setItem("LSActsAll", JSON.stringify(data_acts_all));
			
			let LActsAll = JSON.parse(localStorage.getItem("LSActsAll"));
			
            if(LActsAll){

            } else {

                LActsAll = 
                    [
                        ["A01","A02","A03","A04","A05","A06","A07","A08","A09","A10","B01","B02","B04","B05","B06","D01","D02","D03","D04","D05","D06","I01","I02","I03","I04","I05","I06","L01","L02","L03","L04","L05","L06","L07","I09","L09","L10","L12","L13","L14","M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","N01","N02","N03","P01","P02","P04","P05","P06","P07","P08","P09","P10","P11","P12","P13","P14","P15","P16","P17","P18","P19","P20","P21","P22","P23","P24","P25","P26","P29","P30","P31","P32","P33","P34","P35","P36","P37","W47","P39","P40","P41","S01","S02","S03","S04","S05","S06","S07","S08","S09","S10","T02","T03","T04","W00","W01","W02","W04","W06","W07","W08","W09","W10","W11","W12","W15","W17","W19","W20","W21","W22","W25","W27","W29","W30","W32","W33","W35","P49","W38","W39","W40","W42","W43","W44","W46","P42","P43","S11","S12","L15","S13","D07","P44","P45","I07","I08","P46","P47","P48","N04","P50","W48","P51","M12","P52","L16","D08","D09","P53","P54","L17","P55","L18","W49","P56","P57","P61","W50","P58","P59","P65","W51","P60","S14","P63","P62","P64","W52","D10","B07","L19","L20","C01","C02","W54","C03","C04","W53","C05","P66","C06","C07","C08","C09","B08","B09","P67"],
                        ["AMP","Inbox","Expenses","Desktop Review","Training Admin","CPA License","Tech Support","Time Mgmt","Timesheet","Travel Booking","Bathroom","Eat","Lunch","Order Food","Beverage","Monthly Review","Weekly Review","Dev Plan","One-on-One","One-on-One Prep","Coaching (D)","IIA Meetings & Emails","IIA Recons","Board Materials","Slot Reporting","Post Office","Invoicing","Assimil","Brain Training","Car Repairs","Coffee Break Languages","DuoLingo","Grammar","Math","Payments","Rosetta Stone","VB Training","Python","Java","Web Dev","Risk or Control Mtg","Business Mtg","Committee Meeting","Corporate Meeting ","Interviewing","Meeting Prep","Phone: Work","Planning Mtg","Schedule Mtgs","Team Mtg","Volunteering","Untracked Time","Drive","TV","Database","Job Search","Finances","Personal: Admin","Retirement","Taxes","Taxes (S)","Brush Teeth","Car Search","Clean House","Fingernails","Cook","Dinner","Doctor/Dentist","Dog","Fantasy Football","Food Tracking","Shopping: Furniture","Dress","Shopping: Gifts","Haircut","Home/Apt Search","Internet","Investments","JO","Shower","Walk","Gym","Pack","Shave & Hair","Laundry","Dishes","Groceries","Lawn & Garden","Quality Assurance","Shopping: Home","Gas","Trash","Social","Sex","Lunch (S)","Coffee (S)","Breakfast (S)","Research (S)","Meal (S)","Travel Planning (S)","Events","Shopping (S)","Exam","Study","Training","Admin (W)","Agenda","Annual Plan","Reporting","CE Testing","Closing","Coaching","DE Docs","Email","Engagement Memo","Research: External","Issue Memo","Research","Issue Validation","Meeting Notes","Planning Memo","Planning: General","Project Economics","Business Profile Review","Process Risk Control","Doc Request","Review Notes","Risk Assessment","Sampling","Air Travel","Status Report","Process Flow","Workpaper Review","Checklists","Audit Form","Staff IPAs","Issue Report Meeting","Run","Home Repairs","Pool","Beach","News","Bar","Daily Review","Dry Cleaning","Pick-up Food","Financial Statements","Journal Entries","Wedding Planning","Shopping: Online","Clean Car","Sleep","Public Trans.","Reg Analysis","Airport","Regulator Mtg","Commute (pre-split)","Read","Job Interview Prep","Job Interview","Cryptocurrency","Fishing / Kayaking","Lectures","Convo DB","Flashcards","Announcement Letter","Hiking","Biking","Sheets & Towels","Procedures","Clean Kitchen","Vacuum","Negativity","Presentation","Floss","Games","Meditate","Decorate","Mail","Property Search","Onboarding","Bathroom 2","Crossword ","Writing","Diaper 1","Diaper 2","Policy Review","Feeding","Baby Bath","Leave Prep","Pediatrician","Home Organization","Crying","Tummy Time","Reading","Play","Bathroom 1-S","Eat (Slow)","Yoga"],
                        ["A","A","A","A","A","A","A","A","A","A","R","3","3","P","B","D","D","D","D","D","D","I","I","I","I","I","I","L","L","1","L","L","L","L","I","L","L","L","L","L","M","M","M","M","M","M","M","M","A","M","M","N","2","P","P","D","P","P","P","1","P","R","P","1","R","P","3","P","P","P","P","P","R","P","1","1","P","P","P","R","H","H","R","R","1","1","P","1","W","P","2","1","S","S","S","S","S","S","S","S","S","S","L","L","T","W","W","W","W","W","W","W","W","W","W","A","W","W","W","W","W","W","W","W","W","W","W","W","W","2","W","W","W","A","W","W","M","H","1","S","S","L","S","D","1","P","I","I","1","P","1","N","2","W","2","M","2","L","D","D","P","H","L","P","L","W","H","H","1","W","1","1","P","W","R","S","H","1","1","W","D","R","L","L","1","1","W","1","1","W","1","1","1","1","1","1","R","3","H"],
                        ["W","W","W","W","TLA","W","W","W","W","W","P","P","P","P","P","D","D","D","DS","D","D","I","I","I","I","I","I","L","L","PL","L","L","L","L","I","L","L","L","L","L","WD","W","W","W","WD","WD","W","W","WD","W","W","N","PS","LPS","P","DPW","P","P","P","P","S","P","P","P","P","P","P","P","PS","P","P","P","P","P","P","P","P","P","P","P","PS","P","P","P","P","P","PS","P","W","PS","P","P","S","S","S","S","S","S","S","S","S","S","L","L","T","W","W","W","W","W","W","W","W","WD","W","W","W","WD","W","WD","W","W","W","W","W","W","W","W","W","PS","W","W","W","W","W","W","W","P","P","S","S","L","S","D","P","P","I","I","P","P","P","N","PS","W","PS","W","W","TLP","DP","DP","P","PS","TL","P","TL","W","PS","PS","P","W","P","P","P","W","P","S","P","P","P","W","DW","P","L","L","P","P","W","P","P","W","P","P","P","P","P","P","P","P","P"],
                        ["Inactive","Active","Inactive","Active","Active","Inactive","Active","Active","Inactive","Inactive","Active","Active","Inactive","Active","Active","Active","Inactive","Active","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Active","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Active","Inactive","Active","Active","Active","Active","Inactive","Active","Active","Inactive","Inactive","Inactive","Active","Inactive","Active","Active","Active","Inactive","Active","Active","Inactive","Inactive","Inactive","Active","Inactive","Active","Inactive","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Active","Inactive","Active","Inactive","Inactive","Active","Inactive","Active","Active","Inactive","Inactive","Active","Inactive","Active","Inactive","Active","Inactive","Inactive","Inactive","Inactive","Active","Inactive","Inactive","Active","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Active","Active","Inactive","Active","Inactive","Active","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Active","Active","Active","Inactive","Active","Active","Inactive","Active","Inactive","Inactive","Inactive","Active","Active","Active","Active","Inactive","Active","Inactive","Inactive","Active","Inactive","Inactive","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Inactive","Active","Active","Active","Active","Active","Inactive","Active","Inactive","Active","Inactive","Active","Inactive","Active","Active","Active","Inactive","Active","Active","Active","Active","Active","Inactive","Inactive","Inactive","Inactive","Inactive","Active","Active","Inactive","Active","Active"]
                    ]

            }

			const objLAct = {}
			
			for(i=0; i<LActsAll[0].length; i++){

				objLAct[LActsAll[0][i]]={"ActID": LActsAll[0][i], "ActDesc": LActsAll[1][i], "PCode": LActsAll[2][i], "UCode": LActsAll[3][i], "Status": LActsAll[4][i]}
								
			}

			//Projects

			//let data_proj = <?php echo json_encode( $arr_proj ) ?>;
			
			//localStorage.setItem("LSProj", JSON.stringify(data_proj));
			
			let LProj = JSON.parse(localStorage.getItem("LSProj"));
			
			//let data_proj_all = <?php echo json_encode( $arr_proj_all) ?>;
			
			///localStorage.setItem("LSProjAll", JSON.stringify(data_proj_all));
			
			let LProjAll= JSON.parse(localStorage.getItem("LSProjAll"));
			
            if(LProjAll){}else{
                
                LProjAll = 
                    [
                        ["150141","150143","150145","150182","150848","160038","160041","2012-RM-08","2013-AM-04","2013-AM-05","2013-AM-09","2013-AM-10","2013-AM-12","2013-AM-15","2013-RM-03","2013-RM-05","2013-SP-01","2013-SP-02","2014-AM-05","2014-AM-06","2014-AM-08","2014-AM-14","2014-AM-15","2014-AM-18","2014-AM-19","2014-FA-08","2014-FA-11","2014-FA-12","2014-IT-18","2014-RM-04","2014-RM-06","2014-SP-01","2015-AM-08","2015-AM-09","2015-AM-12","2015-TH-01","2015-TH-02","2015-TH-03","AD","ADMIN","AS","BMP","CC","CWSocial","DI","DOG","EXGFs","F.Friends","FAMILY","FLANG","FMI","FRIENDS","IIA","ISSUES","LEARNING","LMOVE","M.Friends","MEET","NA","PCD","PERSONAL","PFIN","PROG","PTO","PURCHASES","TAX","TIAACO","TIMEDB","TRAINING","NEWS","READ","160758","160755","I.Friends","REG","CFA","TRANS","170754","PHY","170746","170862.03","170745","M.CW","F.CW","NORM","170744","BPRM","SHRP","POL","170075","RITV","MTA","DLP","AUD","NP","REP","FCRM","180161","WMOVE","180305","SLA","SP","SA","RCSA","BSDI","RID","OB","VOL","TG","CHC","WRT","TR","CR","CRMP","RC","RT","IRR"],
                        ["Wells Cap 2015","GCM","Rock Creek","Basel DI","RCIS Retro","FMG","WFAM-WIM Int.","Enterprise Risk Mgmt","Lifecycle/Lifestyle","Quantitative Portfolio Mgmt","Polar Star","Radar","Asset Allocation","AM European Offices","Risk Appetite","Model Governance","IPFS Flowcharting Project","Real Estate Authorizations","AM Sales Support","Performance Reporting","Henderson Advisory (UK)","THRE Group Finance","THRE Investment Committee","Structured Products","Westchester","FS Close Process","MF Taxes, Actions and Dist.","Yardi","THRE ITGC","Securities Pricing & Valuation","Enterprise Risk Management","Model Risk Special Project","THRE Compliance","THRE Operations","THRE Fund Finance","THRE - General","Locational Strategy","THRE Legal","Alyssa","ADMIN","Auburn Situation","BMP","Coverage Coord.","Coworkers","Division Initiatives","Dog","Ex-GFs","Friends (F)","Family","Foreign Language Skills","Free Money Initiatives","Social - Friends (Pre-Tracking","IIA","Issues","Learning","London Move","Friends (M)","Other Meetings","Unassigned","PCD","Personal","Personal Finances","Programming","PTO","Major Purchases","Taxes (Personal)","TIAA Carryover","Time DB Design","Training","News","Reading & Research","PCG Supervision","IPCS","Inactive Friends","Regulatory Reviews","CFA Exam","Transport","WFAM Sales","Physics","WFAM Compliance","Reg O Retrospective","Galliard","Coworkers (M)","Coworkers (F)","Normalization","Wells Cap","BPM","SHRP","Policy","Reinsurance","Reinsurance T&V","MTA","DLP","Audits","Products","Reporting","Financial Crimes","Structured Products","Moving","2018 MIP Audit","SLA Management","Sales Practices","Self Assurance","RCSA","BSDI","Risk (ID-Meas-App)","Onboarding","Volcker","Trade Governance","Childcare","Writing","Tech Risk","Conduct Risk","CRMPS","Regulatory Control","Required Training","Intl. Reg. Reporting"],
                        ["W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","W","S","W","S","W","W","S","W","P","S","S","S","L","P","S","I","W","L","P","S","W","N","D","P","P","L","N","P","P","W","P","T","L","L","W","W","S","W","L","P","W","L","W","W","W","S","S","P","W","W","W","W","W","W","W","W","W","W","W","W","W","P","W","W","W","W","W","W","W","D","W","W","P","L","W","W","W","W","W","W"],
                        ["Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Open","Closed","Closed","Closed","N/A","Closed","N/A","Closed","N/A","N/A","Closed","Closed","Closed","Closed","Open","N/A","Closed","N/A","Open","N/A","N/A","N/A","N/A","Open","Closed","Closed","N/A","Closed","N/A","N/A","N/A","N/A","Closed","Closed","Closed","Closed","Closed","Open","Closed","Closed","Closed","Closed","Closed","Open","Open","Open","Closed","Open","Open","Open","Closed","Closed","Closed","Closed","Open","Closed","Open","Closed","Closed","Closed","Closed","Closed","Closed","Closed","Open","Open","Open","Open","Closed","Closed","Open","Closed","Open","Closed","Closed","Open","Closed","Closed"]
                        
                    ]
            }

			const objLProj = {}
			
			for(i=0; i<LProjAll[0].length; i++){

				objLProj[LProjAll[0][i]]={"ProjID": LProjAll[0][i], "ProjDesc": LProjAll[1][i], "ProfileCode": LProjAll[2][i], "ProjStatus": LProjAll[3][i]}
								
			}
			
			//Sub-Projects
			
			//let data_cont = <?php echo json_encode( $arr_cont ) ?>;
			
			//localStorage.setItem("LSConts", JSON.stringify(data_cont));

			//let LConts = JSON.parse(localStorage.getItem("LSConts"));
			
			//let data_cont_all = <?php echo json_encode( $arr_cont_all ) ?>;
			
			//localStorage.setItem("LSContAll", JSON.stringify(data_cont_all));
			
			let LContAll = JSON.parse(localStorage.getItem("LSContAll"));
			
            if(LContAll){}else{
                LContAll =
                    [
                        ["150141","150141.1","150141.2","150143","150143.1","150143.2","150143.3","150143.4","150143.5","150143.6","150143.7","150143.8","150143.9","150145","150145.01","150145.02","150145.03","150145.04","150145.05","150145.07","150145.06","150182","150182.1","150182.2","150848","160038.A","160038.P","160038.R","160038.1","160038.2","160038.3","160038.4","160038.5","160038.6","160038.7","160038.8","160038.9","160041.A","160041.M","160041.1","160041.2","2012-RM-08.0.0","2013-AM-04.0.0","2013-AM-04.B.2","2013-AM-04.B.3","2013-AM-04.D.1","2013-AM-04.E.1","2013-AM-05.0.0","2013-AM-05.B.1","2013-AM-05.B.2","2013-AM-05.C.1","2013-AM-05.E.1","2013-AM-05.F.1","2013-AM-09.0.0","2013-AM-09.A.2","2013-AM-09.A.3","2013-AM-09.B.1","2013-AM-09.B.2","2013-AM-09.B.3","2013-AM-09.C.2","2013-AM-09.C.4","2013-AM-09.D.3","2013-AM-10.0.0","2013-AM-10.A.7","2013-AM-10.A.8","2013-AM-10.B.7","2013-AM-10.C.1","2013-AM-10.C.2","2013-AM-10.C.3","2013-AM-12.0.0","2013-AM-12.A.1","2013-AM-12.A.2","2013-AM-12.B.1","2013-AM-12.C.1","2013-AM-15.0.0","2013-AM-15.A.1","2013-AM-15.A.2","2013-AM-15.A.3","2013-AM-15.A.4","2013-AM-15.B.1","2013-AM-15.B.2","2013-AM-15.B.3","2013-AM-15.B.4","2013-AM-15.C.1","2013-AM-15.C.2","2013-RM-03.0.0","2013-RM-03.A.2","2013-RM-03.A.3","2013-RM-03.B.1","2013-RM-03.B.2","2013-RM-03.C.1","2013-RM-03.C.2","2013-RM-05.0.0","2013-SP-01.0.0","2013-SP-02.0.0","2014-AM-05.0.0","2014-AM-05.A.1","2014-AM-05.A.2","2014-AM-05.A.3","2014-AM-05.B.1","2014-AM-05.B.2","2014-AM-05.C.1","2014-AM-05.C.2","2014-AM-05.C.3","2014-AM-05.D.1","2014-AM-05.D.2","2014-AM-05.D.3","2014-AM-05.E.1","2014-AM-05.E.2","2014-AM-06.0.0","2014-AM-08.0","2014-AM-08.A","2014-AM-08.B","2014-AM-08.C","2014-AM-14.0.0","2014-AM-14.A.1","2014-AM-14.A.2","2014-AM-14.A.3","2014-AM-14.A.4","2014-AM-14.A.5","2014-AM-14.B.1","2014-AM-14.B.2","2014-AM-14.C.1","2014-AM-14.C.2","2014-AM-14.C.3","2014-AM-15.0.0","2014-AM-15.A.1","2014-AM-15.A.2","2014-AM-15.A.3","2014-AM-15.A.4","2014-AM-15.B.1","2014-AM-15.B.2","2014-AM-15.B.3","2014-AM-15.C.1","2014-AM-15.C.2","2014-AM-15.C.3","2014-AM-15.D.1","2014-AM-15.D.2","2014-AM-18.0.0","2014-AM-18.A.1","2014-AM-18.A.2","2014-AM-18.A.3","2014-AM-18.B.1","2014-AM-18.B.2","2014-AM-18.B.3","2014-AM-18.B.4","2014-AM-18.C.1","2014-AM-18.C.2","2014-AM-18.C.3","2014-AM-18.D.1","2014-AM-18.D.2","2014-AM-18.D.3","2014-AM-18.E.1","2014-AM-19.0.0","2014-FA-08.0.0","2014-FA-08.B.1","2014-FA-08.B.2","2014-FA-08.B.3","2014-FA-08.B.4","2014-FA-08.B.5","2014-FA-08.C.1","2014-FA-08.C.2","2014-FA-08.C.3","2014-FA-08.D.1","2014-FA-08.D.2","2014-FA-11.0.0","2014-FA-11.A.3","2014-FA-11.C.1","2014-FA-11.C.2","2014-FA-11.C.3","2014-FA-11.C.4","2014-FA-11.C.5","2014-FA-11.C.6","2014-FA-11.E.2","2014-FA-12.0.0","2014-FA-12.A.1","2014-FA-12.A.2","2014-FA-12.B.1","2014-FA-12.B.2","2014-FA-12.B.3","2014-FA-12.C.1","2014-FA-12.C.2","2014-FA-12.D.1","2014-IT-18.0.0","2014-RM-04.0.0","2014-RM-04.B.2","2014-RM-04.C.4","2014-RM-06.0.0","2014-SP-01.0.0","2015-AM-08.0.0","2015-AM-08.A.1","2015-AM-08.A.2","2015-AM-08.B.1","2015-AM-08.B.2","2015-AM-08.B.3","2015-AM-08.B.4","2015-AM-08.C.1","2015-AM-08.C.2","2015-AM-08.C.3","2015-AM-08.D.1","2015-AM-09.0.0","2015-AM-09.A.1","2015-AM-09.A.2","2015-AM-09.B.1","2015-AM-09.B.2","2015-AM-09.B.3","2015-AM-09.C.2","2015-AM-09.C.3","2015-AM-09.D.1","2015-AM-09.E.1","2015-AM-09.E.2","2015-AM-12.0.0","2015-TH-01.0","2015-TH-02.0","2015-TH-03.0.0","AD","ADMIN","BMP.A","BMP.0","BMP.1","BMP.2","BMP.3","BMP.4","BMP.6","BMP.7","BMP.5","CC.L","CC.O","BB","BM","CB","CW-Group","JC","JF","JL","JMo","KA","LD","LJ","MM","SJP","DI","Dog","AS","DT","KW","LM","AM","BK","CS","JM","JW","KS","MH","NK","ME","KP","Family.1","Family.2","Family.3","ENG","FRE","GER","ITA","Mpoints","Shopkick","FRIENDS.X","IIA.1","IIA.2","IIA.3","IIA.4","ISSUE","MAPS","MRA","LEARNING.1","LMOVE.1","LMOVE.2","LMOVE.3","LMOVE.4","BC","DA","DC","DL","PS","RC","MP","TB","MEET.1","NA","PCD.1","PCD.2","PCD.3","PCD.4","PCD.5","PCD.6","PERSONAL.1","PERSONAL.2","PERSONAL.3","PERSONAL.4","BREAK","PERSONAL.5","PERSONAL.6","PERSONAL.7","PERSONAL.8","PERSONAL.A","PFIN.00","PFIN.01","PFIN.02","PFIN.03","PFIN.04","PFIN.05","PFIN.06","PFIN.07","PFIN.08","PROG.1","PROG.2","PROG.3","PURCHASES","TAX.1","TIAACO.0","TIMEDB.0","TIMEDB.1","TIMEDB.2","TIMEDB.3","TIMEDB.4","TRAINING.1","TRAINING.2","TRAINING.3","TRAINING.4","TRAINING.5","TRANS.1","News","READ.1","CH","PROG.4","PROG.5","160758.A","160758.P","160758.R","160755.P","160755.A","AC","PERSONAL.9","MD","160758.1","160758.2","160758.3","160758.4","LMy","JMe","LH","ADf","VO","MaH","BG","REG","Training.6","CFA.0","CFA.1","CFA.2","CFA.3","CFA.4","CFA.5","CFA.6","CFA.7","CFA.8","CFA.9","CFA.10","IC","Family.4","Family.5","Family.6","Family.7","Family.8","A-K","A-M","A-D","C-M","A-D-M-C","CFA.T","TRANS.2","TRANS.3","160755.R","Jeremy H","JH","ST","160755.1","160755.2","160755.3","160755.4","160755.5","160755.6","170754.A","170754.P","170754.R","C-P","Family.9","BA","CFA.E","PHY.G","170754.1","170754.2","170754.3","170754.4","170746.1","170746.2","170746.3","170746.4","170746.5","170862.03.A","170862.03.P","JP","CFA.11","CFA.12","CFA.13","CFA.14","CFA.15","CFA.16","CFA.17","CFA.18","CFA.19","CFA.20","CFA.21","CFA.22","170745.P","DM","JD","NEWS.S","MB","NB","SM","AC-ME","HC","D-M","NW","NEWS.I","170745.01","170745.02","170745.03","170745.04","170745.05","170745.06","170745.07","170745.08","170745.09","170745.1","NORM.TV1","NORM.S","170745.A","170744.P","170744.A","PROG.6","PROG.7","170744.01","170744.02","170744.03","170744.04","TRAINING.7","170075","POL.00","SHRP.00","ISSUE.00","BPRM.00","RITV.00","DLP.00","AB","AUD.00","NP.00","C-ME","DLP.01","DLP.02","MTA.00","REP.00","REP.01","READ.02","BPRM.01","FCRM.01","FCRM.02","180161","MOVE.W","TRANS.4","180305","AUD.01","AUD.02","AUD.03","CV","TR","TBe","CFA.23","SLA.0","SP.0","NEWS.A","AUD.04","REP.02","SA.0","A-R","A-M-R-T-N","A-MH","AUD.05","AUD.06","REP.03","NORM.F","RCSA.00","RCSA.A","RCSA.R","RCSA.I","BPRM.R","ISSUE.R","SHRP.01","SHPR.R","ADb","PURC.01","NORM.C","NORM.FO","NORM.T","NORM.CA","REP.04","PROG.8","NP.01","REP.05","BSDI.0","RID.0","OB.0","N1","TRANS.5","AUD.07","VOL.G","TG.0","NP.02","NP.03","NP.04","PROG.9","CHC.R","WRT.S","SPA","SHRP.02","CRMP.0","TR.00","TR.01","RC.00","IRR.00"],
                        ["General","Portfolio Management","Trading","General","Physical Security","Record Retention","User Access","Trading","Operations","General Accounting","Fees","Compliance","Client Statements","General","Sales, Marketing, and New Accounts / Products","Investment Management","Back Office Functions","Risk Management / Portfolio Analytics","Physical and Information Security","BSA / AML / OFAC","Compliance","General","Issues Management Process","Data Integrity","General","Admin","Planning","FMG Reporting","FMG Money Mkt Reform","FMG Sales","FMG Move Money","FMG Pricing","FMG Manage Portfolio","FMG Confidential Info","Compliance","Third Parties","Board Reporting","Admin","Meetings","Meeting Notes","SharePoint","General","General","Performance Monitoring","Post-Trade Monitoring","System Access","BCP","General","Performance Monitoring","Post-Trade Monitoring","PM Trade Activity Monitoring","System Access","BCP","General","RAOOC Review","Board of Directors Oversight","Quarterly Financial Statement Review","Annual Independent Audit","Annual Independent Review of Performance & Non-Per","Code of Conduct","BCP Plan","Standard Operating Procedures","General","TIAA Board Participation","Annual Budget Review and Approval","Negative News Monitoring","Quarterly Financial Statements","Annual Independent Audit","Month-end Closing Checklists","General","Governance & Oversight","ALCO Review and Approval of Ranges","Monthly Tracking","Validation of Inputs","General","Deal Pipeline Meetings","TCAM UK IC & IMC","Standard Operating Procedures","Risk Management","Quarterly Financial Reporting","Monthly Management Reporting","VAT Tax","FCU Filings","BCP","Operational Issues","General","Risk Appetite Level Oversight","Risk Appetite Usage Oversight","Risk Appetite Level Management","Risk Appetite Usage Management","Collaboration - RM/Business Stakeholders","Collaboration - Finance & Actuarial","General","General","General","General","SOPs","SSAE 16s","4th Party Vendor Feeds","AMBD Reporting (CRM)","Sales Reporting (SalesVision)","Distribution Lists","CRM Maintenance","Email uploads","System Access","User List - HR Feed","Changes & Enhancements","BCP - TIAA Level","BCP - SalesForce / Broadridge Level","General","General","Audit Universe","Risk Assessment","Risk and Control Items","General","Consolidation Worksheets","ELT & Shareholder Reporting","Financial Statements","Bank Account Reconcilations","Invoice Reviews","Capital Adequacy - Regulatory","Capital Adequacy - BD","Paris GL to CODA Recon","Milan GL to CODA Recon","Third Party Vendor Oversight","General","Committee Members","Thresholds","Discussion Material Submission","Meeting Minutes","Transaction Reviews","Strategy Reviews","Proposal Reviews","Investment Requirements Summaires","Board of Directors Approvals","Client Approval Process","TIAA-CREF General Account","KAG","General","Initial Credit Reviews","Monthly Trade List Review","Quarterly Early Warning List Review","Monthly Holdings Review","Annual Broker/Counterparty List Review","Quarterly FIOC","Annual Investment Committee Approval","Annual ALCO Approval","Monthly Tracking Error Report","Outliers","Bloomberg AIM Confirmations","Daily Trade Fails Tracking","Rebooked Trades","BCP","General","General","Confluence Funds Validation","Real Estate Account Workpapers","Non-Confluence Funds FS Prep","Draft FS Review","PEO/PFO Sign-off","Business Partner Reviews","SOPs","Run Book & Internal Calander","IT General Controls","System Access Reviews","General","Tax Returns","Tax Provisions","Excise Tax Calculations","RIC Diversification Test","REIT Adjustments","PFIC Analysis","Shareholder Reporting","End User Controls","General","Access Management: Internal Users","Access Management: External Users","User License Inactivation","Security Groups & Property Lists","External Property Manager Approvers List","Entitlement Reviews: Internal","Entitlement Reviews: External","Non-systematic Controls","General","General","Entitlement Reviews","Equity Pricing Memo Reviews","General","General","General","Policies & Procedures","Risk Assessments","Compulsory Training","Regulatory Awareness","Business Line Regulatory Risk Monitoring","ELT Reporting","Ongoing Compliance Monitoring","Standalone Montioring Engagements","Regulatory Breaches","Regulatory Reporting","General","Cash Payments","Transfers","Accounts Payable (Corporate)","Accounts Payable (Funds)","Accounts Receivable (Corporate)","Daily Balance Monitoring","Bank Recons","Managing Agents","System Access","Data Transmissions","Fund Finance","General","General","General","Alyssa","Admin","General","WFAM BMP","FMG BMP","Galliard BMP","Golden BMP","WCM BMP","FIA BMP","ECM BMP","Rock Creek BMP","Legal Entity Cvg. Coord.","OON Cvg. Coord.","Brian B.","Brian","Chris","Co-workers","Joe","Jarred","Joyce","Julianne","Kishwar","Laurie","Lauren J","Mani","Syndie","Division Initiatives","Dog","Auburn","Daya","Kristin","Lauren","Amy","Brentan","Caytie","Jen","Jasmine","Kira","Melinda","Nina","Meghan","Kelley","Mom","Dad","Other Family","English (Review)","French","German","Italian","Mpoints","Shopkick","General Social (Pre-Tracking)","Monthly Cash Recons","Slot Purchase Cooridination","Admin","Treasurer","Issue Validation","MAP Validation","MRA Validation","Learning","General","Neighborhood Research","Apartment Listing Review","Cost of Living Related Research","Brent","Dave A.","Dave","Dan","Patrick","Ray","Milo","Tom","Team Meeting","NA","Coaching","Development Planning","Performance Discussions","Candidate Interview","PCD - General","Self Evaluations","Non-Productive","Routine","Productive","Health","Break","Driving","Career","Shopping","Meals","Admin","Finances","Variable Cost Monitoring","Fixed Cost Monitoring","Budgeting","Cost Driver Analysis","Financial Planning / Forecasting","Salary Projections / Analysis","Bill Payments","Investment Research","Python","Java","HTML-CSS-JavaScript","Major Purchases","Tax Return Prep","General","Database","Underlying Tables","Queries","Forms","Reports","Audit Training","WF Training","CIA Exam","WFAS Onboarding","CFE Exam","Commute - Concord ","News","Research","Chriselle","AJAX","JQuery","PCG Admin","PCG Planning","PCG Reporting","IPCS Planning","IPCS Admin","April","Air Travel","Matt","PCG Account Maintenance","PCG Advice & Oversight","PCG Communications","PCG Risk Mgmt","Laura","Jay","Leigh","Alyssa & Friends","Valeka","Marsha","Bree","Regulatory Reviews","CFA Exam Admin","CFA L2 - Level 1 Rev","CFA L2 - Ethics","CFA L2 - Quant Methods","CFA L2 - Economics","CFA L2 - Financial Rep","CFA L2 - Corp Finance","CFA L2 - Equity","CFA L2 - Fixed Inc","CFA L2 - Derivatives","CFA L2 - Alternatives","CFA L2 - Port Mgmt","IIA Contacts","My Parents","Alyssa & My Parents","Alyssa & Dogs","Alyssa, My Parents & Dogs","My Parents & Dogs","Alyssa & Kristin","Alyssa & Meghan","Alyssa & Dave","Caytie & Mani","AD-DC-ME-CS","CFA L2 - Practice Tests","Commute - CIC","Commute - Irregular","IPCS Reporting","JH","Jeremy H","Sandie","IPCS Sales","IPCS Account Setup","IPCS Roles & Resp.","IPCS Policies","IPCS Move Money","IPCS Travel Exp","WFAM Sales Admin","WFAM Sales Planning","WFAM Sales Reporting","Caytie & Patrick","Alyssa, Other Family, Dogs","Ben","CFA - Exam","Physics (General)","WFAM Sales - Marketing","WFAM Sales - Sales Activities","WFAM Sales - New Accounts","WFAM Sales - Call Centers","FMG Compliance","WCM Compliance","Galliard Compliance","Golden Compliance","Rock Creek Compliance","Reg O RR Admin","Reg O RR Planning","Jeremy P","CFA L3 - Ethics","CFA L3 - Wealth Mgmt","CFA L3 - Capital Mkts","CFA L3 - Asset Allocation","CFA L3 - Equity","CFA L3 - Fixed Inc","CFA L3 - Alts","CFA L3 - Risk Mgmt","CFA L3 - Derivatives","CFA L3 - Port Mgmt","CFA L3 - Behavioral Fin","CFA L3 - All","Galliard - Planning","Devon","Johan","Sports","Maureen","Neil","Sandy","April & Meghan","Hassan","Dave & Meghan","Nicki","Investment News","Galliard - Marketing","Galliard - Sales","Galliard - New Accounts","Galliard - Service Customers","Galliard - Physical Security","Galliard - User Access","Galliard - Trading","Galliard - Portfolio Mgmt","Galliard - Recons","Galliard - Oversight","Game of Thrones","Sports","Galliard - Admin","WCM - Planning","WCM - Admin","PHP","JSON","WCM - Trading","WCM - Port. Mgmt.","WCM - Client Service","WCM - Conf Info","CPE Training","RI Audit - General","Policy Mgmt - General","SHRP-RCSA - General","Issues - General","BPM - General","RITV - General","DLP - General","Alex","Audits - General","General - New Prod","Caytie & Meghan","Elevated Internet Access","Email Filtering","General - MTA","General - Reporting","IP Qtrly Rep","Quora","Process Map Updates","FCRM - General","Customer Stats","IP SP - General","Waxhaw Move ","Commute - Waxhaw","MIP Audit - General","Reinsurance AML Audit","Structured Products Audit","MIP Audit","Christine","Tyler","Taran","CFA L3 - Practice Tests","SLA General","Sales Practices - General","Astronomy","Iowa Exam","Monthly Forum","Self Assurance - General","Alyssa & Ray","Alyssa Melinda Ray Tom Nina","Alyssa & Melinda","IRR ERMA","Trading Audit","Partner Slide","Fashion","RCSA - General","RCSA Assessment","RCSA Reporting","Intl RCSA","BPRM Reporting","Issue Reporting","MR Controls","SHRP Reporting","Abe","2018 Car","Cocktails","Food","Travel","Cars","Risk Committee","Algorithms","REEF API","Weekly Report","BSDI General","Risk ID General","Onboarding - General","Neighbors","Commute - Waxhaw (O)","Municipals Audit","Volcker General","Trade Governance - General","Single Security","Reinsurance Retirements","E-Trading","Visual Basic","Childcare","Short Stories","Spanish","Hierarchy Changes","CRMP - General","Tech Risk (General)","Ada","Reg Control - General","Intl. Reg. Rep. General"],
                        ["150141","150141","150141","150143","150143","150143","150143","150143","150143","150143","150143","150143","150143","150145","150145","150145","150145","150145","150145","150145","150145","150182","150182","150182","150848","160038","160038","160038","160038","160038","160038","160038","160038","160038","160038","160038","160038","160041","160041","160041","160041","2012-RM-08","2013-AM-04","2013-AM-04","2013-AM-04","2013-AM-04","2013-AM-04","2013-AM-05","2013-AM-05","2013-AM-05","2013-AM-05","2013-AM-05","2013-AM-05","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-09","2013-AM-10","2013-AM-10","2013-AM-10","2013-AM-10","2013-AM-10","2013-AM-10","2013-AM-10","2013-AM-12","2013-AM-12","2013-AM-12","2013-AM-12","2013-AM-12","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-AM-15","2013-RM-03","2013-RM-03","2013-RM-03","2013-RM-03","2013-RM-03","2013-RM-03","2013-RM-03","2013-RM-05","2013-SP-01","2013-SP-02","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-05","2014-AM-06","2014-AM-08","2014-AM-08","2014-AM-08","2014-AM-08","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-14","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-15","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-18","2014-AM-19","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-08","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-11","2014-FA-12","2014-FA-12","2014-FA-12","2014-FA-12","2014-FA-12","2014-FA-12","2014-FA-12","2014-FA-12","2014-FA-12","2014-IT-18","2014-RM-04","2014-RM-04","2014-RM-04","2014-RM-06","2014-SP-01","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-08","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-09","2015-AM-12","2015-TH-01","2015-TH-02","2015-TH-03","FAMILY","ADMIN","BMP","BMP","BMP","BMP","BMP","BMP","BMP","BMP","BMP","CC","CC","M.CW","M.CW","M.CW","CWSocial","M.CW","M.CW","F.CW","F.CW","M.CW","F.CW","F.CW","M.CW","F.CW","DI","DOG","EXGFs","EXGFs","F.Friends","EXGFs","F.Friends","F.Friends","F.Friends","F.Friends","F.CW","F.Friends","F.Friends","F.Friends","F.Friends","F.CW","FAMILY","FAMILY","FAMILY","FLANG","FLANG","FLANG","FLANG","FMI","FMI","FRIENDS","IIA","IIA","IIA","IIA","ISSUES","ISSUES","ISSUES","LEARNING","LMOVE","LMOVE","LMOVE","LMOVE","M.Friends","M.Friends","M.Friends","M.Friends","M.Friends","M.Friends","M.Friends","M.Friends","MEET","NA","PCD","PCD","PCD","PCD","PCD","PCD","PERSONAL","PERSONAL","PERSONAL","PERSONAL","PERSONAL","TRANS","PERSONAL","PERSONAL","PERSONAL","PERSONAL","PFIN","PFIN","PFIN","PFIN","PFIN","PFIN","PFIN","PFIN","PFIN","PROG","PROG","PROG","PURCHASES","TAX","TIAACO","TIMEDB","TIMEDB","TIMEDB","TIMEDB","TIMEDB","TRAINING","TRAINING","TRAINING","TRAINING","TRAINING","TRANS","NEWS","READ","F.Friends","PROG","PROG","160758","160758","160758","160755","160755","F.CW","TRANS","M.Friends","160758","160758","160758","160758","F.Friends","M.CW","F.CW","F.Friends","F.CW","F.CW","F.CW","REG","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CWSocial","FAMILY","FAMILY","FAMILY","FAMILY","FAMILY","F.Friends","F.Friends","M.Friends","CWSocial","CWSocial","CFA","TRANS","TRANS","160755","CWSocial","M.CW","F.CW","160755","160755","160755","160755","160755","160755","170754","170754","170754","CWSocial","FAMILY","M.Friends","CFA","PHY","170754","170754","170754","170754","170746","170746","170746","170746","170746","170862.03","170862.03","M.CW","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","CFA","170745","M.CW","M.CW","NEWS","F.CW","M.CW","M.CW","F.CW","M.CW","CWSocial","F.CW","NEWS","170745","170745","170745","170745","170745","170745","170745","170745","170745","170745","NORM","NORM","170745","170744","170744","PROG","PROG","170744","170744","170744","170744","TRAINING","170075","POL","SHRP","ISSUES","BPRM","RITV","DLP","F.CW","AUD","NP","F.Friends","DLP","DLP","MTA","REP","REP","READ","BPRM","FCRM","FCRM","180161","WMOVE","TRANS","180305","AUD","AUD","AUD","F.Friends","M.Friends","F.CW","CFA","SLA","SP","NEWS","AUD","REP","SA","M.Friends","CWSocial","F.Friends","AUD","AUD","REP","NORM","RCSA","RCSA","RCSA","RCSA","BPRM","ISSUES","SHRP","SHRP","M.CW","PURCHASES","NORM","NORM","NORM","NORM","REP","PROG","NP","REP","BSDI","RID","OB","M.Friends","TRANS","AUD","VOL","TG","NP","NP","NP","PROG","CHC","WRT","FLANG","SHRP","CRMP","TR","TR","RC","IRR"],
                        
                        ["N","N","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","N","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","N","","N","N","N","N","N","N","","N","N","N","N","N","Y","N","N","N","N","N","N","N","N","N","","","N","N","","N","Y","N","","N","N","N","Y","N","","N","","","Y","N","N","N","N","","","","N","N","N","","N","N","N","Y","","","","","N","N","","N","N","Y","Y","N","","","N","N","N","N","Y","","","","","","","","Y","","","","","N","N","N","N","N","N","N","Y","Y","N","Y","N","N","","Y","N","N","N","N","N","Y","N","N","N","N","","","N","N","N","","","","","","N","Y","N","","","","","N","N","N","Y","N","N","N","N","Y","N","N","N","N","N","N","N","N","N","N","N","N","Y","Y","Y","N","N","Y","N","N","N","N","N","N","N","Y","N","N","N","Y","Y","Y","Y","Y","Y","Y","Y","Y","N","N","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","N","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","N","Y","N","N","N","N","N","N","N","N","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","N","N","Y","Y","Y","N","N","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","N","N","N","Y","N","N","Y","N","N","Y","Y","N","N","Y","N","Y","N","N","Y","N","N","N","N","Y","N","Y","N","N","N","N","N","N","N","N","N","N","N","N","Y","Y","Y","Y","N","N","Y","Y","N","Y","Y","N","N","N","N","Y","N","N","N","Y","N","N","Y","N","N","N","N","N","N","N","Y","Y","N","N","Y","N","N","Y","Y","N"]
                    ]
            }

			const objLCont = {}

			for(i=0; i<LContAll[0].length; i++){

				objLCont[LContAll[0][i]]={"ContID": LContAll[0][i], "ContDesc": LContAll[1][i], "ProjID": LContAll[2][i], "Active": LContAll[3][i]}

			}

			//Use Codes & Colors

			//let data_pu = <?php echo json_encode( $arr_pu ) ?>;
				
			//localStorage.setItem("LSPU", JSON.stringify(data_pu));
			
			let LPU = JSON.parse(localStorage.getItem("LSPU"));

            if(LPU){}else{
                LPU=
                [
                    ["A","B","D","I","M","S","P","W","N","L","T","1","2","R","H","3"],
                    ["Admin","Break","Development","IIA","Meeting","Social","Personal","Work","Untracked","Learning","Training","Productive","Travel","Routine","Health","Meal"],
                    ["Silver","red","YellowGreen","pink","lime","yellow","purple","green","black","gold","orange","Peru","DimGray","Cyan","Blue","Fuchsia"]
                ]


            }
			
			const objLPU = {}

			for(i=0; i<LPU[0].length; i++){

				objLPU[LPU[0][i]]={"PUCode": LPU[0][i], "PUCodeDesc": LPU[1][i], "Color": LPU[2][i]};
				
			}

			setTime();

			if(LEvents===null){

				LEvents = [];
			
			}else{

				displayLEvents();

			}

			if(LMoods===null){

				LMoods = [];
			
			}else{

				displayLMoods();

			}

			localEventButton('N04', 'NA', 'Bed', "tblRoutine", "n");

			localEventButton('B01', 'PERSONAL.2', 'BR', "tblRoutine", "n");

			localEventButton('B07', 'PERSONAL.2', 'BR-2', "tblRoutine", "n");

			localEventButton('P29', 'PERSONAL.2', 'Shower', "tblRoutine", (2*60*60*24));

			localEventButton('P60', 'PERSONAL.2', 'Floss', "tblRoutine", (2*60*60*24));

			localEventButton('P09', 'PERSONAL.2', 'Brush Teeth', "tblRoutine", (2*60*60*24));
					
			localEventButton('P33', 'PERSONAL.2', 'Shave & Hair', "tblRoutine", (3*60*60*24));

			localEventButton('P20', 'PERSONAL.2', 'Dress', "tblRoutine", "n");

			localEventButton('P32', 'PERSONAL.2', 'Pack', "tblRoutine", "n");

			localEventButton('P16', 'Dog', 'Dog', "tblRoutine", "n");

			localEventButton('P30', 'Dog', 'Walk (D)', "tblRoutine", "n");

			localEventButton('P12', 'PERSONAL.2', 'Fingernails', "tblRoutine", (10*60*60*24));

			localEventButton('P29', 'Dog', 'Shower (D)', "tblRoutine", (30*60*60*24));

			localEventButton('N01', 'NA', 'Untracked', "tblRoutine", "n");

			localEventButton('C03', 'CHC.R', 'Feeding', "tblccare", "n");

			localEventButton('C01', 'CHC.R', 'Diaper 1', "tblccare", "n");

			localEventButton('C02', 'CHC.R', 'Diaper 2', "tblccare", "n");

			localEventButton('C08', 'CHC.R', 'Reading', "tblccare", (4*60*60*24));
				
			localEventButton('C09', 'CHC.R', 'Play', "tblccare", "n");
				
			localEventButton('C04', 'CHC.R', 'Bath', "tblccare", "n");

			localEventButton('S01', 'CW-Group', 'Social (CW)', "tblsocial", "n");

			localEventButton('S13', 'CW-Group', 'Bar (CW)', "tblsocial", "n");

			localEventButton('S01', 'DC', 'Social (DC)', "tblsocial", "n");
					
			localEventButton('S01', 'ME', 'Social (ME)', "tblsocial", "n");

			localEventButton('A02', 'ADMIN', 'Inbox', "tblwork", "n");

			localEventButton('T04', 'TRAINING.2', 'WF Training', "tblwork", "n");

			localEventButton('M10', 'MEET.1', 'Team Mtg', "tblwork", "n");

			localEventButton('A07', 'ADMIN', 'Tech Support', "tblwork", "n");

			localEventButton('M02', 'RCSA.00', 'RCSA: Bus Mtg', "tblwork", "n");

			localEventButton('M01', 'RCSA.00', 'RCSA: R&C Mtg', "tblwork", "n");

			localEventButton('W29', 'RCSA.A', 'RCSA: Controls', "tblwork", "n");

			localEventButton('W10', 'RCSA.00', 'RCSA: Email', "tblwork", "n");

			localEventButton('W10', 'SHRP.01', 'MR Ctr: Email', "tblwork", "n");

			localEventButton('M01', 'SHRP.01', 'MR Ctr: R&C Mtg', "tblwork", "n");

			localEventButton('W10', 'RC.00', 'Reg Ctr Email', "tblwork", "n");

			localEventButton('M01', 'RC.00', 'Reg Ctr R&C Mtg', "tblwork", "n");

			localEventButton('N02', 'AD', 'Drive (A)', "tblfam", "n");

			localEventButton('S07', 'AD', 'Meal (A)', "tblfam", "n");

			localEventButton('S01', 'Family.1', 'Social (Mom)', "tblfam", "n");

			localEventButton('S01', 'AD', 'Social (A)', "tblfam", "n");

			localEventButton('S01', 'Family.3', 'Social (F)', "tblfam", "n");

			localEventButton('S10', 'AD', 'Shopping (A)', "tblfam", "n");

			localEventButton('N03', 'AD', 'TV (A)', "tblfam", "n");

			localEventButton('S09', 'AD', 'Events (A)', "tblfam", "n");

			localEventButton('N02', 'Family.6', 'Drive (A&D)', "tblfam", "n");

			localEventButton('P30', 'Family.6', 'Walk (A&D)', "tblfam", "n");

			localEventButton('N02', 'PERSONAL.5', 'Drive', "tbltrans", "n");
			
			localEventButton('N02', 'TRANS.4', 'Drive Commute (In)', "tbltrans", "n");
						
			localEventButton('P30', 'TRANS.4', 'Walk Commute (In)', "tbltrans", "n");
						
			localEventButton('P30', 'TRANS.5', 'Walk Commute (Out)', "tbltrans", "n");
						
			localEventButton('N02', 'TRANS.5', 'Drive Commute (Out)', "tbltrans", "n");

			localEventButton('P40', 'PERSONAL.5', 'Gas', "tbltrans", "n");

			localEventButton('N02', 'Dog', 'Drive (D)', "tbltrans", "n");

			localEventButton('P42', 'PERSONAL.4', 'Run', "tblhealth", "n");

			localEventButton('P31', 'PERSONAL.4', 'Gym', "tblhealth", (7*60*60*24));

			localEventButton('P63', 'PERSONAL.4', 'Meditate', "tblhealth", (7*60*60*24));

			localEventButton('P30', 'PERSONAL.4', 'Walk', "tblhealth", "n");

			localEventButton('P15', 'PERSONAL.4', 'Doctor', "tblhealth", "n");

			localEventButton('B02', 'PERSONAL.8', 'Eat', "tblfood", "n");

			localEventButton('B06', 'PERSONAL.8', 'Beverage', "tblfood", "n");

			localEventButton('P45', 'PERSONAL.8', 'Pick-up Food', "tblfood", "n");

			localEventButton('P13', 'PERSONAL.8', 'Cook', "tblfood", "n");

			localEventButton('B09', 'PERSONAL.8', 'Eat Slow', "tblfood", "n");
					
			localEventButton('B05', 'PERSONAL.8', 'Order Food', "tblfood", "n");

			localEventButton('P18', 'PERSONAL.4', 'Food Tracking', "tblfood", "n");
					
			localEventButton('P35', 'E1.2', 'Dishes', "tblchores", (4*60*60*24));

			localEventButton('P34', 'E1.3', 'Laundry', "tblchores", (14*60*60*24));

			localEventButton('P41', 'E1.4', 'Trash', "tblchores", (5*60*60*24));

			localEventButton('P59', 'E1.6', 'Vacuum', "tblchores", "n");

			localEventButton('P36', 'PERSONAL.7', 'Groceries', "tblchores", "n");

			localEventButton('P22', 'PERSONAL.3', 'Haircut', "tblchores", (30*60*60*24));

			localEventButton('P64', 'E1.6', 'Mail', "tblchores", (21*60*60*24));

			localEventButton('P61', 'PERSONAL.3', 'Sheets & Towels', "tblchores", (30*60*60*24));

			localEventButton('P37', 'E1.5', 'Lawn', "tblchores", "n");

			localEventButton('P58', 'E1.6', 'Clean Kitchen', "tblchores", "n");

			localEventButton('P48', 'E1.7', 'Clean Car', "tblchores", "n");

			localEventButton('P11', 'E1.6', 'Clean House', "tblchores", (30*60*60*24));

			localEventButton('P39', 'PERSONAL.7', 'Shopping: Home', "tblchores", "n");

			localEventButton('P47', 'PERSONAL.7', 'Shopping: Online', "tblchores", "n");

			localEventButton('P43', 'PERSONAL.3', 'Home Repairs', "tblchores", "n");

			localEventButton('L03', 'PERSONAL.3', 'Car Repairs', "tblchores", "n");

			localEventButton('P05', 'PERSONAL.A', 'Personal Admin', "tblpersonal", "n");

			localEventButton('P01', 'TIMEDB.0', 'Database', "tblpersonal", "n");

			localEventButton('P04', 'PFIN.00', 'Finances', "tblpersonal", "n");

			localEventButton('P26', 'PERSONAL.1', 'JO', "tblpersonal", "n");

			localEventButton('N03', 'PERSONAL.1', 'TV', "tblpersonal", "n");

			localEventButton('L16', 'READ.1', 'Research', "tblpersonal", "n");

			localEventButton('L16', 'PERSONAL.4', 'Read: Health', "tblpersonal", "n");

			localEventButton('L19', 'LEARNING.1', 'Crossword', "tblpersonal", "n");

			localEventButton('L14', 'PROG.3', 'JavaScript', "tblpersonal", "n");

			localEventButton('L14', 'PROG.1', 'Python', "tblpersonal", "n");

			localEventButton('P24', 'PERSONAL.1', 'Internet', "tblpersonal", "n");

			localEventButton('L16', 'News', 'News', "tblpersonal", "n");

			function btnclr(){

				$("button").css("background-color", defaultBtnBGColor);
				
				$("button").css("color", defaultBtnColor);

				resetAll();
			}

			$(".sTime").change(function(){

				displayLEvents();
				
			});

			function CheckLEvents(){
			
				//create array for missing events
				let missingEvents = [];

				//sort the list of local events
				LEvents.sort();
				
				LEvents.reverse();
				
				
				ELen = LEvents.length;
				
				SLen = srvevents[0].length;
				
				//confirm local events are in server
				
				for (i = 0; i < ELen; i++) {
				
					let varLocal = FixTime(LEvents[i][0]);
					let svrList = srvevents[0];
					
					if(svrList.includes(varLocal[3])!=true){
						
						missingEvents.push(LEvents[i]);
						
					}
				
				}

				let missingEventCount = missingEvents.length;
				
				if(missingEventCount>0){
				
					text = "<table>";
				
					text += "<th></th><th></th><th>Date</th><th>Time</th><th>Act</th><th>Cont</th><th></th>";

					for (i = 0; i < missingEventCount; i++) {
				
						text += "<tr><td>" +
						
						"<input type=button value=+ class=slnk onclick='JQPost(`"+ missingEvents[i][1] + "`,`" + missingEvents[i][2] + "`,`" + missingEvents[i][0] + "`,`" + i+"`)'/>" + 
					
						"</td><td>" 
						+ missingEvents[i][5].substring(0,5) 
						+ "</td><td>" 
						+ missingEvents[i][5].substring(6) 			
						+ "</td><td>" 
						+ missingEvents[i][3] 
						+ "</td><td>" 
						+ missingEvents[i][2] 
						+ "</td><td>" 
						+ missingEvents[i][4] 
						+ "</td></tr>";
				
					}
				
					text += "</table>";

					document.getElementById("listContainer").innerHTML = text;
				
					alert("Conflicts Found!");
				
					return;
				}

				LEvents =[];

				for (i = 0; i < SLen; i++) {

					let srvtime = FixTime(srvevents[0][i]);

					LEvents.push([srvtime[0], srvevents[1][i], srvevents[2][i], srvevents[3][i]]);
				}

				displayLEvents();

				alert("Sync Done");
			}

			function delEvent(i){
				
				var q = "Delete "+LEvents[i][0]+": "+LEvents[i][3]+"?";

				var c = confirm(q);
				
				if (c == true){
				
					var etime = sqTime(LEvents[i][0]);
				
					var a = LEvents.splice(i, 1);
					
					alert( objLEvents[LEvents[i][0]] )
				
					//JQDel(etime, 'tblEvents', 'StartTime');
					
					resetAll();
				
				}
			}

			function resetLEvents(){

				if(LEvents === undefined || LEvents.length == 0) {
				
					//do nothing
				
				}else{

					localStorage.setItem("LSEvents", JSON.stringify(LEvents));
					
					displayLEvents();
					
				}
			}

			function displayList(arr){

				S = arr. length;
				
				L = arr[0].length;
				
				text = "<table>";
				
				for (i = 0; i < L; i++) {
					
					text += "<tr>";
					
					for (j = 0; j < S; j++){
					
						text += "<td>" + arr[j][i] + "</td>";
						
					}
					
					text += "</tr>";
				
				}
				
				text += "</table>";
				document.getElementById("listContainer").innerHTML = text;
			}

			//uses the prior event to create a new event record

			function PriorEvent(){

				const selPost = $("#selPost").val();

				const actValue = LEvents[1][1];
				const contValue = LEvents[1][2];
				const actText = LEvents[1][3];
				
				setETime();
				
				LEvents.push([sqTime(datetimeValue), actValue, contValue, actText]);
				
				if(selPost==="Y"){
										
					//JQPost(actValue, contValue, datetimeValue);
					
				}

				resetAll();
				
			}

			//updates the contents of a record in the events table. 

			function UpdateEvent(id){

				$( "#pu" ).val( "U" );
				$( "#selP" ) . val( "Y" );
				$( "body" ).css( "background-color", "DarkRed" );
				
				origTime = LEvents[id][0];

				const formattedOrigTime = FixTime(origTime)

				$( "#selFT" ) . val(formattedOrigTime[1]);
				$( "#DateTime" ) . val(formattedOrigTime[0]);
				$( "#DateTime" ) . text(formattedOrigTime[2]);
				
				eid = id;

				console.log("origTime="+origTime+" eid="+eid)
				
				var q = "Update: "+formattedOrigTime[2]+" - "+LEvents[id][3];

				$("#pmEvent").val(id);
				$("#pmEvent").text(q);

				resetAll();

			}

            /*
			function jqUpdateEvent(oTime, nTime, act, cont){

				const postData = $.ajax(
				{	
					type: "POST",
					url: "./update/UpdateEvent.php",
					data: { origTime: oTime, newTime: nTime, newAct: act, newCont: cont },
					success: function() { 
						console.log("Updated: "+oTime);
					}
				}).fail(function(){
					alert("Fail");
				}).always(function(){
					clearForm()
				});
			}
            */

			function clearForm(){

				$("#pmEvent").empty();

				$("#pu"). text("");
				$("#pu"). val("");
				
				manualEventForm.clearDiv();

				setTime();
				
				resetAll();
			}

			

			function resetAll(){
				
				resetTime();
				
				resetLEvents();
				
				resetLMoods();
				
				resetbtn();
				
			}



			//USED IN FUNCTIONS: delEvent(l#1010) and delMood (l#1029)
            /*
			function JQDel(etime, tbl, index){

			$.post("./del/DelJQ.php",
				{
					v1: etime,
					c1: index,
					selTbl: tbl
				});
			}
            */
			//USED IN resetbtn(l#1419)
            /*
			function findLast(actid, contid){
				
				LEvents.sort();
				
				LEvents.reverse();
				
				ELen = LEvents.length;

				for (j = 0; j < ELen; j++) {
				
					if(LEvents[j][1]==actid){
					
						if(LEvents[j][2]==contid){
								
							var ESecs = Math.round((Date.now()-Date.parse(LEvents[j][0])) / 1000);
								
							var STime = ELTime(ESecs);

							let arrFL = [STime, ESecs];

							return(arrFL);
							
						}
					}
				}
				


                LUlen = lastuse[0].length;
            
                for (j = 0; j < LUlen; j++) {

                    if(lastuse[0][j]==actid){
                    
                        if(lastuse[1][j]==contid){
                        
                            var ESecs = Number(lastuse[2][j]);
                                
                            var STime = ELTime(ESecs);
                            
                            let arrFL = [STime, ESecs];

                            return(arrFL);
                            
                        }
                    }
                }
				
				let arrFL = ["N/A", 0];

				return(arrFL);
			}
            */

			//USED IN FUNCTION:  findLast 
			function ELTime(secs) {
				
				var days = secs / (60*60*24);
					
				if(days>=1){
					
					return Math.round(days) + "d";
					
				}else{
					
				var hrs = secs / (60*60);
						
				if(hrs>=1){
							
					return Math.round(hrs) + "h";
								
				}else{
							
				var mins = secs / 60;
								
				if(mins>=1){
									
					return Math.round(mins) + "m";
								
				}else{
								
					return secs + "s";
				}
				}
				}
			}

			function displayActDurs(){

				const activityDurationList = {};

				LEvents.sort();
				
				LEvents.reverse();
				
				ELen = LEvents.length;
				
				var minDate = Date.now()-(2*24*60*60*1000);
				
				text = 
					"<table class='durationSummary'>" +
						"<thead>" +
							"<th>Activity</th>" +
							"<th>Duration</th>" +
						"</thead>" +
						"<tbody>";
				
				for (i = 0; i < ELen; i++) {
				
					if(i==0){
						
						var eventLength = Date.now()-Date.parse(LEvents[i][0]);
						
					}else{
					
						eventLength = Date.parse(LEvents[i-1][0])-Date.parse(LEvents[i][0]);
					
					}
					
					//formatEventDuration(eventLength);
					
					if(Date.parse(LEvents[i][0]) > minDate){

						//arr1.push([LEvents[i][3], eventLength]);

						if(activityDurationList.hasOwnProperty(LEvents[i][3])==false){
							
							activityDurationList[LEvents[i][3]] = eventLength;

						} else {

							activityDurationList[LEvents[i][3]] += eventLength;

						}
					
					}
				
				}
				
				let sortArray = [];

				for (let activityName in activityDurationList) {
					sortArray.push([activityName, activityDurationList[activityName]]);
				}

				sortArray.sort(function(a, b){
					return b[1]-a[1];
				})

				let sortedActivityDurationList = {}

				sortArray.forEach(function(item){
					sortedActivityDurationList[item[0]]=item[1];
				});

				for (let activityName in sortedActivityDurationList) {
				
					text += "<tr><td>"+activityName+"</td><td>"+formatEventDuration(sortedActivityDurationList[activityName])+"</td></tr>";
						
				}
				
				text += "</tbody></table>";

				document.getElementById("listContainer").innerHTML = text;

			}
			
			function postAll(){

				ELen = LEvents.length;
				MLen = LMoods.length;

				for (var i=0; i<50; i++) {

					var tvar = LEvents[i][0];
					var act = LEvents[i][1];
					var cont = LEvents[i][2];
	
					JQPost(act, cont, tvar, i);
      
				}

				for (var i=0; i<50; i++) {

					var dtime = LMoods[i][0];
					var mood = LMoods[i][1];
	
					MPost(mood, dtime, i);
				}
				
				alert("Sync Complete")
			}

		</script>
	</div>
	</body>
</html>
























