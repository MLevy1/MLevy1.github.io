<!DOCTYPE html>
<html lang='en'>
	<head>
		<title>Events</title>

		<link href='https://fonts.googleapis.com/css?family=Homenaje' rel='stylesheet'>
        <style>
            :root {
                --page-bottom: calc(100vh - 150px);
            }

            *{
                padding: 0;
                margin: 0;
                font-family: 'Homenaje';
            }

            header {
                display: flex;
                flex-direction: row;
                justify-content: space-evenly;
                align-items: center;
                position: fixed;
                top: 0;
                left: 0;
                height: 50px;
                width: 100%;
                background-color: #9f9;
                color: #040;
                z-index: 100;
            }

            nav {
                position: fixed;
                top: 50px;
                left: 0;
                width: 100%;
                background-color: #333;
                color: #fff;
                z-index: 100;
            }

            a {
                display: block;
                text-decoration: none;
                color: white;
                padding: 10px;
            }

            a:hover {
                color: #050;
                background: silver;
            }

            a:active {
                color: black;
                background-color: white;
            }

            nav ul {
                display: flex;
                list-style-type: none;
                margin: 0;
                padding: 0;
            }

            nav ul li {
                cursor: pointer;
                flex: auto;
                text-align: center;
            }

            body {
                background: #232;
                border: white;
                font-family: 'Homenaje';
            }

            #main {
                position: fixed;
                top: 90px;
                left: 0;
                width: 100%;
                color: #fff;
                height: calc(100vh - 100px);
                overflow: auto;
            }

            button {
                font-family: 'Homenaje';
                background-color: #030;
                color: #9f9;
                font-size: 18px;
                width: 110px;
                height: 90px;
                font-weight: bold;
                float: center;
                border-radius: 6px;
                padding: 2px;
            }

            select {
                font-size: 20px;
                color: #ccc;
                background-color: black;
            }

            input {
                font-size: 20px;
                height: 55px;
                float: center;
            }

            h1 {
                font-size: 40px;
            }

            h2 {
                font-size: 25px;
            }

            th {
                font-size:20px;
            }

            td {
                font-size: 20px;
                vertical-align: center;
            }

            textarea {
                font-size: 20px;
            }

            table {
                border-spacing: 5px;
            }

            .slnk{

                font-size: 16px;
                width: 25px;
                background-color: greenyellow;
                color: darkslategrey;
                font-weight: bold;
                float: center;
                border-radius: 8px;
            }

            .link {
                width: 75px;
                height: 50px;
                background-color: lightgreen;
                color: black;
                font-size: 14px;
                font-weight: bold;
                border-radius: 10px;
            }

            .ebtn:active {
                background-color: orange;
                color: blue;
            }

            .dateinput {
                background-color: black;
            }

            .sectExpand {

                background-color: black;
                color: white;

            }

            table {

                width: 100%;

            }

            svg { 
                width: 100%;
            }

            .controlGrid {
                display: grid;
                grid-template-columns: repeat(7, 1fr);
                grid-template-rows: repeat(6, fr);
                justify-items: stretch;
                align-items: center;
                position: fixed;
                top: 50px;
                left: 0;
                width: 100%;
                background-color: #333;
                color: #fff;
                z-index: 100;
                list-style-type: none;
            }

            .controlGrid a, .controlGrid p, .controlGrid select {
                display: flex;
                padding: 0;
                height: 25px;
                justify-content: center;
                align-items: center;
            }

            .controlGrid select {
                width: 100%;
                text-align: center;
            }


            #lblEventTime {
                grid-column-start: 2;
                grid-column-end: 4;
            }

            #mainSection {
                top: 150px;
                bottom: var(--page-bottom);
                position: absolute;
                left: 0;
                width: 100%;
                color: #fff;
                height: calc(100vh - 300px);
                overflow: auto;
                margin-bottom: 150px;
            }

            #footer {
                top: var(--page-bottom);
                position: absolute;
                width: 100%;
                background-color: #333;
                overflow: scroll;
                color: lime;
            }

            #timeZoneLabel, #timeZoneSelectContainer {
                grid-column-start: 1;
                grid-column-end: 3;
            }

            #detailStartLabel, #detailStartSelectContainer {
                grid-column-start: 4;
                grid-column-end: 6;
            }

            #detailEndLabel, #detailEndSelectContainer {
                grid-column-start: 6;
                grid-column-end: 8;
            }

            .eventList {
                font-size: 16px;
            }

            .pageSettings {
                display: none;
            }

            .groupHeading {
                font-size: 30px;
                font-weight: bold;
                color: #aaa;
            }

            .btnGroup {
                display: flex;
                flex-wrap: wrap;
                list-style-type: none;
                gap: 5px;
            }

            .hidden {
                display: none;	
            }

            #moodIndicator {
                display: flex;
                padding: 0;
                height: 25px;
                justify-content: center;
                align-items: center;
                font-size: 20px;
            }

            .warn {
                background-color: red;
            }

            iframe {

                /*height: 25px;
                width: 100px; */
                
                height: 300px;
                width: 300px;

                /*overflow: hidden;*/
                border: none;

            }

            #actForm {
                display: flex;	
                flex-wrap: wrap;
                justify-content: space-between;
            }


            fieldset {

                display: flex;
                width: 100%;
                align-items: center;
                flex-wrap: wrap;
                margin: 0;
                padding: 5px;
                gap: 5px;

            }

            label {

                display: flex;
                width: 100px;
                align-items: center;

            }

            input[type="checkbox"] {

                height: 25px;
                margin: 5px;

            }

            #ActID {

                width: 10%;
                text-align: center;

            }

            #ActDesc {

                width: 50%;
                text-align: center;

            }

            form h2 {
                width: 100%;
            }

            .modmenu * {
                background-color: #aaa;
                color: #333;
                list-style-type: none;
                width: 100%;
                text-align: center;
                font-weight: bold;
            }

            .modmenu {
                display: flex;
                flex-direction: row;
            }

            .modmenu a {
                padding-top: 5px;
                padding-bottom: 5px;
                padding-right: 0;
                padding-left: 0;
            }


            #updateForm #ActID, #UCode {
                width: 40%;
            }

            .modform p {
                display: flex;
            }

            .clrBox {
                width: 25px;
            }

            @media screen and (max-width: 500px) 
                {
                    .groupHeading {
                    
                        font-size: 16px;
                    }
                    
                    button {
                        width: 75px;
                        height: 75px;
                        font-size: 12px;
                    }
                    
                    .eventList td, .eventList th {
                        font-size: 10px;
                    }
                    
                    .slnk {
                        font-size: 8px;
                        width: 15px;
                        height: 15px;
                    }
            }
        </style>
		<script src="https://code.jquery.com/jquery-3.6.3.min.js" integrity="sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=" crossorigin="anonymous"></script>

        <script>
            //Manual Event Scripts

            const manualEventForm = {
  
  selectedPCode: '',
  selectedSubProj: '',
  clearDiv: function () {

      const listDiv = document.getElementById("eventBtnListContainer")

      while(listDiv.firstChild){

          listDiv.removeChild(listDiv.firstChild)

      }

  },
  btnLPU: function() {

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLPU){

          if(objLPU[i].Active=="Y" && objLPU[i].PUCodeDesc!="Admin" && objLPU[i].PUCodeDesc!="Meeting") {
              
              let eventBtnContainer = document.createElement("li")
              
              let eventBtnText = objLPU[i].PUCodeDesc

              let linkTarget = i

              eventBtnText = document.createTextNode(eventBtnText)
              
              let eventLink = document.createElement("a")
              
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.btnProj(linkTarget)
                  this.selectedPCode = linkTarget
                  
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
          }
  
      }

  },
  btnProj: function(selectedPCode) {

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLProj) {

          if(objLProj[i].ProfileCode==selectedPCode && objLProj[i].ProjStatus!="Closed"){

              let eventBtnContainer = document.createElement("li");

              let eventBtnText = objLProj[i].ProjDesc;

              let linkTarget = i
              
              eventBtnText = document.createTextNode(eventBtnText)
          
              let eventLink = document.createElement("a")
          
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.btnSubProj(linkTarget)
                  
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
  

          }

      }

  },
  btnSubProj: function(selectedProj){

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLCont) {

          if(objLCont[i].ProjID==selectedProj && objLCont[i].Active!="N"){

              let eventBtnContainer = document.createElement("li");

              let eventBtnText = objLCont[i].ProjID + ": " + objLCont[i].ContDesc;

              let linkTarget = i
              
              eventBtnText = document.createTextNode(eventBtnText)
          
              let eventLink = document.createElement("a")
          
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.btnAct(this.selectedPCode)
                  this.selectedSubProj = linkTarget;
                  
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
  

          }

      }

  },
  btnAct: function(selectedPCode){

      this.clearDiv()

      const eventBtnListContainer = document.getElementById("eventBtnListContainer")

      for (i in objLAct) {

          if(objLAct[i].PCode.includes(selectedPCode) && objLAct[i].Status!="Inactive"){

              let eventBtnContainer = document.createElement("li");

              let eventBtnText = objLAct[i].ActDesc

              let linkTarget = i
              
              eventBtnText = document.createTextNode(eventBtnText)
          
              let eventLink = document.createElement("a")
          
              eventLink.href = "#"
              
              eventLink.addEventListener('click', () => { 
              
                  this.addEvent(linkTarget, this.selectedSubProj)
                                      
              });
              
              eventLink.appendChild(eventBtnText)
                          
              eventBtnContainer.appendChild(eventLink)
          
              eventBtnListContainer.appendChild(eventBtnContainer)
  

          }

      }

  },
  addEvent: function(act, subproj) {

      this.clearDiv()

      const updateIndicator = document.getElementById("pu").value

      const postsIndicator = document.getElementById("selPost").value 

      //sets the time of the event being entered (determines if event occurs in the past )
      setETime();
          

      if(updateIndicator!="U"){

          const startTime = sqTime(datetimeValue)

          objLEvents[startTime] = {
              "startTime": millisecTime, 
              "act": act, 
              "subProj": subproj
          }
      
          LEvents.push([sqTime(datetimeValue), act, subproj, objLAct[act].ActDesc]);

          if(postsIndicator==="Y"){
              
              JQPost(act, subproj, sqTime(datetimeValue));

          }
              
          resetAll();

      } else {

          //important to remember that ANY event being updated HAS to be a "Past Event"
   
          LEvents[eid]=([sqTime(datetimeValue), act, subproj, objLAct[act].ActDesc]);

          objLEvents[LEvents[eid][0]] = {"startTime": millisecTime, "act": act, "subProj": subproj}

          if(postsIndicator==="Y"){

              jqUpdateEvent(origTime, sqTime(datetimeValue), act, subproj);

          }
          
          resetAll();

      }

      $("#pmEvent").empty();

      $("#pu").text("");

      $("#pu").val("");

      resetAll();

      this.clearDiv()

  }
          
}
        </script>

        <script>
                //Time Scripts

                function TimeArr(){
	
	var MTime = new Date();
	
	MTime = MTime.getTime();
	
	var vTZ = $( "#selTZ" ).val();
	
	var AM = parseInt(vTZ)*60*60*1000;
	
	MTime = MTime+AM;
	
	var m =  new Date(MTime);
	
	var millisecs = m.getTime();
	
	var Y = m.getFullYear();
	
	var M = m.getMonth()+1;
	
	var D = m.getDate();
	
	var H = m.getHours();
	
	var Mn = m.getMinutes();
	
	var Sec = m.getSeconds();
	
	M = zerofix(M);
	
	Mn = zerofix(Mn);

	if(H<0){
	
		H=24+H;
	
		D=(D-1);
	
	}
	
	H = zerofix(H);
	
	if(H>=24){
	
		H=(H-24);

		D=(D+1);
		
	}
	
	if(H<12){
	
		var AP = "AM";
		
	}else{
	
		AP = "PM";
		
	}
	
	if(H==0){
	
		var hr = 12;
		
	}else if(H<13){
	
		hr = H;
		
	}else{
	
		hr = H-12;
		
	}
	
	D = zerofix(D);
	
	Sec = zerofix(Sec);
	
	let timeValue= Y+'-'+M +'-'+ D +'T'+ H +':'+ Mn + ':' + Sec;
	
	let visibleTime = M +'-'+ D +' '+ hr +':'+ Mn + ':' + Sec + ' ' + AP;
	
	let arrTime = [timeValue, millisecs, visibleTime];

	return arrTime;
}

function resetTime(){

	//selP shows if the event occurs in the past or not

	const P = $("#selP").val();
				
	if(P!="Y"){
		
		//if the event does not occur in the past, then setTime is called, which sets everything back to default values as shown below.

		setTime();
				
	}
}

function setTime(){
	
	var T = TimeArr();
	
	$( "#selP" ) . val("N");
	
	$( "#DateTime" ) . val(T[0]);
	
	$( "#DateTime" ) . text(T[2]);
	
	$("body").css("background-color", defaultBGColor);
}



function FixTime(CTime){

	var Y = CTime.substring(0,4);
	var M = CTime.substring(5,7);
	var D = CTime.substring(8,10);
	var H = CTime.substring(11,13);
	var Mn = CTime.substring(14,16);
	let S = CTime.substring(17);
	
	var m = new Date(Y,M-1,D,H,Mn,S);
	
	//M = zerofix(M);
	
	var D = m.getDate();
	
	D = zerofix(D);
	
	var H = m.getHours();

	H = zerofix(H);
	
	var Mn = m.getMinutes();
	
	Mn = zerofix(Mn);

	if(H<12){
	
		var AP = "AM";
		
	}else{
	
		AP = "PM";
		
	}
	
	if(H===0){
	
		var hr = 12;
		
	}else if(H<13){
	
		hr = H;
		
	}else{
	
		hr = H-12;
		
	}
	
	var millisecs = m.getTime();

	var timeValue = Y+'-'+M +'-'+ D +'T'+ H +':'+ Mn + ':' + S;
	
	var visibleTime = M +'-'+ D +' '+ hr +':'+ Mn + ':' + S + ' ' + AP;
	
	var SvrTime = Y+'-'+M +'-'+ D +' '+ H +':'+ Mn + ':' + S;
	
	let dispDate = M+'-'+D;
	
	let dispTime = hr +':'+ Mn + ':' + S + ' ' + AP;

	var arrTime = [timeValue, millisecs, visibleTime, SvrTime, dispDate, dispTime];

	return arrTime;

}



function AddTime(min){
	$( "#selP" ) . val("Y");
	
	$("body").css("background-color", "DarkRed");

	var CTime = $( "#DateTime" ) . val();
	
	var Y = CTime.substring(0,4);
	var M = CTime.substring(5,7);
	var D = CTime.substring(8,10);
	var H = CTime.substring(11,13);
	var Mn = CTime.substring(14,16);
	var S = CTime.substring(17,19)
	
	var m = new Date(Y,M-1,D,H,Mn,S);
	
	var OM = m.getMinutes();
	
	var NM = OM + min;
	
	m.setMinutes(NM);
	
	var Y = m.getFullYear();
	var M = m.getMonth();
	
	M++;
	
	if(M===0){
		
		M=12;
		Y=(Y-1);
		
	}
	
	M = zerofix(M);
	
	var D = m.getDate();
	
	D = zerofix(D);
	
	var H = m.getHours();

	H = zerofix(H);
	
	var Mn = m.getMinutes();
	
	Mn = zerofix(Mn);

	if(H<12){
	
		var AP = "AM";
		
	}else{
	
		AP = "PM";
		
	}
	
	if(H===0){
	
		var hr = 12;
		
	}else if(H<13){
	
		hr = H;
		
	}else{
	
		hr = H-12;
		
	}
	
	var millisecs = m.getTime();

	var timeValue = Y+'-'+M +'-'+ D +'T'+ H +':'+ Mn + ':' + S;
	
	var visibleTime = M +'-'+ D +' '+ hr +':'+ Mn + ':' + S + ' ' + AP;
	
	$( "#selFT" ) . val(millisecs);
	$( "#DateTime" ) . val(timeValue);
	$( "#DateTime" ) . text(visibleTime);	
}

//etmv is a time value formatted as YYYY-MM-DDTHH:MM:SS.  This functions removes the T and makes it SQL readable.
function sqTime(etmv){

	var p1 = etmv.substr(0,10);
			
	var p2 = etmv.substr(11);
			
	var etmv1 = (p1 + " " + p2);

	return etmv1;
}

//adds a zero to the beginning of a number. needed for seconds and mins in all time functions
function zerofix(timeval){

	if(timeval<10){

		ntimeval = "0"+timeval;
	
	}else{
	
	ntimeval = timeval;
	
	}
	
	return ntimeval;
}

function setETime(){

	var T = TimeArr();
	
	var PE = $( "#selP" ) . val();
	
	if(PE=="Y"){
	
		datetimeValue = $( "#DateTime" ) . val();
		datetimeText = $( "#DateTime" ) . text();
		millisecTime = $( "#selFT" ) . val();
		
	}else{
	
		datetimeValue = T[0];
		millisecTime = T[1];
		datetimeText = T[2];
	}
}

function formatEventDuration(eventLength){
					
	eventLengthHours = eventLength/(1000*60*60);
	
	eventLengthHoursRounded = Math.floor(eventLengthHours);
	
	eventLengthMins = (eventLengthHours-eventLengthHoursRounded)*60;
	
	eventLengthMinsRounded = Math.floor(eventLengthMins);
	
	eventLengthMinsRounded = zerofix(eventLengthMinsRounded);
	
	eventLengthSecsRounded = Math.floor((eventLengthMins-eventLengthMinsRounded)*60);
	
	eventLengthSecsRounded = zerofix(eventLengthSecsRounded);
	
	eventDuration = eventLengthHoursRounded + ":" + eventLengthMinsRounded + ":" + eventLengthSecsRounded;

	return eventDuration;
	
}

        </script>
		<script>
            //Modify Forms
            const modifyForms = {

cancelBtn: function(){
    const cancelBtn = document.createElement("input");
    cancelBtn.type = "button";
    cancelBtn.value = "Exit";
    cancelBtn.onclick = () => {
        modifyForms.clearDiv()
        document.getElementById("modifyFormResult").classList.add('hidden');
    };

    return cancelBtn
},
clearDiv: function () {

    const listDiv = document.getElementById("modifyFormContainer")

    while(listDiv.firstChild){

        listDiv.removeChild(listDiv.firstChild)

    }

},
createCell: function(cellText){
    td = document.createElement("td")
    td. appendChild(document. createTextNode(cellText))
    
    return td
},
addUpdateButtons: function(tbl, modForm){
    
    let rows = tbl.rows

    for (let i = 0; i < rows.length; i++) {
        let row = rows[i]
        let curr = rows[i].cells[0].innerHTML
        let cell = row.insertCell(-1)
        
        a = document.createElement("a")
        a.href="#"
        a.addEventListener('click', () => { 
            switch(modForm) {

                case "act":
                    modifyForms.displayModifyActForm(curr)
                    break
                case "proj":
                    modifyForms.displayModifyProjForm(curr)
                    break
                case "sub-proj":
                    modifyForms.displayModifySubProjForm(curr)
                    break
                case "pu":
                    modifyForms.displayModifyPUForm(curr)	
                    break
            }
        });
        a.appendChild(document.createTextNode("U"))
        cell.appendChild(a)
    }
},
addColorBox: function(tbl){
    
    let rows = tbl.rows

    for (let i = 0; i < rows.length; i++) {
        let row = rows[i]
        let clr = rows[i].cells[3].innerHTML
        let cell = row.insertCell(-1)
        cell.style.backgroundColor = clr
        cell.classList.add("clrBox")
    }
},
displayList: function(obj){

    const tbl = document.createElement("table")
    tbl.id = "tblModForm"
    const thead = document.createElement("thead")
    
    const heads = Object.keys((obj[Object.keys(obj)[1]]))

    heads.forEach(element => {
        let th = document.createElement("th")

        th.appendChild(document.createTextNode(element))
        thead.appendChild(th)
    });

    tbl.appendChild(thead)
    
    const tbody = document.createElement("tbody")

    for (i in obj){

        let tr = document.createElement("tr")

        heads.forEach(h => {

            let inp = obj[i][h]

            let td = modifyForms.createCell(inp)	

            tr.appendChild(td)

        })
                    
        tbody.appendChild(tr)
    
    }

    tbl.appendChild(tbody)

    return tbl

},
displayActForm: function(){

    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLAct)

    modifyForms.addUpdateButtons(tbl, "act")

    sd = document.createElement("div")
    
    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newActBtn = document.createElement("input");
        newActBtn.id = "add";
        newActBtn.type = "button";
        newActBtn.value = "Add New";
        newActBtn.onclick = () => {
            
            modifyForms.displayNewActForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newActBtn)
        
    d.appendChild(tbl)

},
displayProjForm: function(){

    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLProj)

    modifyForms.addUpdateButtons(tbl, "proj")

    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newProjBtn = document.createElement("input");
        newProjBtn.id = "add";
        newProjBtn.type = "button";
        newProjBtn.value = "Add New";
        newProjBtn.onclick = () => {
            
            modifyForms.displayNewProjForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newProjBtn)
        
    d.appendChild(tbl)

},
displaySubActForm: function(){
    
    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLCont)

    modifyForms.addUpdateButtons(tbl, "sub-proj")

    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newSPBtn = document.createElement("input");
        newSPBtn.id = "add";
        newSPBtn.type = "button";
        newSPBtn.value = "Add New";
        newSPBtn.onclick = () => {
            modifyForms.displayNewSubProjForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newSPBtn)
        
    d.appendChild(tbl)

},
displayPUForm: function(){

    modifyForms.clearDiv()

    const tbl = modifyForms.displayList(objLPU)

    modifyForms.addColorBox(tbl)

    modifyForms.addUpdateButtons(tbl, "pu")

    d = document.getElementById("modifyFormContainer")
    
    const cancelBtn = modifyForms.cancelBtn()

    const newPUBtn = document.createElement("input");
        newPUBtn.id = "add";
        newPUBtn.type = "button";
        newPUBtn.value = "Add New";
        newPUBtn.onclick = () => {
            d.remove()
            modifyForms.displayNewPUForm()
        };

    d.appendChild(cancelBtn)

    d.appendChild(newPUBtn)
        
    d.appendChild(tbl)
},
displayModifyActForm: function(act) {

    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");

    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){
        
    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./update/updateAct.php";
            formElement.target = "modifyFormResult";
            formElement.id = "updateForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("Update Activity"));
            formElement.appendChild(formTitle);
            
        const inputElementActId = document.createElement("input");
            inputElementActId.name = "ActID"
            inputElementActId.id = "ActID"
            inputElementActId.classList.add("modform")
            inputElementActId.value = act
            inputElementActId.readOnly = true
                        
            formElement.appendChild(inputElementActId);
                
        const inputElementActivityName = document.createElement("input")
            inputElementActivityName.type = "text"
            inputElementActivityName.name = "ActDesc"
            inputElementActivityName.value = objLAct[act].ActDesc
            inputElementActivityName.id = "ActDesc"
            formElement.appendChild (inputElementActivityName)
                
        const inputElementUseCode = document.createElement("select");
            inputElementUseCode.name = "UCode";
            inputElementUseCode.id = "UCode";
            inputElementUseCode.options[0] = new Option("Select a Use Code", "");
                
            for(i in objLPU){
                inputElementUseCode . options [inputElementUseCode.options.length] = new Option (objLPU[i].PUCodeDesc, i);
            }
            
            inputElementUseCode.value = objLAct[act].UCode
            
            formElement.appendChild (inputElementUseCode);
        
        const inputElementProfileCode = document.createElement("input");
            inputElementProfileCode.type = "text"
            inputElementProfileCode.name = "PCode"
            inputElementProfileCode.value = objLAct[act].PCode
            inputElementProfileCode.id = "PCode"
            formElement.appendChild (inputElementProfileCode)
        
        const inputElementActivityStatus = document.createElement("input");
            inputElementActivityStatus.type = "text";
            inputElementActivityStatus.name = "Status";
            inputElementActivityStatus.value = objLAct[act].Status
            inputElementActivityStatus.id = "Status";
            formElement.appendChild ( inputElementActivityStatus );
            
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            objLAct[document.getElementById("ActID").value] = {ActID: document.getElementById("ActID").value, ActDesc: document.getElementById("ActDesc").value, PCode: document.getElementById("PCode").value, Status: document.getElementById("Status").value, UCode: document.getElementById("UCode").value }
            
        })
    

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	
},
displayNewActForm: function(){
    
    modifyForms.clearDiv()

    const actIds ={};
    
    for (a in objLAct) {
        actIds[a.substring(0, 1)] = Number(a.substring(1));
    
    }
    
    const modifyFormContainer = document.getElementById("modifyFormContainer");
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./add/addAct.php";
            formElement.target = "modifyFormResult";
            formElement.id = "actForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New Activity"));
            formElement.appendChild(formTitle);
            
        const inputElementUseCode = document.createElement("select");
            inputElementUseCode.name = "UCode";
            inputElementUseCode.placeholder = "Use Code";
            inputElementUseCode.id = "UCode";
            inputElementUseCode.options[0] = new Option("Select a Use Code", "");
                
        for(i in objLPU){
            inputElementUseCode.options[inputElementUseCode.options.length] = new Option(objLPU[i].PUCodeDesc, i);
        }

        inputElementUseCode.addEventListener('change', () => { 
            
            let lastNum;
            
            const pcode = inputElementUseCode.value;
            
            if(actIds[inputElementUseCode.value]){
            
                lastNum = (actIds[inputElementUseCode.value]);
            
            } else { 
            
                lastNum = 0;
            
            }
            
            let nextNum = lastNum+1;
            
            if( nextNum < 10  ) {
            
                nextNum = "0"+nextNum;
            
            } else {
            
                nextNum = String(nextNum);
            
            }
            
            nextNum = pcode+nextNum;
            
            const actIdInput  = document.getElementById("ActID");
            
            actIdInput.value=nextNum;
            
        });
        
        formElement. appendChild(inputElementUseCode);
                
        const inputElementActId = document.createElement("input");
            inputElementActId.type = "text";
            inputElementActId.name = "ActID";
            inputElementActId.id = "ActID";
            inputElementActId.placeholder = "ActID";
            formElement.appendChild(inputElementActId);
        
        const inputElementActivityName = document.createElement("input");
        
            inputElementActivityName.type = "text";
            inputElementActivityName.name = "ActDesc";
            inputElementActivityName.placeholder = "Activity Name";
            inputElementActivityName.id = "ActDesc";
            formElement.appendChild(inputElementActivityName);
        
        const fieldsetElement = document.createElement("fieldset");
        
        const legendElement = document.createElement("legend");
            legendElement.appendChild(document.createTextNode("Profile Codes"));
            fieldsetElement.appendChild(legendElement);

        for(i in objLPU){
            let checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.id = "PCode-"+i;
                checkbox.name = "PCode[]";
                checkbox.value = i;
            let label = document.createElement("label");
                label.htmlFor = i;
                label.appendChild(document.createTextNode(objLPU[i].PUCodeDesc));
            
            label.appendChild(checkbox);
            fieldsetElement.appendChild(label);
        }
        
        formElement.appendChild(fieldsetElement);
                    
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
            formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            let cntCheckedBoxes = document.querySelectorAll('input[name="PCode[]"]:checked').length

            let varCode = "";

            for (i=0; i<cntCheckedBoxes; i++) {

                varCode += document.querySelectorAll('input[name="PCode[]"]:checked')[i].value;

            }

            objLAct[document.getElementById("ActID").value] = {ActID: document.getElementById("ActID").value, ActDesc: document.getElementById("ActDesc").value, PCode: varCode, Status: "Active", UCode: document.getElementById("UCode").value }
            //formElement.reset()

        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	
},
displayModifyProjForm: function(proj){
    
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./update/updateProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "projForm";
            
        const formTitle = document.createElement("h2")
            formTitle.appendChild(document.createTextNode("Update Project"))
            formElement.appendChild(formTitle)

        const inputElementProjId = document.createElement("input")
            inputElementProjId.type = "text"	
            inputElementProjId.name = "ProjID"
            inputElementProjId.id = "ProjID"
            inputElementProjId.value = objLProj[proj].ProjID
            inputElementProjId.readOnly = true
            
        formElement.appendChild(inputElementProjId);
        
        const inputElementProjName = document.createElement("input");
            inputElementProjName.type = "text";
            inputElementProjName.name = "ProjDesc";
            inputElementProjName.value = objLProj[proj].ProjDesc
            inputElementProjName.id = "ProjDesc";
            formElement.appendChild(inputElementProjName);


        const inputElementProjStatus = document.createElement("input");
            inputElementProjStatus.type = "text";
            inputElementProjStatus.name = "ProjStatus";
            inputElementProjStatus.value = objLProj[proj].ProjStatus
            inputElementProjStatus.id = "ProjStatus";
            formElement.appendChild(inputElementProjStatus);
            
        const inputElementProfileCode = document.createElement("select");
            inputElementProfileCode.name = "PCode";
            inputElementProfileCode.placeholder = "Profile Code";
            inputElementProfileCode.id = "PCode";
            inputElementProfileCode.options[0] = new Option("Select a Profile Code", "");
                
            for(i in objLPU){
                inputElementProfileCode.options[inputElementProfileCode.options.length] = new Option(objLPU[i].PUCodeDesc, i);
            }

            inputElementProfileCode.value = objLProj[proj].ProfileCode

            formElement.appendChild(inputElementProfileCode);
        
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);
            
        submitBtn.addEventListener("click", () => {

            objLProj[document.getElementById("ProjID").value] = {ProjID: document.getElementById("ProjID").value, ProjDesc: document.getElementById("ProjDesc").value, ProfileCode: document.getElementById("PCode").value, ProjStatus: document.getElementById("ProjStatus").value }

        })
    
        const cancelBtn = modifyForms.cancelBtn()
        
        formElement.appendChild(cancelBtn);
        
        modifyFormContainer.appendChild(formElement);
    }
    
},
displayNewProjForm: function(){

    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");

    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./add/addProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "projForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New Project"));
            formElement.appendChild(formTitle);

        const inputElementProjId = document.createElement("input");
            inputElementProjId.type = "text";
            inputElementProjId.name = "ProjID";
            inputElementProjId.id = "ProjID";
            inputElementProjId.placeholder = "ProjID";
        formElement.appendChild(inputElementProjId);
        
        const inputElementProjName = document.createElement("input");
            inputElementProjName.type = "text";
            inputElementProjName.name = "ProjDesc";
            inputElementProjName.placeholder = "Project Name";
            inputElementProjName.id = "ProjDesc";
        formElement.appendChild(inputElementProjName);
            
        const inputElementProfileCode = document.createElement("select");
            inputElementProfileCode.name = "PCode";
            inputElementProfileCode.placeholder = "Profile Code";
            inputElementProfileCode.id = "PCode";
            inputElementProfileCode.options[0] = new Option("Select a Profile Code", "");
                
            for(i in objLPU){
                
                inputElementProfileCode.options[inputElementProfileCode.options.length] = new Option(objLPU[i].PUCodeDesc, i);
            }
            
        formElement.appendChild(inputElementProfileCode);
        
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);
        
        submitBtn.addEventListener("click", () => {

            objLProj[document.getElementById("ProjID").value] = {ProjID: document.getElementById("ProjID").value, ProjDesc: document.getElementById("ProjDesc").value, ProfileCode: document.getElementById("PCode").value, ProjStatus: "Active" }
            
            formElement.reset()
        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }
    
},
displayModifySubProjForm: function(sp){

    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./update/updateSubProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "newSubProjForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("Update Sub Project"));
            formElement.appendChild(formTitle);

        const inputElementSubProjId = document.createElement("input")
            inputElementSubProjId.type = "text"
            inputElementSubProjId.name = "ContID"
            inputElementSubProjId.id = "ContID"
            inputElementSubProjId.value = objLCont[sp].ContID
            inputElementSubProjId.readOnly = true
        
        formElement.appendChild(inputElementSubProjId)
        
            const inputElementProjId = document.createElement("input")
            inputElementProjId.type = "text"
            inputElementProjId.name = "ProjID"
            inputElementProjId.id = "ProjID"
            inputElementProjId.value = objLCont[sp].ProjID
            inputElementProjId.readOnly = true
        
        formElement.appendChild(inputElementProjId)

        const inputElementSubProjName = document.createElement("input");
            inputElementSubProjName.type = "text";
            inputElementSubProjName.name = "ContDesc";
            inputElementSubProjName.value = objLCont[sp].ContDesc
            inputElementSubProjName.id = "ContDesc";
        formElement.appendChild(inputElementSubProjName);
            
        const inputElementActive = document.createElement("input");
            inputElementActive.type = "text";
            inputElementActive.name = "Active";
            inputElementActive.value = objLCont[sp].Active
            inputElementActive.id = "Active";
        formElement.appendChild(inputElementActive);

        const submitBtn = document.createElement("input");
            submitBtn.id = "btnSubmit";
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            objLCont[document.getElementById("ContID").value] = {ContID: document.getElementById("ContID"), ContDesc: document.getElementById("ContDesc").value, ProjID: document.getElementById("ProjID").value, Active: "Active" }

        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	
    
},
displayNewSubProjForm: function(){
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./add/addSubProj.php";
            formElement.target = "modifyFormResult";
            formElement.id = "newSubProjForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New Sub Project"));
            formElement.appendChild(formTitle);

        const inputElementProjId = document.createElement("select");
            inputElementProjId.name = "ProjID";
            inputElementProjId.id = "ProjID";
            inputElementProjId.options[0] = new Option("Select a Project", "");
                
            for(i in objLProj){
                if(objLProj[i].ProjStatus!="Closed"){
                    inputElementProjId.options[inputElementProjId.options.length] = new Option(objLProj[i].ProjDesc, i);
                }
            }
            
            formElement.appendChild(inputElementProjId);

        const inputElementSubProjId = document.createElement("input");
            inputElementSubProjId.type = "text";
            inputElementSubProjId.name = "ContID";
            inputElementSubProjId.id = "ContID";
            inputElementSubProjId.placeholder = "Sub-Proj ID";
            formElement.appendChild(inputElementSubProjId);
        
        const inputElementSubProjName = document.createElement("input");
            inputElementSubProjName.type = "text";
            inputElementSubProjName.name = "ContDesc";
            inputElementSubProjName.placeholder = "Sub Project Name";
            inputElementSubProjName.id = "ContDesc";
            formElement.appendChild(inputElementSubProjName);
                    
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
            formElement.appendChild(submitBtn);

        
        submitBtn.addEventListener("click", () => {

            objLCont[document.getElementById("ContID").value] = {ContID: document.getElementById("ContID"), ContDesc: document.getElementById("ContDesc").value, ProjID: document.getElementById("ProjID").value, Active: "Active" }

            formElement.reset()

        })
    
        

        const cancelBtn = modifyForms.cancelBtn()
        
        formElement.appendChild(cancelBtn);
                
        modifyFormContainer.appendChild(formElement);
    }	

},
displayModifyPUForm: function(pu){
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./update/updatePU.php";
            formElement.target = "modifyFormResult";
            formElement.id = "modifyPUForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("Update PU Code"));
            formElement.appendChild(formTitle);

        const inputElementPUCode = document.createElement("input");
            inputElementPUCode.type = "text"
            inputElementPUCode.name = "PUCode";
            inputElementPUCode.id = "PUCode";
            inputElementPUCode.classList.add("modform")
            inputElementPUCode.value = objLPU[pu].PUCode
            inputElementPUCode.readOnly = true


        formElement.appendChild(inputElementPUCode);
        
        const inputElementPUCodeDesc = document.createElement("input");
            inputElementPUCodeDesc.type = "text";
            inputElementPUCodeDesc.name = "PUCodeDesc";
            inputElementPUCodeDesc.id = "PUCodeDesc";
            inputElementPUCodeDesc.value = objLPU[pu].PUCodeDesc
        
        formElement.appendChild(inputElementPUCodeDesc);

        const inputElementColor = document.createElement("input");
            inputElementColor.type = "color";
            inputElementColor.name = "Color";
            inputElementColor.value = objLPU[pu].Color
            inputElementColor.id = "Color";
        formElement.appendChild(inputElementColor);

        const inputElementActive = document.createElement("select");
            inputElementActive.name = "Active";
            inputElementActive.value = objLPU[pu].Active
            inputElementActive.id = "Active";
            inputElementActive.options[0] = new Option("Y");
            inputElementActive.options[1] = new Option("N");

        formElement.appendChild(inputElementActive);
            
        const submitBtn = document.createElement("input");
            submitBtn.id = "btnSubmit";
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
        formElement.appendChild(submitBtn);

        submitBtn.addEventListener("click", () => {

            objLCont[document.getElementById("PUCode").value] = {PUCode: document.getElementById("PUCode"), PUCodeDesc: document.getElementById("PUCodeDesc").value, Color: document.getElementById("Color").value }

            formElement.reset()

        })

        const cancelBtn = modifyForms.cancelBtn()

        formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }	

},
displayNewPUForm: function(){
    modifyForms.clearDiv()

    const modifyFormContainer = document.getElementById("modifyFormContainer");
    
    const modifyFormResult = document.getElementById("modifyFormResult");

    if(document.getElementById("modifyFormContainer").innerHTML!=""){

    } else {

        modifyFormResult.classList.remove("hidden");
    
        const formElement = document.createElement("form");
            formElement.method = "post";
            formElement.action = "./add/addPU.php";
            formElement.target = "modifyFormResult";
            formElement.id = "addPUForm";
            
        const formTitle = document.createElement("h2");
            formTitle.appendChild(document.createTextNode("New PU Code"));
            formElement.appendChild(formTitle);

        const inputElementPUCode = document.createElement("input");
            inputElementPUCode.type = "text";
            inputElementPUCode.name = "PUCode";
            inputElementPUCode.id = "PUCode";
            inputElementPUCode.placeholder = "PU Code";
        formElement.appendChild(inputElementPUCode);
        
        const inputElementPUCodeDesc = document.createElement("input");
            inputElementPUCodeDesc.type = "text";
            inputElementPUCodeDesc.name = "PUCodeDesc";
            inputElementPUCodeDesc.placeholder = "PU Code Description";
            inputElementPUCodeDesc.id = "PUCodeDesc";
        formElement.appendChild(inputElementPUCodeDesc);
            
        const inputElementColor = document.createElement("input");
            inputElementColor.type = "text";
            inputElementColor.name = "Color";
            inputElementColor.placeholder = "Color";
            inputElementColor.id = "Color";
            formElement.appendChild(inputElementColor);
        
        const submitBtn = document.createElement("input");
            submitBtn.type = "submit";
            submitBtn.value = "Submit";
            formElement.appendChild(submitBtn);

            const cancelBtn = modifyForms.cancelBtn()

            formElement.appendChild(cancelBtn);

        modifyFormContainer.appendChild(formElement);
    }
}
}
        </script>
		<script>
            //modifyMenu

            const addMenuItem = (menu, menuItem, clickHandler = () =>void(0)) => {

const linkMenuContainer = document.createElement("li");

const linkMenu = document.createElement("a");
linkMenu.href = "#";
linkMenu.addEventListener('click', () => { 

    menu.remove();
    clickHandler();
    
});

linkMenu.appendChild(document.createTextNode(menuItem));
            
linkMenuContainer.appendChild(linkMenu);

menu.appendChild(linkMenuContainer);

}

const displayModifyMenu = () => {

const modifyFormContainer = document.getElementById("modifyFormContainer");
    
if(document.getElementById("modifyFormContainer").innerHTML!=""){

} else {

    const menuContainer = document.createElement("ul");

    menuContainer.classList.add("modmenu");
    
    //Activities
    
    addMenuItem(menuContainer, "Activities", modifyForms.displayActForm);
    
    //Projects

    addMenuItem(menuContainer, "Projects", modifyForms.displayProjForm);
    
    //Sub-Projects(Cont IDs)

    addMenuItem(menuContainer, "Sub-Projects", modifyForms.displaySubActForm);
    
    addMenuItem(menuContainer, "PU Codes", modifyForms.displayPUForm);

    //exit menu

    addMenuItem(menuContainer, "Exit");
    
    modifyFormContainer.appendChild(menuContainer);
}
}
        </script>
		<script>
            //Display Events
            function displayLEvents(){

resetSVG('svgEventChart')

LEvents.sort();

LEvents.reverse();

ELen = LEvents.length;

let selMinDate = $("#selMinDate").val();

var minDate = Date.now()-(selMinDate*24*60*60*1000);

let selMaxDate = $("#selMaxDate").val();

let maxDate = Date.now()-(selMaxDate*24*60*60*1000);

text = "<table class='eventList' width=100%>"

text += "<thead>";

text += "<th colspan=3></th><th>Date</th><th>Time</th><th>Act</th><th>Cont</th><th>Dur</th>";

text += "</thead><tbody>";

for (i = 0; i < ELen; i++) {

    if(i==0){
        
        var eventLength = Date.now()-Date.parse(LEvents[i][0]);
        
    }else{
    
        eventLength = Date.parse(LEvents[i-1][0])-Date.parse(LEvents[i][0]);

    }
    
    formatEventDuration(eventLength);
    
    if(i>0){
    
        var boxStart = svgboxstartxcoord(Date.parse(LEvents[i-1][0]));
        
        
    }else{
    
        var boxStart = svgboxstartxcoord(Date.parse(LEvents[i][0]));

    }
    
    var boxId = "svgEventChart";
    var boxStartX = svgboxstartxcoord(Date.parse(LEvents[i][0]));
    var boxWidth = (eventLength / (24*60*60*1000))*svgWidthNum;
    var boxFill = findActivityColor(LEvents[i][1]);

    if(boxStartX<0){
    
        if(boxStartX>0){
        
            drawbox(boxId, 0, boxStart, boxFill);
        
        }
    
    }
    
    if(boxWidth>0){
    
        drawbox(boxId, boxStartX, boxWidth, boxFill);

    }

    //end eventDuration calc
    
    let arr_disp_time = FixTime(LEvents[i][0]);
    
    if(Date.parse(LEvents[i][0]) > minDate && Date.parse(LEvents[i][0]) <= maxDate){
    
    text += "<tr><td>" +
    
    "<input type=button  value=+ class=slnk onclick='JQPost(`"+ LEvents[i][1] + "`,`" + LEvents[i][2] + "`,`" + LEvents[i][0] + "`,`" + i+"`)'/>" + 
    
    "</td><td>" 
    
    + 
    
    "<input type=button value=- class=slnk onclick='delEvent("+ i +")' />" 
    
    + 
    
    "</td><td>" 
    
    + 
    
    "<input type=button class=slnk value=U onclick='UpdateEvent(`"+ i + "`)' />"
    
    +
    
    "</td><td>" 
    
    + 
    
        arr_disp_time[4] + 
    "</td><td>" + 
        arr_disp_time[5] + 
    "</td><td>" + 
        LEvents[i][3] +
    "</td><td>" + 
        LEvents[i][2] + 
    "</td><td>" + 
        eventDuration + 
    "</td></tr>";

    }

}
text += "</tbody>";
text += "</table>";

document.getElementById("eventListContainer").innerHTML = text;

svgtext('svgEventChart');
displayActDurs();

}
        </script>
		<script>
            //local event buttons
            function localEventButton(act, cont, btnName, list, warn){
				
                //let arrElapsedTime = findLast(act, cont);
                
                //let elapsedTime = arrElapsedTime[0];
            
                //let warnTime = arrElapsedTime[1];
                
                var bc = $( "button" ).length;
                
                var btnid = "btn"+bc;
                
                let btn = document.createElement("button");
            
                btn.id = btnid;
            
                btn.setAttribute('data-act', act);
                
                btn.setAttribute('data-cont', cont);
                
                //btn.setAttribute('data-warn', warn);
            
                btn.classList.add("ebtn");
                
                let buttonNameTextNode = document.createTextNode(btnName);
                
                //let elapsedTimeTextNode = document.createTextNode(elapsedTime);
                
                btn.appendChild(buttonNameTextNode);
            
                //btn.appendChild(document.createElement("br"));
                
                //btn.appendChild(elapsedTimeTextNode);
                
                let li = document.createElement("li");
            
                li.appendChild(btn);
                
                let selectedList = document.getElementById(list);
            
                selectedList.appendChild(li);
               
                /*
                if (warn!="n"){
            
                    if(warn < warnTime){
            
                        $("#"+btnid).addClass('warn');
                    
                    }
                }
                */

                document.getElementById(btnid). addEventListener("click", function(){
                
                    btnJQL(act, cont, btnName);
            
                    resetbtn();
            
                });
            }
            
            
            function resetbtn(){
                        
                let buttons = document.getElementsByTagName('button');
            
                if(buttons){
            
                    for (i = 0; i < buttons.length; i++) {
            
                        let bact = buttons[i].getAttribute('data-act');
                    
                        let bcont = buttons[i].getAttribute('data-cont');
            
                        //let bwarn = buttons[i].getAttribute('data-warn');
            
                        //let arrelpTime = findLast(bact, bcont);
            
                        //let elpTime = arrelpTime[0];
                        
                        //let wTime = arrelpTime[1];
                        
                        //let newnode = document.createTextNode(elpTime);
                        
                        //buttons[i].replaceChild(newnode, buttons[i].childNodes[2]);
                        
                        /*  
                        if (bwarn!="n"){
            
                            if(bwarn < wTime){
                                
                                $("#"+buttons[i].id).addClass('warn');
                    
                            } else {
            
                                $("#"+buttons[i].id).removeClass('warn');
                            
                            }
                        
                        }
                        */
            
                    }
            
                }
            }
            
            function btnJQL(act, cont){
                                
                var U = $("#pu").val();
                
                var selPost = $("#selPost").val();
                
                setETime();
                
                if(U!="U"){
                    
                    const startTime = sqTime(datetimeValue)
            
                    objLEvents[startTime] = {
                        "startTime": millisecTime, 
                        "act": act, 
                        "subProj": cont
                    }
                
                    LEvents.push([sqTime(datetimeValue), act, cont, objLAct[act].ActDesc]);
            
                    if(selPost==="Y"){
                    
                        JQPost(act, cont, sqTime(datetimeValue));
                        
                    }
                    
                }else{
                
                    LEvents[eid]=([sqTime(datetimeValue), act, cont, objLAct[act].ActDesc]);
            
                objLEvents[LEvents[eid][0]] = { "startTime": millisecTime, "act": act, "subProj": cont }
                    
                    if(selPost==="Y"){
                    
                        jqUpdateEvent(origTime, sqTime(datetimeValue), act, cont);
                        
                    }
                    
                    $("#pmEvent").empty();
                    
                    $("#pu").text("");
                    
                    $("#pu").val("");
                
                }
                
                resetAll();
                
            }
            
            function JQPost(act, cont, dtime){
            
                $.post("./add/AddJQ.php",
                {
                    v1: act,
                    v2: cont,
                    v3: dtime,
                    SD: 'L',
                    selTbl: 'tblEvents'
                });
                
                resetAll();
            }
        </script>
		<script>
            //svg charts
            const objSVGEventChart = {

chartDiv: 0,
svgHeight: 50,
textColor: "white",
fontWeight: "bold",
displayTimes: [12, 3, 6, 9, 12, 3, 6, 9],
drawBox: function(id, x, w, f){

    var element = document.getElementById(id);

    var svg = document.createElementNS("http://www.w3.org/2000/svg", "rect");

    svg.setAttribute('x', x);
    svg.setAttribute('y', 0);
    svg.setAttribute('width', w);
    svg.setAttribute('height', this.svgHeight);
    svg.setAttribute('fill', f);
        
    svg.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
        
    element.appendChild(svg);


},
addText: function(id){

    const element = document.getElementById(id);

    const svgTextElement = document.createElementNS("http://www.w3.org/2000/svg", "text");

    svgTextElement.setAttribute('x', 0);
    svgTextElement.setAttribute('y', 27.5);
    svgTextElement.setAttribute('fill', 'white');
    svgTextElement.setAttribute('font-weight', 'bold');
    svgTextElement.setAttribute('font-size', 10);

    let textNode = document.createTextNode("12A");

    svgTextElement.appendChild(textNode);

    this.displayTimes.forEach(t => {

        let xCoord = t*120;

        const tspanElement = document.createElementNS("http://www.w3.org/2000/svg", "tspan");

        tspanElement.setAttribute('x', xCoord);
        tspanElement.setAttribute('y', 27.5);

        textNode = document.createTextNode(t);
        tspanElement.appendChild(textNode);
        svgTextElement.appendChild(ts);


    });
    
    svgTextElement.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");

    element.appendChild(svgTextElement);


},
getStartXCoord: function(startTime){

    let minTime = new Date();
    minTime.setHours(0, 0, 0, 0);
    
    var svgboxstartxcoord = ((startTime-minTime)/(24*60*60*1000))*svgWidthNum;
    
    return svgboxstartxcoord;
},
showChart: function(){

    if(i>0){
            
        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i-1][0]));
    
    }else{

        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i][0]));
    
    }

    //var boxId = "svgMoodChart";
    var boxStartX = svgboxstartxcoord(Date.parse(LMoods[i][0]));
    var boxWidth = (eventLength / (24*60*60*1000))*svgWidthNum;
    var boxFill = moodColor(LMoods[i][1]);
    
    if(boxStartX<0){
    
        if(boxStart>0){
        
            drawbox(boxId, 0, boxStart, boxFill);
        
        }
    
    }

    if(boxWidth>0){
    
        drawbox(Chartid, boxStartX, boxWidth, boxFill);

    }
}

}

//determines the color of each box on the event chart
//**CAN BE REPLACED BY objLPU[objAct[ActID].UCode].Color**
function findActivityColor(ActID){

var arrAct = LActs[0];

var ans = $.inArray(ActID, arrAct);

var PU = LActs[3][ans];

var arrLPU = LPU[0];

var an2 = $.inArray(PU, arrLPU);

var clr = LPU[2][an2];

return clr;
}

//sets the colors for the boxes in the mood chart

function moodColor(mood){

switch(Number(mood)){

    case -1:
        clr = "red";
        break;
    case -0.5:
        clr = "yellow";
        break;
    case 0:
        clr = "gray";
        break;
    case 0.5:
        clr = "yellowgreen";
        break;
    case 1:
        clr = "green";
        break;
}

return clr;
}

//determines the starting x coord of each colored box in the svg charts

function svgboxstartxcoord(time){

let minTime = new Date();
minTime.setHours(0, 0, 0, 0);

var svgboxstartxcoord = ((time-minTime)/(24*60*60*1000))*svgWidthNum;

return svgboxstartxcoord;
}

//Draws colored boxes in svg charts

function drawbox(id, x, w, f){

var element = document.getElementById(id);

var svg = document.createElementNS("http://www.w3.org/2000/svg", "rect");

svg.setAttribute('x', x);
svg.setAttribute('y', 0);
svg.setAttribute('width', w);
svg.setAttribute('height', 50);
svg.setAttribute('fill', f);
    
svg.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
    
element.appendChild(svg);
}

//Adds times to foreground of svg charts

function svgtext(id){

var element = document.getElementById(id);

var svg = document.createElementNS("http://www.w3.org/2000/svg", "text");

svg.setAttribute('x', 0);
svg.setAttribute('y', 20);
svg.setAttribute('fill', 'white');
svg.setAttribute('font-weight', 'bold');
svg.setAttribute('font-size', 10);

let spacing = svgWidthNum / 24

arrTimes = [12, "|", "|", 3, "|", "|", 6, "|", "|", 9, "|", "|", 12, "|", "|", 3, "|", "|", 6, "|", "|", 9, "|", "|", 12]



for (c = 0; c < arrTimes.length; c++){

    var xv = c*spacing;

    var ts = document.createElementNS("http://www.w3.org/2000/svg", "tspan");

    ts.setAttribute('x', xv);
    ts.setAttribute('y', 20);

    var txt = document.createTextNode(arrTimes[c]);
    ts.appendChild(txt);
    svg.appendChild(ts);

}

svg.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");

element.appendChild(svg);
}

function resetSVG(id){

id = "#"+id;

$(id).empty();
}



function displaySVGChart(){

if(i>0){
    
    var at = svgboxstartxcoord(Date.parse(LEvents[i-1][0]));
    
    
}else{

    var at = svgboxstartxcoord(Date.parse(LEvents[i][0]));

}

var ac0 = "svgEventChart";
var ac1 = svgboxstartxcoord(Date.parse(LEvents[i][0]));
var ac2 = (eventLength / (24*60*60*1000))*svgWidthNum;

var ac3 = findActivityColor(LEvents[i][1]);

if(ac1<0){

    if(at>0){
    
        drawbox(ac0, 0, at, ac3);
    
    }

}

if(ac1>0){

    drawbox(ac0, ac1, ac2, ac3);

}

}
        </script>
		<script>
            //mood
            function displayLMoods(){

resetSVG("svgMoodChart");

LMoods.sort();

LMoods.reverse();

MoodsLen = LMoods.length;

const minDate = Date.now()-86400000;

text = "<table class='eventList'>";

text += "<thead>";

    text += "<th colspan=2></th>";
    text += "<th>Date</th>";
    text += "<th>Time</th>";
    text += "<th>Mood</th>";
    text += "<th>Dur</th>";
    
text += "</thead>";

text += "</tbody>";
    
//start eventDuration calc (should be function)

for (i = 0; i < MoodsLen; i++) {

    if(i==0){
        
        var eventLength = Date.now()-Date.parse(LMoods[i][0]);
        
    }else{


        eventLength = Date.parse(LMoods[i-1][0])-Date.parse(LMoods[i][0]);
    
    }
    
    formatEventDuration(eventLength);
    
    if(i>0){
    
        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i-1][0]));
        
    }else{
    
        var boxStart = svgboxstartxcoord(Date.parse(LMoods[i][0]));
        
    }
    
    var boxId = "svgMoodChart";
    var boxStartX = svgboxstartxcoord(Date.parse(LMoods[i][0]));
    var boxWidth = (eventLength / (24*60*60*1000))*svgWidthNum;
    var boxFill = moodColor(LMoods[i][1]);
    
    if(boxStartX<0){
    
        if(boxStart>0){
        
            drawbox(boxId, 0, boxStart, boxFill);
        
        }
    
    }

    if(boxWidth>0){
    
        drawbox(boxId, boxStartX, boxWidth, boxFill);

    }
    
    //end eventDuration calc
    
    let arr_disp_time = FixTime(LMoods[i][0]);
    
    if(Date.parse(LMoods[i][0]) > minDate){
    
        text += 
            "<tr>" +
                "<td>" +
                    "<input type=button value=+ class=slnk onclick=MPost('"+ LMoods[i][1] + "','" + LMoods[i][0] + "','" + i+"') + />" +
                "</td><td>" +
                    "<input type=button  value=- class=slnk onclick=delMood("+i+") + />" +
                "</td><td>" +
                    arr_disp_time[4] +
                "</td><td>" +
                    arr_disp_time[5] +
                "</td><td>" +
                    LMoods[i][1] +
                "</td><td>" +
                    eventDuration +
                "</td>" +
            "</tr>";
            
    }
    
}

text += "</table>";

svgtext('svgMoodChart');

document.getElementById("moodListContainer").innerHTML = text;

const a = LMoods[0][1];

$( "#moodIndicator" ).css("color", moodColor(a));

}


function btnLMood(a){

var selPost = $("#selPost").val();

setETime();

LMoods.push([sqTime(datetimeValue), String(a)]);

$( "#moodIndicator" ).css("color", moodColor(a));

if(selPost==="Y"){

    MPost(a, datetimeValue);

}

resetAll();
}



function MPost(mood, dtime, i){

$.post("./add/AddJQ.php",
{
    v1: dtime,
    v2: mood,
    selTbl: 'tblMood'
});

resetAll();

}

function delMood(i){
            
var q = "Delete "+LMoods[i]+"?";

var c = confirm(q);

if (c == true){

    var etime = sqTime(LMoods[i][0]); 

    var a = LMoods.splice(i, 1);
    
    JQDel(etime, 'tblMood', 'MoodDT');

    resetAll();

}
}

function resetLMoods(){

if(LMoods === undefined || LMoods.length == 0) {

    //do nothing

}else{

    localStorage.setItem("LSMoods", JSON.stringify(LMoods));

    displayLMoods();

}
}
        </script>
		<script src="https://cdn.jsdelivr.net/npm/luxon@3.3.0/build/global/luxon.min.js" integrity="sha256-Nn+JGDrq3PuTxcDfJmmI0Srj5LpfOFlKqEiPwQK7y40=" crossorigin="anonymous"></script>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1" />
	</head>
	<body>
		<div id="pageWrapper">
		<header>
			<h1>Events</h1>
			<sub>v_2023-02-27</sub>
		</header>
		<div id="topbar">
			<ul class="controlGrid" id="formControls">
				<li>
					<a href="#" onclick="clearForm()">Reset</a>
				</li>	
				<li id="lblEventTime">
					<p id="DateTime"></p>
				</li>
				<li>
					<a href="#" onclick="manualEventForm.btnLPU()">Manual</a>
				</li>
				<li>
					<a href="#" onclick="PriorEvent()">Prior</a>
				</li>
				<li>
					<a href="#" onclick="postAll()">Sync</a>
				</li>
				<li>
					<a href="#" onclick="displayModifyMenu()">Modify</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-1)">-1m</a> 
				</li>
				<li>
					<a href="#" onclick="AddTime(-5)">-5m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-15)">-15m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-60)">-1h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-180)">-3h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-360)">-6h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(-1440)">-1d</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(1)">+1m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(5)">+5m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(15)">+15m</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(60)">+1h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(180)">+3h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(360)">+6h</a>
				</li>
				<li>
					<a href="#" onclick="AddTime(1440)">+1d</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(-1)">-1</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(-0.5)">-0.5</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(0)">0</a>
				</li> 
				<li>
					<a href="#"onclick="btnLMood(0.5)">0.5</a>
				</li>
				<li>
					<a href="#" onclick="btnLMood(1)">1</a>
				</li> 
				<li><p id="moodIndicator">&#10033;</p></li>
				<li>	
					<a href="#"  onclick="$('.pageSettings').toggle()">Settings</a> </li>
				<li id="timeZoneLabel" class="pageSettings">
					<p>Time Zone</p>
				</li>
				<li  class="pageSettings">
					<p>Post?</p>
				</li>
				<li id="detailStartLabel"  class="pageSettings">
					<p>Detail Start (Days Ago)</p>
				</li>
				<li id="detailEndLabel"  class="pageSettings">
					<p>Detail End (Days Ago)</p>
				</li><li id="timeZoneSelectContainer"  class="pageSettings">
					<select id="selTZ" class="ssmselect">
						<option value=0>Eastern</option>
						<option value=1>Central</option>
						<option value=2>Mountain</option>
						<option value=3>Pacific</option>
						<option value=6>Hawaii</option>
					</select>
				</li>
				<li  class="pageSettings">
					<select id="selPost">
						<option>Y</option>
						<option>N</option>
					</select>
				</li>
				<li id="detailStartSelectContainer"  class="pageSettings">
					<select id="selMinDate" class="sTime">
						<option>2</option>
						<option>1</option>
						<option>2</option>
						<option>7</option>
						<option>14</option>
						<option>30</option>
					</select>
				</li>
				<li id="detailEndSelectContainer"  class="pageSettings">
					<select id="selMaxDate" class="sTime">
						<option>0</option>
						<option>1</option>
						<option>2</option>
						<option>7</option>
						<option>14</option>
						<option>30</option>
					</select>
				</li>
			</ul>
		</div>
		<div id="mainSection">
			<!-- displays U when an event is being updated -->
			<b><p id="pu"></p></b>
			
			<!-- shows if events are being posted to the db or not -->
			<p id="selP"></p>
			<p id="selFT"></p>
			<h2 id="pmEvent"></h2>
			
			<ul id="eventBtnListContainer" class="btnGroup"></ul>
			
			<div id="modifyFormWrapper">
				<div id="modifyFormContainer"></div>
				<iframe id="modifyFormResult" name="modifyFormResult" class="hidden" scrolling="no"></iframe>
			</div>

			<a href="#" class="groupHeading" onclick="$('#tblRoutine').toggleClass('hidden')">Routine</a>

			<ul class="btnGroup hidden" id="tblRoutine"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblccare').toggleClass('hidden')">Childcare</a>

			<ul class="btnGroup hidden" id="tblccare"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblchores').toggleClass('hidden')">Chores</a>

			<ul id="tblchores" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblfam').toggleClass('hidden')">Family</a>

			<ul id="tblfam" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblhealth').toggleClass('hidden')">Health</a>

			<ul id="tblhealth" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblfood').toggleClass('hidden')">Food & Drink</a>

			<ul id="tblfood" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblsocial').toggleClass('hidden')">Social</a>

			<ul id="tblsocial" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblwork').toggleClass('hidden')">Work</a>

			<ul id="tblwork" class="btnGroup hidden"></ul>
				
			<a href="#" class="groupHeading" onclick="$('#tbltrans').toggleClass('hidden')">Transport</a>

			<ul id="tbltrans" class="btnGroup hidden"></ul>

			<a href="#" class="groupHeading" onclick="$('#tblpersonal').toggleClass('hidden')">Personal</a>

			<ul id="tblpersonal" class="btnGroup hidden"></ul>

		</div>
		<div id="footer">
			<svg id="svgEventChart" height="30"></svg>

			<svg id="svgMoodChart" height="30"></svg>

			<div id="eventListContainer"></div>

			<div id="moodListContainer"></div>

			<div id="listContainer"></div>

			<p id="csel"></p>

			<p id="psel"></p>

			<p id="spsel"></p>

			<p id="asel"></p>

		</div>
		<script>
			//get background color from css
			const defaultBGColor = $( "body" ).css( "background-color" );
			const defaultBtnColor = $( "button" ).css( "color" );
			const defaultBtnBGColor = $( "button" ).css( "background-color" );
	
			const svgWidthNum = screen.width;

			const btnWidthNum = 110;

			let text, ELen, MoodsLen, i, datetimeValue, datetimeText, millisecTime, origTime, etmt, eft, eid;
			
			//set local storage variables **need to add a way to skip this if offline**
			//let lastuse = <?php echo json_encode( $arr_lastuse ) ?>;

			//Events

			//let data_events = <?php echo json_encode( $arr_events ) ?>;

			//localStorage.setItem("LSEvents", JSON.stringify(data_events));
			
			let LEvents = JSON.parse(localStorage.getItem("LSEvents"));

			const objLEvents = {}
			
            if (LEvents){

                for(i=0; i<LEvents.length; i++) {
                    
                    objLEvents[LEvents[i][0]] = {"startTime": Date.parse(LEvents[i][0]), "act": LEvents[i][1], "subProj": LEvents[i][2]}
                
                }
            }
			
			//Moods
			
			//let data_moods = <?php echo json_encode( $arr_moods ) ?>;
			
			//localStorage.setItem("LSMoods", JSON.stringify(data_moods));

			let LMoods = JSON.parse(localStorage.getItem("LSMoods"));
			
			//Activities

			//let data_acts = <?php echo json_encode( $arr_act ) ?>;
			
			//localStorage.setItem("LSActs", JSON.stringify(data_acts));
			
			let LActs = JSON.parse(localStorage.getItem("LSActs"));
			
			//let data_acts_all = <?php echo json_encode( $arr_act_all ) ?>;
			
			//localStorage.setItem("LSActsAll", JSON.stringify(data_acts_all));
			
			let LActsAll = JSON.parse(localStorage.getItem("LSActsAll"));
			
            if(LActsAll){

            } else {

                LActsAll = 

                    [["A01","AMP","A","W","Inactive"],
                    ["A02","Inbox","A","W","Active"],
                    ["A03","Expenses","A","W","Inactive"],
                    ["A04","Desktop Review","A","W","Active"],
                    ["A05","Training Admin","A","TLA","Active"],
                    ["A06","CPA License","A","W","Inactive"],
                    ["A07","Tech Support","A","W","Active"],
                    ["A08","Time Mgmt","A","W","Active"],
                    ["A09","Timesheet","A","W","Inactive"],
                    ["A10","Travel Booking","A","W","Inactive"],
                    ["B01","Bathroom","R","P","Active"],
                    ["B02","Eat","3","P","Active"],
                    ["B04","Lunch","3","P","Inactive"],
                    ["B05","Order Food","P","P","Active"],
                    ["B06","Beverage","B","P","Active"],
                    ["D01","Monthly Review","D","D","Active"],
                    ["D02","Weekly Review","D","D","Inactive"],
                    ["D03","Dev Plan","D","D","Active"],
                    ["D04","One-on-One","D","DS","Active"],
                    ["D05","One-on-One Prep","D","D","Inactive"],
                    ["D06","Coaching (D)","D","D","Inactive"],
                    ["I01","IIA Meetings & Emails","I","I","Inactive"],
                    ["I02","IIA Recons","I","I","Inactive"],
                    ["I03","Board Materials","I","I","Inactive"],
                    ["I04","Slot Reporting","I","I","Inactive"],
                    ["I05","Post Office","I","I","Inactive"],
                    ["I06","Invoicing","I","I","Inactive"],
                    ["L01","Assimil","L","L","Inactive"],
                    ["L02","Brain Training","L","L","Inactive"],
                    ["L03","Car Repairs","1","PL","Active"],
                    ["L04","Coffee Break Languages","L","L","Inactive"],
                    ["L05","DuoLingo","L","L","Inactive"],
                    ["L06","Grammar","L","L","Inactive"],
                    ["L07","Math","L","L","Inactive"],
                    ["I09","Payments","I","I","Inactive"],
                    ["L09","Rosetta Stone","L","L","Inactive"],
                    ["L10","VB Training","L","L","Inactive"],
                    ["L12","Python","L","L","Inactive"],
                    ["L13","Java","L","L","Inactive"],
                    ["L14","Web Dev","L","L","Active"],
                    ["M01","Risk or Control Mtg","M","WD","Active"],
                    ["M02","Business Mtg","M","W","Active"],
                    ["M03","Committee Meeting","M","W","Inactive"],
                    ["M04","Corporate Meeting ","M","W","Inactive"],
                    ["M05","Interviewing","M","WD","Inactive"],
                    ["M06","Meeting Prep","M","WD","Inactive"],
                    ["M07","Phone: Work","M","W","Inactive"],
                    ["M08","Planning Mtg","M","W","Inactive"],
                    ["M09","Schedule Mtgs","A","WD","Active"],
                    ["M10","Team Mtg","M","W","Active"],
                    ["M11","Volunteering","M","W","Inactive"],
                    ["N01","Untracked Time","N","N","Active"],
                    ["N02","Drive","2","PS","Active"],
                    ["N03","TV","P","LPS","Active"],
                    ["P01","Database","P","P","Active"],
                    ["P02","Job Search","D","DPW","Inactive"],
                    ["P04","Finances","P","P","Active"],
                    ["P05","Personal: Admin","P","P","Active"],
                    ["P06","Retirement","P","P","Inactive"],
                    ["P07","Taxes","1","P","Inactive"],
                    ["P08","Taxes (S)","P","S","Inactive"],
                    ["P09","Brush Teeth","R","P","Active"],
                    ["P10","Car Search","P","P","Inactive"],
                    ["P11","Clean House","1","P","Active"],
                    ["P12","Fingernails","R","P","Active"],
                    ["P13","Cook","P","P","Active"],
                    ["P14","Dinner","3","P","Inactive"],
                    ["P15","Doctor/Dentist","P","P","Active"],
                    ["P16","Dog","P","PS","Active"],
                    ["P17","Fantasy Football","P","P","Inactive"],
                    ["P18","Food Tracking","P","P","Inactive"],
                    ["P19","Shopping: Furniture","P","P","Inactive"],
                    ["P20","Dress","R","P","Active"],
                    ["P21","Shopping: Gifts","P","P","Inactive"],
                    ["P22","Haircut","1","P","Active"],
                    ["P23","Home/Apt Search","1","P","Inactive"],
                    ["P24","Internet","P","P","Active"],
                    ["P25","Investments","P","P","Active"],
                    ["P26","JO","P","P","Active"],
                    ["P29","Shower","R","P","Active"],
                    ["P30","Walk","H","PS","Active"],
                    ["P31","Gym","H","P","Active"],
                    ["P32","Pack","R","P","Active"],
                    ["P33","Shave & Hair","R","P","Active"],
                    ["P34","Laundry","1","P","Active"],
                    ["P35","Dishes","1","P","Active"],
                    ["P36","Groceries","P","PS","Active"],
                    ["P37","Lawn & Garden","1","P","Active"],
                    ["W47","Quality Assurance","W","W","Active"],
                    ["P39","Shopping: Home","P","PS","Active"],
                    ["P40","Gas","2","P","Active"],
                    ["P41","Trash","1","P","Active"],
                    ["S01","Social","S","S","Active"],
                    ["S02","Sex","S","S","Active"],
                    ["S03","Lunch (S)","S","S","Inactive"],
                    ["S04","Coffee (S)","S","S","Active"],
                    ["S05","Breakfast (S)","S","S","Inactive"],
                    ["S06","Research (S)","S","S","Inactive"],
                    ["S07","Meal (S)","S","S","Active"],
                    ["S08","Travel Planning (S)","S","S","Inactive"],
                    ["S09","Events","S","S","Active"],
                    ["S10","Shopping (S)","S","S","Active"],
                    ["T02","Exam","L","L","Inactive"],
                    ["T03","Study","L","L","Inactive"],
                    ["T04","Training","T","T","Active"],
                    ["W00","Admin (W)","W","W","Inactive"],
                    ["W01","Agenda","W","W","Active"],
                    ["W02","Annual Plan","W","W","Inactive"],
                    ["W04","Reporting","W","W","Active"],
                    ["W06","CE Testing","W","W","Inactive"],
                    ["W07","Closing","W","W","Inactive"],
                    ["W08","Coaching","W","W","Inactive"],
                    ["W09","DE Docs","W","W","Inactive"],
                    ["W10","Email","W","WD","Active"],
                    ["W11","Engagement Memo","W","W","Inactive"],
                    ["W12","Research: External","A","W","Inactive"],
                    ["W15","Issue Memo","W","W","Active"],
                    ["W17","Research","W","WD","Active"],
                    ["W19","Issue Validation","W","W","Inactive"],
                    ["W20","Meeting Notes","W","WD","Inactive"],
                    ["W21","Planning Memo","W","W","Inactive"],
                    ["W22","Planning: General","W","W","Inactive"],
                    ["W25","Project Economics","W","W","Inactive"],
                    ["W27","Business Profile Review","W","W","Active"],
                    ["W29","Process Risk Control","W","W","Active"],
                    ["W30","Doc Request","W","W","Active"],
                    ["W32","Review Notes","W","W","Inactive"],
                    ["W33","Risk Assessment","W","W","Active"],
                    ["W35","Sampling","W","W","Inactive"],
                    ["P49","Air Travel","2","PS","Active"],
                    ["W38","Status Report","W","W","Active"],
                    ["W39","Process Flow","W","W","Inactive"],
                    ["W40","Workpaper Review","W","W","Inactive"],
                    ["W42","Checklists","A","W","Inactive"],
                    ["W43","Audit Form","W","W","Inactive"],
                    ["W44","Staff IPAs","W","W","Inactive"],
                    ["W46","Issue Report Meeting","M","W","Inactive"],
                    ["P42","Run","H","P","Active"],
                    ["P43","Home Repairs","1","P","Active"],
                    ["S11","Pool","S","S","Active"],
                    ["S12","Beach","S","S","Active"],
                    ["L15","News","L","L","Inactive"],
                    ["S13","Bar","S","S","Active"],
                    ["D07","Daily Review","D","D","Active"],
                    ["P44","Dry Cleaning","1","P","Inactive"],
                    ["P45","Pick-up Food","P","P","Active"],
                    ["I07","Financial Statements","I","I","Inactive"],
                    ["I08","Journal Entries","I","I","Inactive"],
                    ["P46","Wedding Planning","1","P","Inactive"],
                    ["P47","Shopping: Online","P","P","Active"],
                    ["P48","Clean Car","1","P","Active"],
                    ["N04","Sleep","N","N","Active"],
                    ["P50","Public Trans.","2","PS","Active"],
                    ["W48","Reg Analysis","W","W","Inactive"],
                    ["P51","Airport","2","PS","Active"],
                    ["M12","Regulator Mtg","M","W","Inactive"],
                    ["P52","Commute (pre-split)","2","W","Inactive"],
                    ["L16","Read","L","TLP","Active"],
                    ["D08","Job Interview Prep","D","DP","Inactive"],
                    ["D09","Job Interview","D","DP","Inactive"],
                    ["P53","Cryptocurrency","P","P","Active"],
                    ["P54","Fishing / Kayaking","H","PS","Inactive"],
                    ["L17","Lectures","L","TL","Inactive"],
                    ["P55","Convo DB","P","P","Inactive"],
                    ["L18","Flashcards","L","TL","Inactive"],
                    ["W49","Announcement Letter","W","W","Inactive"],
                    ["P56","Hiking","H","PS","Active"],
                    ["P57","Biking","H","PS","Inactive"],
                    ["P61","Sheets & Towels","1","P","Active"],
                    ["W50","Procedures","W","W","Active"],
                    ["P58","Clean Kitchen","1","P","Active"],
                    ["P59","Vacuum","1","P","Active"],
                    ["P65","Negativity","P","P","Active"],
                    ["W51","Presentation","W","W","Inactive"],
                    ["P60","Floss","R","P","Active"],
                    ["S14","Games","S","S","Inactive"],
                    ["P63","Meditate","H","P","Active"],
                    ["P62","Decorate","1","P","Inactive"],
                    ["P64","Mail","1","P","Active"],
                    ["W52","Property Search","W","W","Inactive"],
                    ["D10","Onboarding","D","DW","Active"],
                    ["B07","Bathroom 2","R","P","Active"],
                    ["L19","Crossword ","L","L","Active"],
                    ["L20","Writing","L","L","Inactive"],
                    ["C01","Diaper 1","1","P","Active"],
                    ["C02","Diaper 2","1","P","Active"],
                    ["W54","Policy Review","W","W","Active"],
                    ["C03","Feeding","1","P","Active"],
                    ["C04","Baby Bath","1","P","Active"],
                    ["W53","Leave Prep","W","W","Inactive"],
                    ["C05","Pediatrician","1","P","Inactive"],
                    ["P66","Home Organization","1","P","Inactive"],
                    ["C06","Crying","1","P","Inactive"],
                    ["C07","Tummy Time","1","P","Inactive"],
                    ["C08","Reading","1","P","Active"],
                    ["C09","Play","1","P","Active"],
                    ["B08","Bathroom 1-S","R","P","Inactive"],
                    ["B09","Eat (Slow)","3","P","Active"],
                    ["P67","Yoga","H","P","Active"]]

            }

			const objLAct = {}
			
			for(i=0; i<LActsAll[0].length; i++){

				objLAct[LActsAll[0][i]]={"ActID": LActsAll[0][i], "ActDesc": LActsAll[1][i], "PCode": LActsAll[2][i], "UCode": LActsAll[3][i], "Status": LActsAll[6][i]}
								
			}

			//Projects

			//let data_proj = <?php echo json_encode( $arr_proj ) ?>;
			
			//localStorage.setItem("LSProj", JSON.stringify(data_proj));
			
			let LProj = JSON.parse(localStorage.getItem("LSProj"));
			
			//let data_proj_all = <?php echo json_encode( $arr_proj_all) ?>;
			
			///localStorage.setItem("LSProjAll", JSON.stringify(data_proj_all));
			
			let LProjAll= JSON.parse(localStorage.getItem("LSProjAll"));
			
            if(LProjAll){}else{
                
                LProjAll = 
                    [["150141","Wells Cap 2015","Closed","W","Inactive"],
                    ["150143","GCM","Closed","W","Active"],
                    ["150145","Rock Creek","Closed","W","Inactive"],
                    ["150182","Basel DI","Closed","W","Active"],
                    ["150848","RCIS Retro","Closed","W","Active"],
                    ["160038","FMG","Closed","W","Inactive"],
                    ["160041","WFAM-WIM Int.","Closed","W","Active"],
                    ["2012-RM-08","Enterprise Risk Mgmt","Closed","W","Active"],
                    ["2013-AM-04","Lifecycle/Lifestyle","Closed","W","Inactive"],
                    ["2013-AM-05","Quantitative Portfolio Mgmt","Closed","W","Inactive"],
                    ["2013-AM-09","Polar Star","Closed","W","Active"],
                    ["2013-AM-10","Radar","Closed","W","Active"],
                    ["2013-AM-12","Asset Allocation","Closed","W","Inactive"],
                    ["2013-AM-15","AM European Offices","Closed","W","Active"],
                    ["2013-RM-03","Risk Appetite","Closed","W","Active"],
                    ["2013-RM-05","Model Governance","Closed","W","Active"],
                    ["2013-SP-01","IPFS Flowcharting Project","Closed","W","Inactive"],
                    ["2013-SP-02","Real Estate Authorizations","Closed","W","Active"],
                    ["2014-AM-05","AM Sales Support","Closed","W","Active"],
                    ["2014-AM-06","Performance Reporting","Closed","W","Inactive"],
                    ["2014-AM-08","Henderson Advisory (UK)","Closed","W","Inactive"],
                    ["2014-AM-14","THRE Group Finance","Closed","W","Inactive"],
                    ["2014-AM-15","THRE Investment Committee","Closed","W","Inactive"],
                    ["2014-AM-18","Structured Products","Closed","W","Inactive"],
                    ["2014-AM-19","Westchester","Closed","W","Inactive"],
                    ["2014-FA-08","FS Close Process","Closed","W","Inactive"],
                    ["2014-FA-11","MF Taxes, Actions and Dist.","Closed","W","Inactive"],
                    ["2014-FA-12","Yardi","Closed","W","Inactive"],
                    ["2014-IT-18","THRE ITGC","Closed","W","Inactive"],
                    ["2014-RM-04","Securities Pricing & Valuation","Closed","W","Active"],
                    ["2014-RM-06","Enterprise Risk Management","Closed","W","Inactive"],
                    ["2014-SP-01","Model Risk Special Project","Closed","W","Inactive"],
                    ["2015-AM-08","THRE Compliance","Closed","W","Inactive"],
                    ["2015-AM-09","THRE Operations","Closed","W","Inactive"],
                    ["2015-AM-12","THRE Fund Finance","Closed","W","Inactive"],
                    ["2015-TH-01","THRE - General","Closed","W","Inactive"],
                    ["2015-TH-02","Locational Strategy","Closed","W","Inactive"],
                    ["2015-TH-03","THRE Legal","Closed","W","Inactive"],
                    ["AD","Alyssa","Closed","S","Inactive"],
                    ["ADMIN","ADMIN","Open","W","Active"],
                    ["AS","Auburn Situation","Closed","S","Active"],
                    ["BMP","BMP","Closed","W","Active"],
                    ["CC","Coverage Coord.","Closed","W","Inactive"],
                    ["CWSocial","Coworkers","N/A","S","Inactive"],
                    ["DI","Division Initiatives","Closed","W","Inactive"],
                    ["DOG","Dog","N/A","P","Inactive"],
                    ["EXGFs","Ex-GFs","Closed","S","Inactive"],
                    ["F.Friends","Friends (F)","N/A","S","Inactive"],
                    ["FAMILY","Family","N/A","S","Active"],
                    ["FLANG","Foreign Language Skills","Closed","L","Active"],
                    ["FMI","Free Money Initiatives","Closed","P","Inactive"],
                    ["FRIENDS","Social - Friends (Pre-Tracking","Closed","S","Active"],
                    ["IIA","IIA","Closed","I","Active"],
                    ["ISSUES","Issues","Open","W","Active"],
                    ["LEARNING","Learning","N/A","L","Active"],
                    ["LMOVE","London Move","Closed","P","Inactive"],
                    ["M.Friends","Friends (M)","N/A","S","Active"],
                    ["MEET","Other Meetings","Open","W","Active"],
                    ["NA","Unassigned","N/A","N","Inactive"],
                    ["PCD","PCD","N/A","D","Inactive"],
                    ["PERSONAL","Personal","N/A","P","Inactive"],
                    ["PFIN","Personal Finances","N/A","P","Active"],
                    ["PROG","Programming","Open","L","Inactive"],
                    ["PTO","PTO","Closed","N","Active"],
                    ["PURCHASES","Major Purchases","Closed","P","Active"],
                    ["TAX","Taxes (Personal)","N/A","P","Active"],
                    ["TIAACO","TIAA Carryover","Closed","W","Inactive"],
                    ["TIMEDB","Time DB Design","N/A","P","Active"],
                    ["TRAINING","Training","N/A","T","Active"],
                    ["NEWS","News","N/A","L","Inactive"],
                    ["READ","Reading & Research","N/A","L","Inactive"],
                    ["160758","PCG Supervision","Closed","W","Inactive"],
                    ["160755","IPCS","Closed","W","Active"],
                    ["I.Friends","Inactive Friends","Closed","S","Inactive"],
                    ["REG","Regulatory Reviews","Closed","W","Active"],
                    ["CFA","CFA Exam","Closed","L","Inactive"],
                    ["TRANS","Transport","Open","P","Active"],
                    ["170754","WFAM Sales","Closed","W","Active"],
                    ["PHY","Physics","Closed","L","Active"],
                    ["170746","WFAM Compliance","Closed","W","Active"],
                    ["170862.03","Reg O Retrospective","Closed","W","Active"],
                    ["170745","Galliard","Closed","W","Active"],
                    ["M.CW","Coworkers (M)","Open","S","Active"],
                    ["F.CW","Coworkers (F)","Open","S","Active"],
                    ["NORM","Normalization","Open","P","Active"],
                    ["170744","Wells Cap","Closed","W","Active"],
                    ["BPRM","BPM","Open","W","Active"],
                    ["SHRP","SHRP","Open","W","Active"],
                    ["POL","Policy","Open","W","Active"],
                    ["170075","Reinsurance","Closed","W","Active"],
                    ["RITV","Reinsurance T&V","Closed","W","Active"],
                    ["MTA","MTA","Closed","W","Active"],
                    ["DLP","DLP","Closed","W","Active"],
                    ["AUD","Audits","Open","W","Active"],
                    ["NP","Products","Closed","W","Inactive"],
                    ["REP","Reporting","Open","W","Active"],
                    ["FCRM","Financial Crimes","Closed","W","Inactive"],
                    ["180161","Structured Products","Closed","W","Inactive"],
                    ["WMOVE","Moving","Closed","P","Active"],
                    ["180305","2018 MIP Audit","Closed","W","Inactive"],
                    ["SLA","SLA Management","Closed","W","Active"],
                    ["SP","Sales Practices","Closed","W","Active"],
                    ["SA","Self Assurance","Closed","W","Inactive"],
                    ["RCSA","RCSA","Open","W","Inactive"],
                    ["BSDI","BSDI","Open","W","Active"],
                    ["RID","Risk (ID-Meas-App)","Open","W","Inactive"],
                    ["OB","Onboarding","Open","D","Active"],
                    ["VOL","Volcker","Closed","W","Inactive"],
                    ["TG","Trade Governance","Closed","W","Active"],
                    ["CHC","Childcare","Open","P","Inactive"],
                    ["WRT","Writing","Closed","L","Inactive"],
                    ["TR","Tech Risk","Open","W","Inactive"],
                    ["CR","Conduct Risk","Closed","W","Inactive"],
                    ["CRMP","CRMPS","Closed","W","Active"],
                    ["RC","Regulatory Control","Open","W","Inactive"],
                    ["RT","Required Training","Closed","W","Inactive"],
                    ["IRR","Intl. Reg. Reporting","Closed","W","Active"]]

            }

			const objLProj = {}
			
			for(i=0; i<LProjAll[0].length; i++){

				objLProj[LProjAll[0][i]]={"ProjID": LProjAll[0][i], "ProjDesc": LProjAll[1][i], "ProfileCode": LProjAll[2][i], "ProjStatus": LProjAll[3][i]}
								
			}
			
			//Sub-Projects
			
			//let data_cont = <?php echo json_encode( $arr_cont ) ?>;
			
			//localStorage.setItem("LSConts", JSON.stringify(data_cont));

			//let LConts = JSON.parse(localStorage.getItem("LSConts"));
			
			//let data_cont_all = <?php echo json_encode( $arr_cont_all ) ?>;
			
			//localStorage.setItem("LSContAll", JSON.stringify(data_cont_all));
			
			let LContAll = JSON.parse(localStorage.getItem("LSContAll"));
			
            if(LContAll){}else{
                LContAll = 
                    [["150141","150141","General","N",""],
                    ["150141.1","150141","Portfolio Management","N",""],
                    ["150141.2","150141","Trading","",""],
                    ["150143","150143","General","",""],
                    ["150143.1","150143","Physical Security","",""],
                    ["150143.2","150143","Record Retention","",""],
                    ["150143.3","150143","User Access","",""],
                    ["150143.4","150143","Trading","",""],
                    ["150143.5","150143","Operations","",""],
                    ["150143.6","150143","General Accounting","",""],
                    ["150143.7","150143","Fees","",""],
                    ["150143.8","150143","Compliance","",""],
                    ["150143.9","150143","Client Statements","",""],
                    ["150145","150145","General","",""],
                    ["150145.01","150145","Sales, Marketing, and New Accounts / Products","",""],
                    ["150145.02","150145","Investment Management","",""],
                    ["150145.03","150145","Back Office Functions","",""],
                    ["150145.04","150145","Risk Management / Portfolio Analytics","",""],
                    ["150145.05","150145","Physical and Information Security","",""],
                    ["150145.07","150145","BSA / AML / OFAC","",""],
                    ["150145.06","150145","Compliance","",""],
                    ["150182","150182","General","",""],
                    ["150182.1","150182","Issues Management Process","",""],
                    ["150182.2","150182","Data Integrity","",""],
                    ["150848","150848","General","",""],
                    ["160038.A","160038","Admin","",""],
                    ["160038.P","160038","Planning","",""],
                    ["160038.R","160038","FMG Reporting","",""],
                    ["160038.1","160038","FMG Money Mkt Reform","",""],
                    ["160038.2","160038","FMG Sales","",""],
                    ["160038.3","160038","FMG Move Money","",""],
                    ["160038.4","160038","FMG Pricing","",""],
                    ["160038.5","160038","FMG Manage Portfolio","",""],
                    ["160038.6","160038","FMG Confidential Info","",""],
                    ["160038.7","160038","Compliance","",""],
                    ["160038.8","160038","Third Parties","",""],
                    ["160038.9","160038","Board Reporting","",""],
                    ["160041.A","160041","Admin","",""],
                    ["160041.M","160041","Meetings","",""],
                    ["160041.1","160041","Meeting Notes","",""],
                    ["160041.2","160041","SharePoint","",""],
                    ["2012-RM-08.0.0","2012-RM-08","General","",""],
                    ["2013-AM-04.0.0","2013-AM-04","General","",""],
                    ["2013-AM-04.B.2","2013-AM-04","Performance Monitoring","",""],
                    ["2013-AM-04.B.3","2013-AM-04","Post-Trade Monitoring","",""],
                    ["2013-AM-04.D.1","2013-AM-04","System Access","",""],
                    ["2013-AM-04.E.1","2013-AM-04","BCP","",""],
                    ["2013-AM-05.0.0","2013-AM-05","General","",""],
                    ["2013-AM-05.B.1","2013-AM-05","Performance Monitoring","",""],
                    ["2013-AM-05.B.2","2013-AM-05","Post-Trade Monitoring","",""],
                    ["2013-AM-05.C.1","2013-AM-05","PM Trade Activity Monitoring","",""],
                    ["2013-AM-05.E.1","2013-AM-05","System Access","",""],
                    ["2013-AM-05.F.1","2013-AM-05","BCP","",""],
                    ["2013-AM-09.0.0","2013-AM-09","General","",""],
                    ["2013-AM-09.A.2","2013-AM-09","RAOOC Review","",""],
                    ["2013-AM-09.A.3","2013-AM-09","Board of Directors Oversight","",""],
                    ["2013-AM-09.B.1","2013-AM-09","Quarterly Financial Statement Review","",""],
                    ["2013-AM-09.B.2","2013-AM-09","Annual Independent Audit","",""],
                    ["2013-AM-09.B.3","2013-AM-09","Annual Independent Review of Performance & Non-Per","",""],
                    ["2013-AM-09.C.2","2013-AM-09","Code of Conduct","",""],
                    ["2013-AM-09.C.4","2013-AM-09","BCP Plan","",""],
                    ["2013-AM-09.D.3","2013-AM-09","Standard Operating Procedures","",""],
                    ["2013-AM-10.0.0","2013-AM-10","General","",""],
                    ["2013-AM-10.A.7","2013-AM-10","TIAA Board Participation","",""],
                    ["2013-AM-10.A.8","2013-AM-10","Annual Budget Review and Approval","",""],
                    ["2013-AM-10.B.7","2013-AM-10","Negative News Monitoring","",""],
                    ["2013-AM-10.C.1","2013-AM-10","Quarterly Financial Statements","",""],
                    ["2013-AM-10.C.2","2013-AM-10","Annual Independent Audit","",""],
                    ["2013-AM-10.C.3","2013-AM-10","Month-end Closing Checklists","",""],
                    ["2013-AM-12.0.0","2013-AM-12","General","",""],
                    ["2013-AM-12.A.1","2013-AM-12","Governance & Oversight","",""],
                    ["2013-AM-12.A.2","2013-AM-12","ALCO Review and Approval of Ranges","",""],
                    ["2013-AM-12.B.1","2013-AM-12","Monthly Tracking","",""],
                    ["2013-AM-12.C.1","2013-AM-12","Validation of Inputs","",""],
                    ["2013-AM-15.0.0","2013-AM-15","General","",""],
                    ["2013-AM-15.A.1","2013-AM-15","Deal Pipeline Meetings","",""],
                    ["2013-AM-15.A.2","2013-AM-15","TCAM UK IC & IMC","",""],
                    ["2013-AM-15.A.3","2013-AM-15","Standard Operating Procedures","",""],
                    ["2013-AM-15.A.4","2013-AM-15","Risk Management","",""],
                    ["2013-AM-15.B.1","2013-AM-15","Quarterly Financial Reporting","",""],
                    ["2013-AM-15.B.2","2013-AM-15","Monthly Management Reporting","",""],
                    ["2013-AM-15.B.3","2013-AM-15","VAT Tax","",""],
                    ["2013-AM-15.B.4","2013-AM-15","FCU Filings","",""],
                    ["2013-AM-15.C.1","2013-AM-15","BCP","",""],
                    ["2013-AM-15.C.2","2013-AM-15","Operational Issues","",""],
                    ["2013-RM-03.0.0","2013-RM-03","General","",""],
                    ["2013-RM-03.A.2","2013-RM-03","Risk Appetite Level Oversight","",""],
                    ["2013-RM-03.A.3","2013-RM-03","Risk Appetite Usage Oversight","",""],
                    ["2013-RM-03.B.1","2013-RM-03","Risk Appetite Level Management","",""],
                    ["2013-RM-03.B.2","2013-RM-03","Risk Appetite Usage Management","",""],
                    ["2013-RM-03.C.1","2013-RM-03","Collaboration - RM/Business Stakeholders","",""],
                    ["2013-RM-03.C.2","2013-RM-03","Collaboration - Finance & Actuarial","",""],
                    ["2013-RM-05.0.0","2013-RM-05","General","",""],
                    ["2013-SP-01.0.0","2013-SP-01","General","",""],
                    ["2013-SP-02.0.0","2013-SP-02","General","",""],
                    ["2014-AM-05.0.0","2014-AM-05","General","",""],
                    ["2014-AM-05.A.1","2014-AM-05","SOPs","",""],
                    ["2014-AM-05.A.2","2014-AM-05","SSAE 16s","",""],
                    ["2014-AM-05.A.3","2014-AM-05","4th Party Vendor Feeds","",""],
                    ["2014-AM-05.B.1","2014-AM-05","AMBD Reporting (CRM)","",""],
                    ["2014-AM-05.B.2","2014-AM-05","Sales Reporting (SalesVision)","",""],
                    ["2014-AM-05.C.1","2014-AM-05","Distribution Lists","",""],
                    ["2014-AM-05.C.2","2014-AM-05","CRM Maintenance","",""],
                    ["2014-AM-05.C.3","2014-AM-05","Email uploads","",""],
                    ["2014-AM-05.D.1","2014-AM-05","System Access","",""],
                    ["2014-AM-05.D.2","2014-AM-05","User List - HR Feed","",""],
                    ["2014-AM-05.D.3","2014-AM-05","Changes & Enhancements","",""],
                    ["2014-AM-05.E.1","2014-AM-05","BCP - TIAA Level","",""],
                    ["2014-AM-05.E.2","2014-AM-05","BCP - SalesForce / Broadridge Level","",""],
                    ["2014-AM-06.0.0","2014-AM-06","General","",""],
                    ["2014-AM-08.0","2014-AM-08","General","",""],
                    ["2014-AM-08.A","2014-AM-08","Audit Universe","",""],
                    ["2014-AM-08.B","2014-AM-08","Risk Assessment","N",""],
                    ["2014-AM-08.C","2014-AM-08","Risk and Control Items","",""],
                    ["2014-AM-14.0.0","2014-AM-14","General","",""],
                    ["2014-AM-14.A.1","2014-AM-14","Consolidation Worksheets","",""],
                    ["2014-AM-14.A.2","2014-AM-14","ELT & Shareholder Reporting","",""],
                    ["2014-AM-14.A.3","2014-AM-14","Financial Statements","",""],
                    ["2014-AM-14.A.4","2014-AM-14","Bank Account Reconcilations","",""],
                    ["2014-AM-14.A.5","2014-AM-14","Invoice Reviews","",""],
                    ["2014-AM-14.B.1","2014-AM-14","Capital Adequacy - Regulatory","",""],
                    ["2014-AM-14.B.2","2014-AM-14","Capital Adequacy - BD","",""],
                    ["2014-AM-14.C.1","2014-AM-14","Paris GL to CODA Recon","",""],
                    ["2014-AM-14.C.2","2014-AM-14","Milan GL to CODA Recon","",""],
                    ["2014-AM-14.C.3","2014-AM-14","Third Party Vendor Oversight","",""],
                    ["2014-AM-15.0.0","2014-AM-15","General","",""],
                    ["2014-AM-15.A.1","2014-AM-15","Committee Members","",""],
                    ["2014-AM-15.A.2","2014-AM-15","Thresholds","",""],
                    ["2014-AM-15.A.3","2014-AM-15","Discussion Material Submission","",""],
                    ["2014-AM-15.A.4","2014-AM-15","Meeting Minutes","",""],
                    ["2014-AM-15.B.1","2014-AM-15","Transaction Reviews","",""],
                    ["2014-AM-15.B.2","2014-AM-15","Strategy Reviews","",""],
                    ["2014-AM-15.B.3","2014-AM-15","Proposal Reviews","",""],
                    ["2014-AM-15.C.1","2014-AM-15","Investment Requirements Summaires","",""],
                    ["2014-AM-15.C.2","2014-AM-15","Board of Directors Approvals","",""],
                    ["2014-AM-15.C.3","2014-AM-15","Client Approval Process","",""],
                    ["2014-AM-15.D.1","2014-AM-15","TIAA-CREF General Account","",""],
                    ["2014-AM-15.D.2","2014-AM-15","KAG","",""],
                    ["2014-AM-18.0.0","2014-AM-18","General","",""],
                    ["2014-AM-18.A.1","2014-AM-18","Initial Credit Reviews","",""],
                    ["2014-AM-18.A.2","2014-AM-18","Monthly Trade List Review","",""],
                    ["2014-AM-18.A.3","2014-AM-18","Quarterly Early Warning List Review","",""],
                    ["2014-AM-18.B.1","2014-AM-18","Monthly Holdings Review","",""],
                    ["2014-AM-18.B.2","2014-AM-18","Annual Broker/Counterparty List Review","",""],
                    ["2014-AM-18.B.3","2014-AM-18","Quarterly FIOC","",""],
                    ["2014-AM-18.B.4","2014-AM-18","Annual Investment Committee Approval","",""],
                    ["2014-AM-18.C.1","2014-AM-18","Annual ALCO Approval","",""],
                    ["2014-AM-18.C.2","2014-AM-18","Monthly Tracking Error Report","",""],
                    ["2014-AM-18.C.3","2014-AM-18","Outliers","",""],
                    ["2014-AM-18.D.1","2014-AM-18","Bloomberg AIM Confirmations","",""],
                    ["2014-AM-18.D.2","2014-AM-18","Daily Trade Fails Tracking","",""],
                    ["2014-AM-18.D.3","2014-AM-18","Rebooked Trades","",""],
                    ["2014-AM-18.E.1","2014-AM-18","BCP","",""],
                    ["2014-AM-19.0.0","2014-AM-19","General","",""],
                    ["2014-FA-08.0.0","2014-FA-08","General","",""],
                    ["2014-FA-08.B.1","2014-FA-08","Confluence Funds Validation","",""],
                    ["2014-FA-08.B.2","2014-FA-08","Real Estate Account Workpapers","",""],
                    ["2014-FA-08.B.3","2014-FA-08","Non-Confluence Funds FS Prep","",""],
                    ["2014-FA-08.B.4","2014-FA-08","Draft FS Review","",""],
                    ["2014-FA-08.B.5","2014-FA-08","PEO/PFO Sign-off","",""],
                    ["2014-FA-08.C.1","2014-FA-08","Business Partner Reviews","",""],
                    ["2014-FA-08.C.2","2014-FA-08","SOPs","",""],
                    ["2014-FA-08.C.3","2014-FA-08","Run Book & Internal Calander","",""],
                    ["2014-FA-08.D.1","2014-FA-08","IT General Controls","",""],
                    ["2014-FA-08.D.2","2014-FA-08","System Access Reviews","",""],
                    ["2014-FA-11.0.0","2014-FA-11","General","",""],
                    ["2014-FA-11.A.3","2014-FA-11","Tax Returns","",""],
                    ["2014-FA-11.C.1","2014-FA-11","Tax Provisions","",""],
                    ["2014-FA-11.C.2","2014-FA-11","Excise Tax Calculations","",""],
                    ["2014-FA-11.C.3","2014-FA-11","RIC Diversification Test","",""],
                    ["2014-FA-11.C.4","2014-FA-11","REIT Adjustments","",""],
                    ["2014-FA-11.C.5","2014-FA-11","PFIC Analysis","",""],
                    ["2014-FA-11.C.6","2014-FA-11","Shareholder Reporting","",""],
                    ["2014-FA-11.E.2","2014-FA-11","End User Controls","",""],
                    ["2014-FA-12.0.0","2014-FA-12","General","",""],
                    ["2014-FA-12.A.1","2014-FA-12","Access Management: Internal Users","",""],
                    ["2014-FA-12.A.2","2014-FA-12","Access Management: External Users","",""],
                    ["2014-FA-12.B.1","2014-FA-12","User License Inactivation","",""],
                    ["2014-FA-12.B.2","2014-FA-12","Security Groups & Property Lists","",""],
                    ["2014-FA-12.B.3","2014-FA-12","External Property Manager Approvers List","",""],
                    ["2014-FA-12.C.1","2014-FA-12","Entitlement Reviews: Internal","",""],
                    ["2014-FA-12.C.2","2014-FA-12","Entitlement Reviews: External","",""],
                    ["2014-FA-12.D.1","2014-FA-12","Non-systematic Controls","",""],
                    ["2014-IT-18.0.0","2014-IT-18","General","",""],
                    ["2014-RM-04.0.0","2014-RM-04","General","",""],
                    ["2014-RM-04.B.2","2014-RM-04","Entitlement Reviews","",""],
                    ["2014-RM-04.C.4","2014-RM-04","Equity Pricing Memo Reviews","",""],
                    ["2014-RM-06.0.0","2014-RM-06","General","",""],
                    ["2014-SP-01.0.0","2014-SP-01","General","",""],
                    ["2015-AM-08.0.0","2015-AM-08","General","",""],
                    ["2015-AM-08.A.1","2015-AM-08","Policies & Procedures","",""],
                    ["2015-AM-08.A.2","2015-AM-08","Risk Assessments","",""],
                    ["2015-AM-08.B.1","2015-AM-08","Compulsory Training","",""],
                    ["2015-AM-08.B.2","2015-AM-08","Regulatory Awareness","",""],
                    ["2015-AM-08.B.3","2015-AM-08","Business Line Regulatory Risk Monitoring","",""],
                    ["2015-AM-08.B.4","2015-AM-08","ELT Reporting","",""],
                    ["2015-AM-08.C.1","2015-AM-08","Ongoing Compliance Monitoring","",""],
                    ["2015-AM-08.C.2","2015-AM-08","Standalone Montioring Engagements","",""],
                    ["2015-AM-08.C.3","2015-AM-08","Regulatory Breaches","",""],
                    ["2015-AM-08.D.1","2015-AM-08","Regulatory Reporting","",""],
                    ["2015-AM-09.0.0","2015-AM-09","General","",""],
                    ["2015-AM-09.A.1","2015-AM-09","Cash Payments","",""],
                    ["2015-AM-09.A.2","2015-AM-09","Transfers","",""],
                    ["2015-AM-09.B.1","2015-AM-09","Accounts Payable (Corporate)","",""],
                    ["2015-AM-09.B.2","2015-AM-09","Accounts Payable (Funds)","",""],
                    ["2015-AM-09.B.3","2015-AM-09","Accounts Receivable (Corporate)","",""],
                    ["2015-AM-09.C.2","2015-AM-09","Daily Balance Monitoring","",""],
                    ["2015-AM-09.C.3","2015-AM-09","Bank Recons","",""],
                    ["2015-AM-09.D.1","2015-AM-09","Managing Agents","",""],
                    ["2015-AM-09.E.1","2015-AM-09","System Access","",""],
                    ["2015-AM-09.E.2","2015-AM-09","Data Transmissions","",""],
                    ["2015-AM-12.0.0","2015-AM-12","Fund Finance","",""],
                    ["2015-TH-01.0","2015-TH-01","General","",""],
                    ["2015-TH-02.0","2015-TH-02","General","",""],
                    ["2015-TH-03.0.0","2015-TH-03","General","",""],
                    ["AD","FAMILY","Alyssa","",""],
                    ["ADMIN","ADMIN","Admin","",""],
                    ["BMP.A","BMP","General","N",""],
                    ["BMP.0","BMP","WFAM BMP","",""],
                    ["BMP.1","BMP","FMG BMP","N",""],
                    ["BMP.2","BMP","Galliard BMP","N",""],
                    ["BMP.3","BMP","Golden BMP","N",""],
                    ["BMP.4","BMP","WCM BMP","N",""],
                    ["BMP.6","BMP","FIA BMP","N",""],
                    ["BMP.7","BMP","ECM BMP","N",""],
                    ["BMP.5","BMP","Rock Creek BMP","",""],
                    ["CC.L","CC","Legal Entity Cvg. Coord.","N",""],
                    ["CC.O","CC","OON Cvg. Coord.","N",""],
                    ["BB","M.CW","Brian B.","N",""],
                    ["BM","M.CW","Brian","N",""],
                    ["CB","M.CW","Chris","N",""],
                    ["CW-Group","CWSocial","Co-workers","Y",""],
                    ["JC","M.CW","Joe","N",""],
                    ["JF","M.CW","Jarred","N",""],
                    ["JL","F.CW","Joyce","N",""],
                    ["JMo","F.CW","Julianne","N",""],
                    ["KA","M.CW","Kishwar","N",""],
                    ["LD","F.CW","Laurie","N",""],
                    ["LJ","F.CW","Lauren J","N",""],
                    ["MM","M.CW","Mani","N",""],
                    ["SJP","F.CW","Syndie","N",""],
                    ["DI","DI","Division Initiatives","",""],
                    ["Dog","DOG","Dog","",""],
                    ["AS","EXGFs","Auburn","N",""],
                    ["DT","EXGFs","Daya","N",""],
                    ["KW","F.Friends","Kristin","",""],
                    ["LM","EXGFs","Lauren","N",""],
                    ["AM","F.Friends","Amy","Y",""],
                    ["BK","F.Friends","Brentan","N",""],
                    ["CS","F.Friends","Caytie","",""],
                    ["JM","F.Friends","Jen","N",""],
                    ["JW","F.CW","Jasmine","N",""],
                    ["KS","F.Friends","Kira","N",""],
                    ["MH","F.Friends","Melinda","Y",""],
                    ["NK","F.Friends","Nina","N",""],
                    ["ME","F.Friends","Meghan","",""],
                    ["KP","F.CW","Kelley","N",""],
                    ["Family.1","FAMILY","Mom","",""],
                    ["Family.2","FAMILY","Dad","",""],
                    ["Family.3","FAMILY","Other Family","Y",""],
                    ["ENG","FLANG","English (Review)","N",""],
                    ["FRE","FLANG","French","N",""],
                    ["GER","FLANG","German","N",""],
                    ["ITA","FLANG","Italian","N",""],
                    ["Mpoints","FMI","Mpoints","",""],
                    ["Shopkick","FMI","Shopkick","",""],
                    ["FRIENDS.X","FRIENDS","General Social (Pre-Tracking)","",""],
                    ["IIA.1","IIA","Monthly Cash Recons","N",""],
                    ["IIA.2","IIA","Slot Purchase Cooridination","N",""],
                    ["IIA.3","IIA","Admin","N",""],
                    ["IIA.4","IIA","Treasurer","",""],
                    ["ISSUE","ISSUES","Issue Validation","N",""],
                    ["MAPS","ISSUES","MAP Validation","N",""],
                    ["MRA","ISSUES","MRA Validation","N",""],
                    ["LEARNING.1","LEARNING","Learning","Y",""],
                    ["LMOVE.1","LMOVE","General","",""],
                    ["LMOVE.2","LMOVE","Neighborhood Research","",""],
                    ["LMOVE.3","LMOVE","Apartment Listing Review","",""],
                    ["LMOVE.4","LMOVE","Cost of Living Related Research","",""],
                    ["BC","M.Friends","Brent","N",""],
                    ["DA","M.Friends","Dave A.","N",""],
                    ["DC","M.Friends","Dave","",""],
                    ["DL","M.Friends","Dan","N",""],
                    ["PS","M.Friends","Patrick","N",""],
                    ["RC","M.Friends","Ray","Y",""],
                    ["MP","M.Friends","Milo","Y",""],
                    ["TB","M.Friends","Tom","N",""],
                    ["MEET.1","MEET","Team Meeting","",""],
                    ["NA","NA","NA","",""],
                    ["PCD.1","PCD","Coaching","N",""],
                    ["PCD.2","PCD","Development Planning","N",""],
                    ["PCD.3","PCD","Performance Discussions","N",""],
                    ["PCD.4","PCD","Candidate Interview","N",""],
                    ["PCD.5","PCD","PCD - General","Y",""],
                    ["PCD.6","PCD","Self Evaluations","",""],
                    ["PERSONAL.1","PERSONAL","Non-Productive","",""],
                    ["PERSONAL.2","PERSONAL","Routine","",""],
                    ["PERSONAL.3","PERSONAL","Productive","",""],
                    ["PERSONAL.4","PERSONAL","Health","",""],
                    ["BREAK","PERSONAL","Break","",""],
                    ["PERSONAL.5","TRANS","Driving","",""],
                    ["PERSONAL.6","PERSONAL","Career","Y",""],
                    ["PERSONAL.7","PERSONAL","Shopping","",""],
                    ["PERSONAL.8","PERSONAL","Meals","",""],
                    ["PERSONAL.A","PERSONAL","Admin","",""],
                    ["PFIN.00","PFIN","Finances","",""],
                    ["PFIN.01","PFIN","Variable Cost Monitoring","N",""],
                    ["PFIN.02","PFIN","Fixed Cost Monitoring","N",""],
                    ["PFIN.03","PFIN","Budgeting","N",""],
                    ["PFIN.04","PFIN","Cost Driver Analysis","N",""],
                    ["PFIN.05","PFIN","Financial Planning / Forecasting","N",""],
                    ["PFIN.06","PFIN","Salary Projections / Analysis","N",""],
                    ["PFIN.07","PFIN","Bill Payments","N",""],
                    ["PFIN.08","PFIN","Investment Research","Y",""],
                    ["PROG.1","PROG","Python","Y",""],
                    ["PROG.2","PROG","Java","N",""],
                    ["PROG.3","PROG","HTML-CSS-JavaScript","Y",""],
                    ["PURCHASES","PURCHASES","Major Purchases","N",""],
                    ["TAX.1","TAX","Tax Return Prep","N",""],
                    ["TIAACO.0","TIAACO","General","",""],
                    ["TIMEDB.0","TIMEDB","Database","Y",""],
                    ["TIMEDB.1","TIMEDB","Underlying Tables","N",""],
                    ["TIMEDB.2","TIMEDB","Queries","N",""],
                    ["TIMEDB.3","TIMEDB","Forms","N",""],
                    ["TIMEDB.4","TIMEDB","Reports","N",""],
                    ["TRAINING.1","TRAINING","Audit Training","N",""],
                    ["TRAINING.2","TRAINING","WF Training","Y",""],
                    ["TRAINING.3","TRAINING","CIA Exam","N",""],
                    ["TRAINING.4","TRAINING","WFAS Onboarding","N",""],
                    ["TRAINING.5","TRAINING","CFE Exam","N",""],
                    ["TRANS.1","TRANS","Commute - Concord ","N",""],
                    ["News","NEWS","News","",""],
                    ["READ.1","READ","Research","",""],
                    ["CH","F.Friends","Chriselle","N",""],
                    ["PROG.4","PROG","AJAX","N",""],
                    ["PROG.5","PROG","JQuery","N",""],
                    ["160758.A","160758","PCG Admin","",""],
                    ["160758.P","160758","PCG Planning","",""],
                    ["160758.R","160758","PCG Reporting","",""],
                    ["160755.P","160755","IPCS Planning","",""],
                    ["160755.A","160755","IPCS Admin","",""],
                    ["AC","F.CW","April","N",""],
                    ["PERSONAL.9","TRANS","Air Travel","Y",""],
                    ["MD","M.Friends","Matt","N",""],
                    ["160758.1","160758","PCG Account Maintenance","",""],
                    ["160758.2","160758","PCG Advice & Oversight","",""],
                    ["160758.3","160758","PCG Communications","",""],
                    ["160758.4","160758","PCG Risk Mgmt","",""],
                    ["LMy","F.Friends","Laura","N",""],
                    ["JMe","M.CW","Jay","N",""],
                    ["LH","F.CW","Leigh","N",""],
                    ["ADf","F.Friends","Alyssa & Friends","Y",""],
                    ["VO","F.CW","Valeka","N",""],
                    ["MaH","F.CW","Marsha","N",""],
                    ["BG","F.CW","Bree","N",""],
                    ["REG","REG","Regulatory Reviews","N",""],
                    ["Training.6","CFA","CFA Exam Admin","Y",""],
                    ["CFA.0","CFA","CFA L2 - Level 1 Rev","N",""],
                    ["CFA.1","CFA","CFA L2 - Ethics","N",""],
                    ["CFA.2","CFA","CFA L2 - Quant Methods","N",""],
                    ["CFA.3","CFA","CFA L2 - Economics","N",""],
                    ["CFA.4","CFA","CFA L2 - Financial Rep","N",""],
                    ["CFA.5","CFA","CFA L2 - Corp Finance","N",""],
                    ["CFA.6","CFA","CFA L2 - Equity","N",""],
                    ["CFA.7","CFA","CFA L2 - Fixed Inc","N",""],
                    ["CFA.8","CFA","CFA L2 - Derivatives","N",""],
                    ["CFA.9","CFA","CFA L2 - Alternatives","N",""],
                    ["CFA.10","CFA","CFA L2 - Port Mgmt","N",""],
                    ["IC","CWSocial","IIA Contacts","N",""],
                    ["Family.4","FAMILY","My Parents","Y",""],
                    ["Family.5","FAMILY","Alyssa & My Parents","Y",""],
                    ["Family.6","FAMILY","Alyssa & Dogs","Y",""],
                    ["Family.7","FAMILY","Alyssa, My Parents & Dogs","N",""],
                    ["Family.8","FAMILY","My Parents & Dogs","N",""],
                    ["A-K","F.Friends","Alyssa & Kristin","Y",""],
                    ["A-M","F.Friends","Alyssa & Meghan","N",""],
                    ["A-D","M.Friends","Alyssa & Dave","N",""],
                    ["C-M","CWSocial","Caytie & Mani","N",""],
                    ["A-D-M-C","CWSocial","AD-DC-ME-CS","N",""],
                    ["CFA.T","CFA","CFA L2 - Practice Tests","N",""],
                    ["TRANS.2","TRANS","Commute - CIC","N",""],
                    ["TRANS.3","TRANS","Commute - Irregular","N",""],
                    ["160755.R","160755","IPCS Reporting","Y",""],
                    ["Jeremy H","CWSocial","JH","N",""],
                    ["JH","M.CW","Jeremy H","N",""],
                    ["ST","F.CW","Sandie","N",""],
                    ["160755.1","160755","IPCS Sales","Y",""],
                    ["160755.2","160755","IPCS Account Setup","Y",""],
                    ["160755.3","160755","IPCS Roles & Resp.","Y",""],
                    ["160755.4","160755","IPCS Policies","Y",""],
                    ["160755.5","160755","IPCS Move Money","Y",""],
                    ["160755.6","160755","IPCS Travel Exp","Y",""],
                    ["170754.A","170754","WFAM Sales Admin","Y",""],
                    ["170754.P","170754","WFAM Sales Planning","Y",""],
                    ["170754.R","170754","WFAM Sales Reporting","Y",""],
                    ["C-P","CWSocial","Caytie & Patrick","N",""],
                    ["Family.9","FAMILY","Alyssa, Other Family, Dogs","N",""],
                    ["BA","M.Friends","Ben","Y",""],
                    ["CFA.E","CFA","CFA - Exam","Y",""],
                    ["PHY.G","PHY","Physics (General)","Y",""],
                    ["170754.1","170754","WFAM Sales - Marketing","Y",""],
                    ["170754.2","170754","WFAM Sales - Sales Activities","Y",""],
                    ["170754.3","170754","WFAM Sales - New Accounts","Y",""],
                    ["170754.4","170754","WFAM Sales - Call Centers","Y",""],
                    ["170746.1","170746","FMG Compliance","Y",""],
                    ["170746.2","170746","WCM Compliance","Y",""],
                    ["170746.3","170746","Galliard Compliance","Y",""],
                    ["170746.4","170746","Golden Compliance","Y",""],
                    ["170746.5","170746","Rock Creek Compliance","Y",""],
                    ["170862.03.A","170862.03","Reg O RR Admin","Y",""],
                    ["170862.03.P","170862.03","Reg O RR Planning","Y",""],
                    ["JP","M.CW","Jeremy P","N",""],
                    ["CFA.11","CFA","CFA L3 - Ethics","Y",""],
                    ["CFA.12","CFA","CFA L3 - Wealth Mgmt","Y",""],
                    ["CFA.13","CFA","CFA L3 - Capital Mkts","Y",""],
                    ["CFA.14","CFA","CFA L3 - Asset Allocation","Y",""],
                    ["CFA.15","CFA","CFA L3 - Equity","Y",""],
                    ["CFA.16","CFA","CFA L3 - Fixed Inc","Y",""],
                    ["CFA.17","CFA","CFA L3 - Alts","Y",""],
                    ["CFA.18","CFA","CFA L3 - Risk Mgmt","Y",""],
                    ["CFA.19","CFA","CFA L3 - Derivatives","Y",""],
                    ["CFA.20","CFA","CFA L3 - Port Mgmt","Y",""],
                    ["CFA.21","CFA","CFA L3 - Behavioral Fin","Y",""],
                    ["CFA.22","CFA","CFA L3 - All","Y",""],
                    ["170745.P","170745","Galliard - Planning","Y",""],
                    ["DM","M.CW","Devon","N",""],
                    ["JD","M.CW","Johan","Y",""],
                    ["NEWS.S","NEWS","Sports","N",""],
                    ["MB","F.CW","Maureen","N",""],
                    ["NB","M.CW","Neil","N",""],
                    ["SM","M.CW","Sandy","N",""],
                    ["AC-ME","F.CW","April & Meghan","N",""],
                    ["HC","M.CW","Hassan","N",""],
                    ["D-M","CWSocial","Dave & Meghan","N",""],
                    ["NW","F.CW","Nicki","N",""],
                    ["NEWS.I","NEWS","Investment News","Y",""],
                    ["170745.01","170745","Galliard - Marketing","Y",""],
                    ["170745.02","170745","Galliard - Sales","Y",""],
                    ["170745.03","170745","Galliard - New Accounts","Y",""],
                    ["170745.04","170745","Galliard - Service Customers","Y",""],
                    ["170745.05","170745","Galliard - Physical Security","Y",""],
                    ["170745.06","170745","Galliard - User Access","Y",""],
                    ["170745.07","170745","Galliard - Trading","Y",""],
                    ["170745.08","170745","Galliard - Portfolio Mgmt","Y",""],
                    ["170745.09","170745","Galliard - Recons","Y",""],
                    ["170745.1","170745","Galliard - Oversight","Y",""],
                    ["NORM.TV1","NORM","Game of Thrones","N",""],
                    ["NORM.S","NORM","Sports","N",""],
                    ["170745.A","170745","Galliard - Admin","Y",""],
                    ["170744.P","170744","WCM - Planning","Y",""],
                    ["170744.A","170744","WCM - Admin","Y",""],
                    ["PROG.6","PROG","PHP","N",""],
                    ["PROG.7","PROG","JSON","N",""],
                    ["170744.01","170744","WCM - Trading","Y",""],
                    ["170744.02","170744","WCM - Port. Mgmt.","Y",""],
                    ["170744.03","170744","WCM - Client Service","Y",""],
                    ["170744.04","170744","WCM - Conf Info","Y",""],
                    ["TRAINING.7","TRAINING","CPE Training","Y",""],
                    ["170075","170075","RI Audit - General","Y",""],
                    ["POL.00","POL","Policy Mgmt - General","Y",""],
                    ["SHRP.00","SHRP","SHRP-RCSA - General","Y",""],
                    ["ISSUE.00","ISSUES","Issues - General","Y",""],
                    ["BPRM.00","BPRM","BPM - General","Y",""],
                    ["RITV.00","RITV","RITV - General","N",""],
                    ["DLP.00","DLP","DLP - General","N",""],
                    ["AB","F.CW","Alex","N",""],
                    ["AUD.00","AUD","Audits - General","Y",""],
                    ["NP.00","NP","General - New Prod","N",""],
                    ["C-ME","F.Friends","Caytie & Meghan","N",""],
                    ["DLP.01","DLP","Elevated Internet Access","Y",""],
                    ["DLP.02","DLP","Email Filtering","N",""],
                    ["MTA.00","MTA","General - MTA","N",""],
                    ["REP.00","REP","General - Reporting","Y",""],
                    ["REP.01","REP","IP Qtrly Rep","Y",""],
                    ["READ.02","READ","Quora","N",""],
                    ["BPRM.01","BPRM","Process Map Updates","N",""],
                    ["FCRM.01","FCRM","FCRM - General","Y",""],
                    ["FCRM.02","FCRM","Customer Stats","N",""],
                    ["180161","180161","IP SP - General","Y",""],
                    ["MOVE.W","WMOVE","Waxhaw Move ","N",""],
                    ["TRANS.4","TRANS","Commute - Waxhaw","N",""],
                    ["180305","180305","MIP Audit - General","Y",""],
                    ["AUD.01","AUD","Reinsurance AML Audit","N",""],
                    ["AUD.02","AUD","Structured Products Audit","N",""],
                    ["AUD.03","AUD","MIP Audit","N",""],
                    ["CV","F.Friends","Christine","N",""],
                    ["TR","M.Friends","Tyler","Y",""],
                    ["TBe","F.CW","Taran","N",""],
                    ["CFA.23","CFA","CFA L3 - Practice Tests","Y",""],
                    ["SLA.0","SLA","SLA General","N",""],
                    ["SP.0","SP","Sales Practices - General","N",""],
                    ["NEWS.A","NEWS","Astronomy","N",""],
                    ["AUD.04","AUD","Iowa Exam","N",""],
                    ["REP.02","REP","Monthly Forum","N",""],
                    ["SA.0","SA","Self Assurance - General","N",""],
                    ["A-R","M.Friends","Alyssa & Ray","N",""],
                    ["A-M-R-T-N","CWSocial","Alyssa Melinda Ray Tom Nina","N",""],
                    ["A-MH","F.Friends","Alyssa & Melinda","N",""],
                    ["AUD.05","AUD","IRR ERMA","N",""],
                    ["AUD.06","AUD","Trading Audit","N",""],
                    ["REP.03","REP","Partner Slide","N",""],
                    ["NORM.F","NORM","Fashion","Y",""],
                    ["RCSA.00","RCSA","RCSA - General","Y",""],
                    ["RCSA.A","RCSA","RCSA Assessment","Y",""],
                    ["RCSA.R","RCSA","RCSA Reporting","Y",""],
                    ["RCSA.I","RCSA","Intl RCSA","N",""],
                    ["BPRM.R","BPRM","BPRM Reporting","N",""],
                    ["ISSUE.R","ISSUES","Issue Reporting","Y",""],
                    ["SHRP.01","SHRP","MR Controls","Y",""],
                    ["SHPR.R","SHRP","SHRP Reporting","N",""],
                    ["ADb","M.CW","Abe","Y",""],
                    ["PURC.01","PURCHASES","2018 Car","Y",""],
                    ["NORM.C","NORM","Cocktails","N",""],
                    ["NORM.FO","NORM","Food","N",""],
                    ["NORM.T","NORM","Travel","N",""],
                    ["NORM.CA","NORM","Cars","N",""],
                    ["REP.04","REP","Risk Committee","Y",""],
                    ["PROG.8","PROG","Algorithms","N",""],
                    ["NP.01","NP","REEF API","N",""],
                    ["REP.05","REP","Weekly Report","N",""],
                    ["BSDI.0","BSDI","BSDI General","Y",""],
                    ["RID.0","RID","Risk ID General","N",""],
                    ["OB.0","OB","Onboarding - General","N",""],
                    ["N1","M.Friends","Neighbors","Y",""],
                    ["TRANS.5","TRANS","Commute - Waxhaw (O)","N",""],
                    ["AUD.07","AUD","Municipals Audit","N",""],
                    ["VOL.G","VOL","Volcker General","N",""],
                    ["TG.0","TG","Trade Governance - General","N",""],
                    ["NP.02","NP","Single Security","N",""],
                    ["NP.03","NP","Reinsurance Retirements","N",""],
                    ["NP.04","NP","E-Trading","N",""],
                    ["PROG.9","PROG","Visual Basic","Y",""],
                    ["CHC.R","CHC","Childcare","Y",""],
                    ["WRT.S","WRT","Short Stories","N",""],
                    ["SPA","FLANG","Spanish","N",""],
                    ["SHRP.02","SHRP","Hierarchy Changes","Y",""],
                    ["CRMP.0","CRMP","CRMP - General","N",""],
                    ["TR.00","TR","Tech Risk (General)","N",""],
                    ["TR.01","TR","Ada","Y",""],
                    ["RC.00","RC","Reg Control - General","Y",""],
                    ["IRR.00","IRR","Intl. Reg. Rep. General","N",""]]
            }

			const objLCont = {}

			for(i=0; i<LContAll[0].length; i++){

				objLCont[LContAll[0][i]]={"ContID": LContAll[0][i], "ContDesc": LContAll[1][i], "ProjID": LContAll[2][i], "Active": LContAll[3][i]}

			}

			//Use Codes & Colors

			//let data_pu = <?php echo json_encode( $arr_pu ) ?>;
				
			//localStorage.setItem("LSPU", JSON.stringify(data_pu));
			
			let LPU = JSON.parse(localStorage.getItem("LSPU"));

            if(LPU){}else{
                LPU=
                [["A","Admin","Silver"],
                ["B","Break","red"],
                ["D","Development","YellowGreen"],
                ["I","IIA","pink"],
                ["M","Meeting","lime"],
                ["S","Social","yellow"],
                ["P","Personal","purple"],
                ["W","Work","green"],
                ["N","Untracked","black"],
                ["L","Learning","gold"],
                ["T","Training","orange"],
                ["1","Productive","Peru"],
                ["2","Travel","DimGray"],
                ["R","Routine","Cyan"],
                ["H","Health","Blue"],
                ["3","Meal","Fuchsia"]]

            }
			
			const objLPU = {}

			for(i=0; i<LPU[0].length; i++){

				objLPU[LPU[0][i]]={"PUCode": LPU[0][i], "PUCodeDesc": LPU[1][i], "Active": LPU[3][i], "Color": LPU[2][i]};
				
			}

			setTime();

			if(LEvents===null){

				LEvents = [];
			
			}else{

				displayLEvents();

			}

			if(LMoods===null){

				LMoods = [];
			
			}else{

				displayLMoods();

			}

			localEventButton('N04', 'NA', 'Bed', "tblRoutine", "n");

			localEventButton('B01', 'PERSONAL.2', 'BR', "tblRoutine", "n");

			localEventButton('B07', 'PERSONAL.2', 'BR-2', "tblRoutine", "n");

			localEventButton('P29', 'PERSONAL.2', 'Shower', "tblRoutine", (2*60*60*24));

			localEventButton('P60', 'PERSONAL.2', 'Floss', "tblRoutine", (2*60*60*24));

			localEventButton('P09', 'PERSONAL.2', 'Brush Teeth', "tblRoutine", (2*60*60*24));
					
			localEventButton('P33', 'PERSONAL.2', 'Shave & Hair', "tblRoutine", (3*60*60*24));

			localEventButton('P20', 'PERSONAL.2', 'Dress', "tblRoutine", "n");

			localEventButton('P32', 'PERSONAL.2', 'Pack', "tblRoutine", "n");

			localEventButton('P16', 'Dog', 'Dog', "tblRoutine", "n");

			localEventButton('P30', 'Dog', 'Walk (D)', "tblRoutine", "n");

			localEventButton('P12', 'PERSONAL.2', 'Fingernails', "tblRoutine", (10*60*60*24));

			localEventButton('P29', 'Dog', 'Shower (D)', "tblRoutine", (30*60*60*24));

			localEventButton('N01', 'NA', 'Untracked', "tblRoutine", "n");

			localEventButton('C03', 'CHC.R', 'Feeding', "tblccare", "n");

			localEventButton('C01', 'CHC.R', 'Diaper 1', "tblccare", "n");

			localEventButton('C02', 'CHC.R', 'Diaper 2', "tblccare", "n");

			localEventButton('C08', 'CHC.R', 'Reading', "tblccare", (4*60*60*24));
				
			localEventButton('C09', 'CHC.R', 'Play', "tblccare", "n");
				
			localEventButton('C04', 'CHC.R', 'Bath', "tblccare", "n");

			localEventButton('S01', 'CW-Group', 'Social (CW)', "tblsocial", "n");

			localEventButton('S13', 'CW-Group', 'Bar (CW)', "tblsocial", "n");

			localEventButton('S01', 'DC', 'Social (DC)', "tblsocial", "n");
					
			localEventButton('S01', 'ME', 'Social (ME)', "tblsocial", "n");

			localEventButton('A02', 'ADMIN', 'Inbox', "tblwork", "n");

			localEventButton('T04', 'TRAINING.2', 'WF Training', "tblwork", "n");

			localEventButton('M10', 'MEET.1', 'Team Mtg', "tblwork", "n");

			localEventButton('A07', 'ADMIN', 'Tech Support', "tblwork", "n");

			localEventButton('M02', 'RCSA.00', 'RCSA: Bus Mtg', "tblwork", "n");

			localEventButton('M01', 'RCSA.00', 'RCSA: R&C Mtg', "tblwork", "n");

			localEventButton('W29', 'RCSA.A', 'RCSA: Controls', "tblwork", "n");

			localEventButton('W10', 'RCSA.00', 'RCSA: Email', "tblwork", "n");

			localEventButton('W10', 'SHRP.01', 'MR Ctr: Email', "tblwork", "n");

			localEventButton('M01', 'SHRP.01', 'MR Ctr: R&C Mtg', "tblwork", "n");

			localEventButton('W10', 'RC.00', 'Reg Ctr Email', "tblwork", "n");

			localEventButton('M01', 'RC.00', 'Reg Ctr R&C Mtg', "tblwork", "n");

			localEventButton('N02', 'AD', 'Drive (A)', "tblfam", "n");

			localEventButton('S07', 'AD', 'Meal (A)', "tblfam", "n");

			localEventButton('S01', 'Family.1', 'Social (Mom)', "tblfam", "n");

			localEventButton('S01', 'AD', 'Social (A)', "tblfam", "n");

			localEventButton('S01', 'Family.3', 'Social (F)', "tblfam", "n");

			localEventButton('S10', 'AD', 'Shopping (A)', "tblfam", "n");

			localEventButton('N03', 'AD', 'TV (A)', "tblfam", "n");

			localEventButton('S09', 'AD', 'Events (A)', "tblfam", "n");

			localEventButton('N02', 'Family.6', 'Drive (A&D)', "tblfam", "n");

			localEventButton('P30', 'Family.6', 'Walk (A&D)', "tblfam", "n");

			localEventButton('N02', 'PERSONAL.5', 'Drive', "tbltrans", "n");
			
			localEventButton('N02', 'TRANS.4', 'Drive Commute (In)', "tbltrans", "n");
						
			localEventButton('P30', 'TRANS.4', 'Walk Commute (In)', "tbltrans", "n");
						
			localEventButton('P30', 'TRANS.5', 'Walk Commute (Out)', "tbltrans", "n");
						
			localEventButton('N02', 'TRANS.5', 'Drive Commute (Out)', "tbltrans", "n");

			localEventButton('P40', 'PERSONAL.5', 'Gas', "tbltrans", "n");

			localEventButton('N02', 'Dog', 'Drive (D)', "tbltrans", "n");

			localEventButton('P42', 'PERSONAL.4', 'Run', "tblhealth", "n");

			localEventButton('P31', 'PERSONAL.4', 'Gym', "tblhealth", (7*60*60*24));

			localEventButton('P63', 'PERSONAL.4', 'Meditate', "tblhealth", (7*60*60*24));

			localEventButton('P30', 'PERSONAL.4', 'Walk', "tblhealth", "n");

			localEventButton('P15', 'PERSONAL.4', 'Doctor', "tblhealth", "n");

			localEventButton('B02', 'PERSONAL.8', 'Eat', "tblfood", "n");

			localEventButton('B06', 'PERSONAL.8', 'Beverage', "tblfood", "n");

			localEventButton('P45', 'PERSONAL.8', 'Pick-up Food', "tblfood", "n");

			localEventButton('P13', 'PERSONAL.8', 'Cook', "tblfood", "n");

			localEventButton('B09', 'PERSONAL.8', 'Eat Slow', "tblfood", "n");
					
			localEventButton('B05', 'PERSONAL.8', 'Order Food', "tblfood", "n");

			localEventButton('P18', 'PERSONAL.4', 'Food Tracking', "tblfood", "n");
					
			localEventButton('P35', 'E1.2', 'Dishes', "tblchores", (4*60*60*24));

			localEventButton('P34', 'E1.3', 'Laundry', "tblchores", (14*60*60*24));

			localEventButton('P41', 'E1.4', 'Trash', "tblchores", (5*60*60*24));

			localEventButton('P59', 'E1.6', 'Vacuum', "tblchores", "n");

			localEventButton('P36', 'PERSONAL.7', 'Groceries', "tblchores", "n");

			localEventButton('P22', 'PERSONAL.3', 'Haircut', "tblchores", (30*60*60*24));

			localEventButton('P64', 'E1.6', 'Mail', "tblchores", (21*60*60*24));

			localEventButton('P61', 'PERSONAL.3', 'Sheets & Towels', "tblchores", (30*60*60*24));

			localEventButton('P37', 'E1.5', 'Lawn', "tblchores", "n");

			localEventButton('P58', 'E1.6', 'Clean Kitchen', "tblchores", "n");

			localEventButton('P48', 'E1.7', 'Clean Car', "tblchores", "n");

			localEventButton('P11', 'E1.6', 'Clean House', "tblchores", (30*60*60*24));

			localEventButton('P39', 'PERSONAL.7', 'Shopping: Home', "tblchores", "n");

			localEventButton('P47', 'PERSONAL.7', 'Shopping: Online', "tblchores", "n");

			localEventButton('P43', 'PERSONAL.3', 'Home Repairs', "tblchores", "n");

			localEventButton('L03', 'PERSONAL.3', 'Car Repairs', "tblchores", "n");

			localEventButton('P05', 'PERSONAL.A', 'Personal Admin', "tblpersonal", "n");

			localEventButton('P01', 'TIMEDB.0', 'Database', "tblpersonal", "n");

			localEventButton('P04', 'PFIN.00', 'Finances', "tblpersonal", "n");

			localEventButton('P26', 'PERSONAL.1', 'JO', "tblpersonal", "n");

			localEventButton('N03', 'PERSONAL.1', 'TV', "tblpersonal", "n");

			localEventButton('L16', 'READ.1', 'Research', "tblpersonal", "n");

			localEventButton('L16', 'PERSONAL.4', 'Read: Health', "tblpersonal", "n");

			localEventButton('L19', 'LEARNING.1', 'Crossword', "tblpersonal", "n");

			localEventButton('L14', 'PROG.3', 'JavaScript', "tblpersonal", "n");

			localEventButton('L14', 'PROG.1', 'Python', "tblpersonal", "n");

			localEventButton('P24', 'PERSONAL.1', 'Internet', "tblpersonal", "n");

			localEventButton('L16', 'News', 'News', "tblpersonal", "n");

			function btnclr(){

				$("button").css("background-color", defaultBtnBGColor);
				
				$("button").css("color", defaultBtnColor);

				resetAll();
			}

			$(".sTime").change(function(){

				displayLEvents();
				
			});

			function CheckLEvents(){
			
				//create array for missing events
				let missingEvents = [];

				//sort the list of local events
				LEvents.sort();
				
				LEvents.reverse();
				
				
				ELen = LEvents.length;
				
				SLen = srvevents[0].length;
				
				//confirm local events are in server
				
				for (i = 0; i < ELen; i++) {
				
					let varLocal = FixTime(LEvents[i][0]);
					let svrList = srvevents[0];
					
					if(svrList.includes(varLocal[3])!=true){
						
						missingEvents.push(LEvents[i]);
						
					}
				
				}

				let missingEventCount = missingEvents.length;
				
				if(missingEventCount>0){
				
					text = "<table>";
				
					text += "<th></th><th></th><th>Date</th><th>Time</th><th>Act</th><th>Cont</th><th></th>";

					for (i = 0; i < missingEventCount; i++) {
				
						text += "<tr><td>" +
						
						"<input type=button value=+ class=slnk onclick='JQPost(`"+ missingEvents[i][1] + "`,`" + missingEvents[i][2] + "`,`" + missingEvents[i][0] + "`,`" + i+"`)'/>" + 
					
						"</td><td>" 
						+ missingEvents[i][5].substring(0,5) 
						+ "</td><td>" 
						+ missingEvents[i][5].substring(6) 			
						+ "</td><td>" 
						+ missingEvents[i][3] 
						+ "</td><td>" 
						+ missingEvents[i][2] 
						+ "</td><td>" 
						+ missingEvents[i][4] 
						+ "</td></tr>";
				
					}
				
					text += "</table>";

					document.getElementById("listContainer").innerHTML = text;
				
					alert("Conflicts Found!");
				
					return;
				}

				LEvents =[];

				for (i = 0; i < SLen; i++) {

					let srvtime = FixTime(srvevents[0][i]);

					LEvents.push([srvtime[0], srvevents[1][i], srvevents[2][i], srvevents[3][i]]);
				}

				displayLEvents();

				alert("Sync Done");
			}

			function delEvent(i){
				
				var q = "Delete "+LEvents[i][0]+": "+LEvents[i][3]+"?";

				var c = confirm(q);
				
				if (c == true){
				
					var etime = sqTime(LEvents[i][0]);
				
					var a = LEvents.splice(i, 1);
					
					alert( objLEvents[LEvents[i][0]] )
				
					JQDel(etime, 'tblEvents', 'StartTime');
					
					resetAll();
				
				}
			}

			function resetLEvents(){

				if(LEvents === undefined || LEvents.length == 0) {
				
					//do nothing
				
				}else{

					localStorage.setItem("LSEvents", JSON.stringify(LEvents));
					
					displayLEvents();
					
				}
			}

			function displayList(arr){

				S = arr. length;
				
				L = arr[0].length;
				
				text = "<table>";
				
				for (i = 0; i < L; i++) {
					
					text += "<tr>";
					
					for (j = 0; j < S; j++){
					
						text += "<td>" + arr[j][i] + "</td>";
						
					}
					
					text += "</tr>";
				
				}
				
				text += "</table>";
				document.getElementById("listContainer").innerHTML = text;
			}

			//uses the prior event to create a new event record

			function PriorEvent(){

				const selPost = $("#selPost").val();

				const actValue = LEvents[1][1];
				const contValue = LEvents[1][2];
				const actText = LEvents[1][3];
				
				setETime();
				
				LEvents.push([sqTime(datetimeValue), actValue, contValue, actText]);
				
				if(selPost==="Y"){
										
					JQPost(actValue, contValue, datetimeValue);
					
				}

				resetAll();
				
			}

			//updates the contents of a record in the events table. 

			function UpdateEvent(id){

				$( "#pu" ).val( "U" );
				$( "#selP" ) . val( "Y" );
				$( "body" ).css( "background-color", "DarkRed" );
				
				origTime = LEvents[id][0];

				const formattedOrigTime = FixTime(origTime)

				$( "#selFT" ) . val(formattedOrigTime[1]);
				$( "#DateTime" ) . val(formattedOrigTime[0]);
				$( "#DateTime" ) . text(formattedOrigTime[2]);
				
				eid = id;

				console.log("origTime="+origTime+" eid="+eid)
				
				var q = "Update: "+formattedOrigTime[2]+" - "+LEvents[id][3];

				$("#pmEvent").val(id);
				$("#pmEvent").text(q);

				resetAll();

			}

			function jqUpdateEvent(oTime, nTime, act, cont){

				const postData = $.ajax(
				{	
					type: "POST",
					url: "./update/UpdateEvent.php",
					data: { origTime: oTime, newTime: nTime, newAct: act, newCont: cont },
					success: function() { 
						console.log("Updated: "+oTime);
					}
				}).fail(function(){
					alert("Fail");
				}).always(function(){
					clearForm()
				});
			}

			function clearForm(){

				$("#pmEvent").empty();

				$("#pu"). text("");
				$("#pu"). val("");
				
				manualEventForm.clearDiv();

				setTime();
				
				resetAll();
			}

			

			function resetAll(){
				
				resetTime();
				
				resetLEvents();
				
				resetLMoods();
				
				resetbtn();
				
			}



			//USED IN FUNCTIONS: delEvent(l#1010) and delMood (l#1029)
			function JQDel(etime, tbl, index){

			$.post("./del/DelJQ.php",
				{
					v1: etime,
					c1: index,
					selTbl: tbl
				});
			}

			//USED IN resetbtn(l#1419)
            /*
			function findLast(actid, contid){
				
				LEvents.sort();
				
				LEvents.reverse();
				
				ELen = LEvents.length;

				for (j = 0; j < ELen; j++) {
				
					if(LEvents[j][1]==actid){
					
						if(LEvents[j][2]==contid){
								
							var ESecs = Math.round((Date.now()-Date.parse(LEvents[j][0])) / 1000);
								
							var STime = ELTime(ESecs);

							let arrFL = [STime, ESecs];

							return(arrFL);
							
						}
					}
				}
				


                LUlen = lastuse[0].length;
            
                for (j = 0; j < LUlen; j++) {

                    if(lastuse[0][j]==actid){
                    
                        if(lastuse[1][j]==contid){
                        
                            var ESecs = Number(lastuse[2][j]);
                                
                            var STime = ELTime(ESecs);
                            
                            let arrFL = [STime, ESecs];

                            return(arrFL);
                            
                        }
                    }
                }
				
				let arrFL = ["N/A", 0];

				return(arrFL);
			}
            */

			//USED IN FUNCTION:  findLast 
			function ELTime(secs) {
				
				var days = secs / (60*60*24);
					
				if(days>=1){
					
					return Math.round(days) + "d";
					
				}else{
					
				var hrs = secs / (60*60);
						
				if(hrs>=1){
							
					return Math.round(hrs) + "h";
								
				}else{
							
				var mins = secs / 60;
								
				if(mins>=1){
									
					return Math.round(mins) + "m";
								
				}else{
								
					return secs + "s";
				}
				}
				}
			}

			function displayActDurs(){

				const activityDurationList = {};

				LEvents.sort();
				
				LEvents.reverse();
				
				ELen = LEvents.length;
				
				var minDate = Date.now()-(2*24*60*60*1000);
				
				text = 
					"<table class='durationSummary'>" +
						"<thead>" +
							"<th>Activity</th>" +
							"<th>Duration</th>" +
						"</thead>" +
						"<tbody>";
				
				for (i = 0; i < ELen; i++) {
				
					if(i==0){
						
						var eventLength = Date.now()-Date.parse(LEvents[i][0]);
						
					}else{
					
						eventLength = Date.parse(LEvents[i-1][0])-Date.parse(LEvents[i][0]);
					
					}
					
					//formatEventDuration(eventLength);
					
					if(Date.parse(LEvents[i][0]) > minDate){

						//arr1.push([LEvents[i][3], eventLength]);

						if(activityDurationList.hasOwnProperty(LEvents[i][3])==false){
							
							activityDurationList[LEvents[i][3]] = eventLength;

						} else {

							activityDurationList[LEvents[i][3]] += eventLength;

						}
					
					}
				
				}
				
				let sortArray = [];

				for (let activityName in activityDurationList) {
					sortArray.push([activityName, activityDurationList[activityName]]);
				}

				sortArray.sort(function(a, b){
					return b[1]-a[1];
				})

				let sortedActivityDurationList = {}

				sortArray.forEach(function(item){
					sortedActivityDurationList[item[0]]=item[1];
				});

				for (let activityName in sortedActivityDurationList) {
				
					text += "<tr><td>"+activityName+"</td><td>"+formatEventDuration(sortedActivityDurationList[activityName])+"</td></tr>";
						
				}
				
				text += "</tbody></table>";

				document.getElementById("listContainer").innerHTML = text;

			}
			
			function postAll(){

				ELen = LEvents.length;
				MLen = LMoods.length;

				for (var i=0; i<50; i++) {

					var tvar = LEvents[i][0];
					var act = LEvents[i][1];
					var cont = LEvents[i][2];
	
					JQPost(act, cont, tvar, i);
      
				}

				for (var i=0; i<50; i++) {

					var dtime = LMoods[i][0];
					var mood = LMoods[i][1];
	
					MPost(mood, dtime, i);
				}
				
				alert("Sync Complete")
			}

		</script>
	</div>
	</body>
</html>
























